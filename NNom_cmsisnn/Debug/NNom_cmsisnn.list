
NNom_cmsisnn.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e904  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00010648  0800eaa8  0800eaa8  0001eaa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f0f0  0801f0f0  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801f0f0  0801f0f0  0002f0f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f0f8  0801f0f8  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f0f8  0801f0f8  0002f0f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f0fc  0801f0fc  0002f0fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0801f100  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d28  200001dc  0801f2dc  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f04  0801f2dc  00030f04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b330  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000526a  00000000  00000000  0005b53c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e00  00000000  00000000  000607a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bb8  00000000  00000000  000615a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a815  00000000  00000000  00062160  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000138d3  00000000  00000000  0007c975  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c8d19  00000000  00000000  00090248  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00158f61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004720  00000000  00000000  00158fdc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ea8c 	.word	0x0800ea8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	0800ea8c 	.word	0x0800ea8c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <nnom_model_create>:

/* nnom model */
static int8_t nnom_input_data[3072];
static int8_t nnom_output_data[43];
static nnom_model_t* nnom_model_create(void)
{
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	b0ad      	sub	sp, #180	; 0xb4
 8000f9c:	af06      	add	r7, sp, #24
	static nnom_model_t model;
	nnom_layer_t* layer[14];

	new_model(&model);
 8000f9e:	48a3      	ldr	r0, [pc, #652]	; (800122c <nnom_model_create+0x294>)
 8000fa0:	f007 f842 	bl	8008028 <new_model>

	layer[0] = Input(shape(32, 32, 3), nnom_input_data);
 8000fa4:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000fa8:	2303      	movs	r3, #3
 8000faa:	2220      	movs	r2, #32
 8000fac:	2120      	movs	r1, #32
 8000fae:	f007 fe9c 	bl	8008cea <shape>
 8000fb2:	4a9f      	ldr	r2, [pc, #636]	; (8001230 <nnom_model_create+0x298>)
 8000fb4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fb8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000fbc:	f008 ff5a 	bl	8009e74 <Input>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	603b      	str	r3, [r7, #0]
	layer[1] = model.hook(Conv2D(6, kernel(5, 5), stride(1, 1), dilation(1, 1), PADDING_VALID, &conv2d_w, &conv2d_b), layer[0]);
 8000fc4:	4b99      	ldr	r3, [pc, #612]	; (800122c <nnom_model_create+0x294>)
 8000fc6:	68dc      	ldr	r4, [r3, #12]
 8000fc8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fcc:	2205      	movs	r2, #5
 8000fce:	2105      	movs	r1, #5
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f007 fea8 	bl	8008d26 <kernel>
 8000fd6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fda:	2201      	movs	r2, #1
 8000fdc:	2101      	movs	r1, #1
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f007 feb1 	bl	8008d46 <stride>
 8000fe4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000fe8:	2201      	movs	r2, #1
 8000fea:	2101      	movs	r1, #1
 8000fec:	4618      	mov	r0, r3
 8000fee:	f007 feba 	bl	8008d66 <dilation>
 8000ff2:	4b90      	ldr	r3, [pc, #576]	; (8001234 <nnom_model_create+0x29c>)
 8000ff4:	9305      	str	r3, [sp, #20]
 8000ff6:	4b90      	ldr	r3, [pc, #576]	; (8001238 <nnom_model_create+0x2a0>)
 8000ff8:	9304      	str	r3, [sp, #16]
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	9303      	str	r3, [sp, #12]
 8000ffe:	ab01      	add	r3, sp, #4
 8001000:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001004:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001008:	6018      	str	r0, [r3, #0]
 800100a:	3304      	adds	r3, #4
 800100c:	8019      	strh	r1, [r3, #0]
 800100e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001012:	f8ad 3000 	strh.w	r3, [sp]
 8001016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001018:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800101c:	ca06      	ldmia	r2, {r1, r2}
 800101e:	2006      	movs	r0, #6
 8001020:	f008 f84a 	bl	80090b8 <Conv2D>
 8001024:	4602      	mov	r2, r0
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	4619      	mov	r1, r3
 800102a:	4610      	mov	r0, r2
 800102c:	47a0      	blx	r4
 800102e:	4603      	mov	r3, r0
 8001030:	607b      	str	r3, [r7, #4]
	layer[2] = model.active(act_relu(), layer[1]);
 8001032:	4b7e      	ldr	r3, [pc, #504]	; (800122c <nnom_model_create+0x294>)
 8001034:	699c      	ldr	r4, [r3, #24]
 8001036:	f007 fffd 	bl	8009034 <act_relu>
 800103a:	4602      	mov	r2, r0
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4619      	mov	r1, r3
 8001040:	4610      	mov	r0, r2
 8001042:	47a0      	blx	r4
 8001044:	4603      	mov	r3, r0
 8001046:	60bb      	str	r3, [r7, #8]
	layer[3] = model.hook(MaxPool(kernel(2, 2), stride(2, 2), PADDING_VALID), layer[2]);
 8001048:	4b78      	ldr	r3, [pc, #480]	; (800122c <nnom_model_create+0x294>)
 800104a:	68dc      	ldr	r4, [r3, #12]
 800104c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001050:	2202      	movs	r2, #2
 8001052:	2102      	movs	r1, #2
 8001054:	4618      	mov	r0, r3
 8001056:	f007 fe66 	bl	8008d26 <kernel>
 800105a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800105e:	2202      	movs	r2, #2
 8001060:	2102      	movs	r1, #2
 8001062:	4618      	mov	r0, r3
 8001064:	f007 fe6f 	bl	8008d46 <stride>
 8001068:	2300      	movs	r3, #0
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001070:	cb0c      	ldmia	r3, {r2, r3}
 8001072:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001076:	c903      	ldmia	r1, {r0, r1}
 8001078:	f008 ffac 	bl	8009fd4 <MaxPool>
 800107c:	4602      	mov	r2, r0
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	4619      	mov	r1, r3
 8001082:	4610      	mov	r0, r2
 8001084:	47a0      	blx	r4
 8001086:	4603      	mov	r3, r0
 8001088:	60fb      	str	r3, [r7, #12]
	layer[4] = model.hook(Conv2D(16, kernel(5, 5), stride(1, 1), dilation(1, 1), PADDING_VALID, &conv2d_1_w, &conv2d_1_b), layer[3]);
 800108a:	4b68      	ldr	r3, [pc, #416]	; (800122c <nnom_model_create+0x294>)
 800108c:	68dc      	ldr	r4, [r3, #12]
 800108e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001092:	2205      	movs	r2, #5
 8001094:	2105      	movs	r1, #5
 8001096:	4618      	mov	r0, r3
 8001098:	f007 fe45 	bl	8008d26 <kernel>
 800109c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80010a0:	2201      	movs	r2, #1
 80010a2:	2101      	movs	r1, #1
 80010a4:	4618      	mov	r0, r3
 80010a6:	f007 fe4e 	bl	8008d46 <stride>
 80010aa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80010ae:	2201      	movs	r2, #1
 80010b0:	2101      	movs	r1, #1
 80010b2:	4618      	mov	r0, r3
 80010b4:	f007 fe57 	bl	8008d66 <dilation>
 80010b8:	4b60      	ldr	r3, [pc, #384]	; (800123c <nnom_model_create+0x2a4>)
 80010ba:	9305      	str	r3, [sp, #20]
 80010bc:	4b60      	ldr	r3, [pc, #384]	; (8001240 <nnom_model_create+0x2a8>)
 80010be:	9304      	str	r3, [sp, #16]
 80010c0:	2300      	movs	r3, #0
 80010c2:	9303      	str	r3, [sp, #12]
 80010c4:	ab01      	add	r3, sp, #4
 80010c6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80010ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010ce:	6018      	str	r0, [r3, #0]
 80010d0:	3304      	adds	r3, #4
 80010d2:	8019      	strh	r1, [r3, #0]
 80010d4:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80010d8:	f8ad 3000 	strh.w	r3, [sp]
 80010dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80010de:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80010e2:	ca06      	ldmia	r2, {r1, r2}
 80010e4:	2010      	movs	r0, #16
 80010e6:	f007 ffe7 	bl	80090b8 <Conv2D>
 80010ea:	4602      	mov	r2, r0
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4619      	mov	r1, r3
 80010f0:	4610      	mov	r0, r2
 80010f2:	47a0      	blx	r4
 80010f4:	4603      	mov	r3, r0
 80010f6:	613b      	str	r3, [r7, #16]
	layer[5] = model.active(act_relu(), layer[4]);
 80010f8:	4b4c      	ldr	r3, [pc, #304]	; (800122c <nnom_model_create+0x294>)
 80010fa:	699c      	ldr	r4, [r3, #24]
 80010fc:	f007 ff9a 	bl	8009034 <act_relu>
 8001100:	4602      	mov	r2, r0
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	4619      	mov	r1, r3
 8001106:	4610      	mov	r0, r2
 8001108:	47a0      	blx	r4
 800110a:	4603      	mov	r3, r0
 800110c:	617b      	str	r3, [r7, #20]
	layer[6] = model.hook(MaxPool(kernel(2, 2), stride(2, 2), PADDING_VALID), layer[5]);
 800110e:	4b47      	ldr	r3, [pc, #284]	; (800122c <nnom_model_create+0x294>)
 8001110:	68dc      	ldr	r4, [r3, #12]
 8001112:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001116:	2202      	movs	r2, #2
 8001118:	2102      	movs	r1, #2
 800111a:	4618      	mov	r0, r3
 800111c:	f007 fe03 	bl	8008d26 <kernel>
 8001120:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001124:	2202      	movs	r2, #2
 8001126:	2102      	movs	r1, #2
 8001128:	4618      	mov	r0, r3
 800112a:	f007 fe0c 	bl	8008d46 <stride>
 800112e:	2300      	movs	r3, #0
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001136:	cb0c      	ldmia	r3, {r2, r3}
 8001138:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800113c:	c903      	ldmia	r1, {r0, r1}
 800113e:	f008 ff49 	bl	8009fd4 <MaxPool>
 8001142:	4602      	mov	r2, r0
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	4619      	mov	r1, r3
 8001148:	4610      	mov	r0, r2
 800114a:	47a0      	blx	r4
 800114c:	4603      	mov	r3, r0
 800114e:	61bb      	str	r3, [r7, #24]
	layer[7] = model.hook(Dense(120, &dense_w, &dense_b), layer[6]);
 8001150:	4b36      	ldr	r3, [pc, #216]	; (800122c <nnom_model_create+0x294>)
 8001152:	68dc      	ldr	r4, [r3, #12]
 8001154:	4a3b      	ldr	r2, [pc, #236]	; (8001244 <nnom_model_create+0x2ac>)
 8001156:	493c      	ldr	r1, [pc, #240]	; (8001248 <nnom_model_create+0x2b0>)
 8001158:	2078      	movs	r0, #120	; 0x78
 800115a:	f008 fd3f 	bl	8009bdc <Dense>
 800115e:	4602      	mov	r2, r0
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	4619      	mov	r1, r3
 8001164:	4610      	mov	r0, r2
 8001166:	47a0      	blx	r4
 8001168:	4603      	mov	r3, r0
 800116a:	61fb      	str	r3, [r7, #28]
	layer[8] = model.active(act_relu(), layer[7]);
 800116c:	4b2f      	ldr	r3, [pc, #188]	; (800122c <nnom_model_create+0x294>)
 800116e:	699c      	ldr	r4, [r3, #24]
 8001170:	f007 ff60 	bl	8009034 <act_relu>
 8001174:	4602      	mov	r2, r0
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	4619      	mov	r1, r3
 800117a:	4610      	mov	r0, r2
 800117c:	47a0      	blx	r4
 800117e:	4603      	mov	r3, r0
 8001180:	623b      	str	r3, [r7, #32]
	layer[9] = model.hook(Dense(84, &dense_1_w, &dense_1_b), layer[8]);
 8001182:	4b2a      	ldr	r3, [pc, #168]	; (800122c <nnom_model_create+0x294>)
 8001184:	68dc      	ldr	r4, [r3, #12]
 8001186:	4a31      	ldr	r2, [pc, #196]	; (800124c <nnom_model_create+0x2b4>)
 8001188:	4931      	ldr	r1, [pc, #196]	; (8001250 <nnom_model_create+0x2b8>)
 800118a:	2054      	movs	r0, #84	; 0x54
 800118c:	f008 fd26 	bl	8009bdc <Dense>
 8001190:	4602      	mov	r2, r0
 8001192:	6a3b      	ldr	r3, [r7, #32]
 8001194:	4619      	mov	r1, r3
 8001196:	4610      	mov	r0, r2
 8001198:	47a0      	blx	r4
 800119a:	4603      	mov	r3, r0
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
	layer[10] = model.active(act_relu(), layer[9]);
 800119e:	4b23      	ldr	r3, [pc, #140]	; (800122c <nnom_model_create+0x294>)
 80011a0:	699c      	ldr	r4, [r3, #24]
 80011a2:	f007 ff47 	bl	8009034 <act_relu>
 80011a6:	4602      	mov	r2, r0
 80011a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011aa:	4619      	mov	r1, r3
 80011ac:	4610      	mov	r0, r2
 80011ae:	47a0      	blx	r4
 80011b0:	4603      	mov	r3, r0
 80011b2:	62bb      	str	r3, [r7, #40]	; 0x28
	layer[11] = model.hook(Dense(43, &dense_2_w, &dense_2_b), layer[10]);
 80011b4:	4b1d      	ldr	r3, [pc, #116]	; (800122c <nnom_model_create+0x294>)
 80011b6:	68dc      	ldr	r4, [r3, #12]
 80011b8:	4a26      	ldr	r2, [pc, #152]	; (8001254 <nnom_model_create+0x2bc>)
 80011ba:	4927      	ldr	r1, [pc, #156]	; (8001258 <nnom_model_create+0x2c0>)
 80011bc:	202b      	movs	r0, #43	; 0x2b
 80011be:	f008 fd0d 	bl	8009bdc <Dense>
 80011c2:	4602      	mov	r2, r0
 80011c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c6:	4619      	mov	r1, r3
 80011c8:	4610      	mov	r0, r2
 80011ca:	47a0      	blx	r4
 80011cc:	4603      	mov	r3, r0
 80011ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	layer[12] = model.hook(Softmax(), layer[11]);
 80011d0:	4b16      	ldr	r3, [pc, #88]	; (800122c <nnom_model_create+0x294>)
 80011d2:	68dc      	ldr	r4, [r3, #12]
 80011d4:	f009 f916 	bl	800a404 <Softmax>
 80011d8:	4602      	mov	r2, r0
 80011da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011dc:	4619      	mov	r1, r3
 80011de:	4610      	mov	r0, r2
 80011e0:	47a0      	blx	r4
 80011e2:	4603      	mov	r3, r0
 80011e4:	633b      	str	r3, [r7, #48]	; 0x30
	layer[13] = model.hook(Output(shape(43,1,1), nnom_output_data), layer[12]);
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <nnom_model_create+0x294>)
 80011e8:	68dc      	ldr	r4, [r3, #12]
 80011ea:	f107 0090 	add.w	r0, r7, #144	; 0x90
 80011ee:	2301      	movs	r3, #1
 80011f0:	2201      	movs	r2, #1
 80011f2:	212b      	movs	r1, #43	; 0x2b
 80011f4:	f007 fd79 	bl	8008cea <shape>
 80011f8:	4a18      	ldr	r2, [pc, #96]	; (800125c <nnom_model_create+0x2c4>)
 80011fa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80011fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001202:	f009 f8bb 	bl	800a37c <Output>
 8001206:	4602      	mov	r2, r0
 8001208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800120a:	4619      	mov	r1, r3
 800120c:	4610      	mov	r0, r2
 800120e:	47a0      	blx	r4
 8001210:	4603      	mov	r3, r0
 8001212:	637b      	str	r3, [r7, #52]	; 0x34
	model_compile(&model, layer[0], layer[13]);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001218:	4619      	mov	r1, r3
 800121a:	4804      	ldr	r0, [pc, #16]	; (800122c <nnom_model_create+0x294>)
 800121c:	f007 fc1a 	bl	8008a54 <model_compile>
	return &model;
 8001220:	4b02      	ldr	r3, [pc, #8]	; (800122c <nnom_model_create+0x294>)
}
 8001222:	4618      	mov	r0, r3
 8001224:	379c      	adds	r7, #156	; 0x9c
 8001226:	46bd      	mov	sp, r7
 8001228:	bd90      	pop	{r4, r7, pc}
 800122a:	bf00      	nop
 800122c:	20000e24 	.word	0x20000e24
 8001230:	200001f8 	.word	0x200001f8
 8001234:	0800f074 	.word	0x0800f074
 8001238:	0800f064 	.word	0x0800f064
 800123c:	0800f9f4 	.word	0x0800f9f4
 8001240:	0800f9dc 	.word	0x0800f9dc
 8001244:	0801b5fc 	.word	0x0801b5fc
 8001248:	0801b57c 	.word	0x0801b57c
 800124c:	0801ddc0 	.word	0x0801ddc0
 8001250:	0801dd64 	.word	0x0801dd64
 8001254:	0801ec18 	.word	0x0801ec18
 8001258:	0801ebe4 	.word	0x0801ebe4
 800125c:	20000df8 	.word	0x20000df8

08001260 <ioGetUint8>:
/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
static int ioGetUint8(uint8_t *buff, int count, uint32_t timeout)
 {
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
 	HAL_StatusTypeDef status;

 	if ((!buff) || (count <= 0))
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d002      	beq.n	8001278 <ioGetUint8+0x18>
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	2b00      	cmp	r3, #0
 8001276:	dc02      	bgt.n	800127e <ioGetUint8+0x1e>
 		return -1;
 8001278:	f04f 33ff 	mov.w	r3, #4294967295
 800127c:	e014      	b.n	80012a8 <ioGetUint8+0x48>

 	status = HAL_UART_Receive(&huart2, (uint8_t *)buff, count,
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	b29a      	uxth	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	68f9      	ldr	r1, [r7, #12]
 8001286:	480a      	ldr	r0, [pc, #40]	; (80012b0 <ioGetUint8+0x50>)
 8001288:	f005 fe04 	bl	8006e94 <HAL_UART_Receive>
 800128c:	4603      	mov	r3, r0
 800128e:	75fb      	strb	r3, [r7, #23]
 		 timeout);

 	if (status == HAL_TIMEOUT)
 8001290:	7dfb      	ldrb	r3, [r7, #23]
 8001292:	2b03      	cmp	r3, #3
 8001294:	d102      	bne.n	800129c <ioGetUint8+0x3c>
 		return -1;
 8001296:	f04f 33ff 	mov.w	r3, #4294967295
 800129a:	e005      	b.n	80012a8 <ioGetUint8+0x48>

 	return (status == HAL_OK ? count : 0);
 800129c:	7dfb      	ldrb	r3, [r7, #23]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <ioGetUint8+0x46>
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	e000      	b.n	80012a8 <ioGetUint8+0x48>
 80012a6:	2300      	movs	r3, #0
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3718      	adds	r7, #24
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000ebc 	.word	0x20000ebc

080012b4 <__io_putchar>:

int __io_putchar(int ch)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	733b      	strb	r3, [r7, #12]
 HAL_UART_Transmit(&huart2, &*c, 1, 10);
 80012c2:	f107 010c 	add.w	r1, r7, #12
 80012c6:	230a      	movs	r3, #10
 80012c8:	2201      	movs	r2, #1
 80012ca:	4804      	ldr	r0, [pc, #16]	; (80012dc <__io_putchar+0x28>)
 80012cc:	f005 fd49 	bl	8006d62 <HAL_UART_Transmit>
 return ch;
 80012d0:	687b      	ldr	r3, [r7, #4]
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000ebc 	.word	0x20000ebc

080012e0 <_write>:

int _write(int file,char *ptr, int len)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
 int DataIdx;
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
 80012f0:	e009      	b.n	8001306 <_write+0x26>
 {
 __io_putchar(*ptr++);
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	1c5a      	adds	r2, r3, #1
 80012f6:	60ba      	str	r2, [r7, #8]
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff ffda 	bl	80012b4 <__io_putchar>
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	3301      	adds	r3, #1
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	429a      	cmp	r2, r3
 800130c:	dbf1      	blt.n	80012f2 <_write+0x12>
 }
return len;
 800130e:	687b      	ldr	r3, [r7, #4]
}
 8001310:	4618      	mov	r0, r3
 8001312:	3718      	adds	r7, #24
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	f5ad 5d11 	sub.w	sp, sp, #9280	; 0x2440
 800131e:	b088      	sub	sp, #32
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001322:	f004 fd7b 	bl	8005e1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001326:	f000 f967 	bl	80015f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800132a:	f000 f9fb 	bl	8001724 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800132e:	f000 f9cf 	bl	80016d0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  nnom_model_t *model;

  model = nnom_model_create();
 8001332:	f7ff fe31 	bl	8000f98 <nnom_model_create>
 8001336:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 800133a:	f103 030c 	add.w	r3, r3, #12
 800133e:	6018      	str	r0, [r3, #0]
  unsigned char string[3072][3];
  uint32_t firsttimestamp;
  uint32_t secondtimestamp;
  uint32_t time;
  char buf[50];
  int buf_len = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	f507 5211 	add.w	r2, r7, #9280	; 0x2440
 8001346:	f102 0208 	add.w	r2, r2, #8
 800134a:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	 reception=ioGetUint8((unsigned char *) string, 3072*3, 5000);
 800134c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001350:	3b28      	subs	r3, #40	; 0x28
 8001352:	f241 3288 	movw	r2, #5000	; 0x1388
 8001356:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff ff80 	bl	8001260 <ioGetUint8>
 8001360:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 8001364:	f103 0304 	add.w	r3, r3, #4
 8001368:	6018      	str	r0, [r3, #0]
	 if (reception!=-1){
 800136a:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 800136e:	f103 0304 	add.w	r3, r3, #4
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001378:	d0e8      	beq.n	800134c <main+0x34>
		for (int i = 0; i < 3072; i++) {
 800137a:	2300      	movs	r3, #0
 800137c:	f507 5211 	add.w	r2, r7, #9280	; 0x2440
 8001380:	f102 021c 	add.w	r2, r2, #28
 8001384:	6013      	str	r3, [r2, #0]
 8001386:	e046      	b.n	8001416 <main+0xfe>
			if (string[i][0] == ' ') string[i][0] = '0';
 8001388:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800138c:	3a28      	subs	r2, #40	; 0x28
 800138e:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 8001392:	f103 031c 	add.w	r3, r3, #28
 8001396:	6819      	ldr	r1, [r3, #0]
 8001398:	460b      	mov	r3, r1
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	440b      	add	r3, r1
 800139e:	4413      	add	r3, r2
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b20      	cmp	r3, #32
 80013a4:	d10d      	bne.n	80013c2 <main+0xaa>
 80013a6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80013aa:	3a28      	subs	r2, #40	; 0x28
 80013ac:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 80013b0:	f103 031c 	add.w	r3, r3, #28
 80013b4:	6819      	ldr	r1, [r3, #0]
 80013b6:	460b      	mov	r3, r1
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	440b      	add	r3, r1
 80013bc:	4413      	add	r3, r2
 80013be:	2230      	movs	r2, #48	; 0x30
 80013c0:	701a      	strb	r2, [r3, #0]
			if (string[i][1] == ' ') string[i][1] = '0';
 80013c2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80013c6:	3a28      	subs	r2, #40	; 0x28
 80013c8:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 80013cc:	f103 031c 	add.w	r3, r3, #28
 80013d0:	6819      	ldr	r1, [r3, #0]
 80013d2:	460b      	mov	r3, r1
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	440b      	add	r3, r1
 80013d8:	4413      	add	r3, r2
 80013da:	3301      	adds	r3, #1
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b20      	cmp	r3, #32
 80013e0:	d10e      	bne.n	8001400 <main+0xe8>
 80013e2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80013e6:	3a28      	subs	r2, #40	; 0x28
 80013e8:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 80013ec:	f103 031c 	add.w	r3, r3, #28
 80013f0:	6819      	ldr	r1, [r3, #0]
 80013f2:	460b      	mov	r3, r1
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	440b      	add	r3, r1
 80013f8:	4413      	add	r3, r2
 80013fa:	3301      	adds	r3, #1
 80013fc:	2230      	movs	r2, #48	; 0x30
 80013fe:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 3072; i++) {
 8001400:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 8001404:	f103 031c 	add.w	r3, r3, #28
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	3301      	adds	r3, #1
 800140c:	f507 5211 	add.w	r2, r7, #9280	; 0x2440
 8001410:	f102 021c 	add.w	r2, r2, #28
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 800141a:	f103 031c 	add.w	r3, r3, #28
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001424:	dbb0      	blt.n	8001388 <main+0x70>
		}
		for (int i = 0; i < 3072; i++) {
 8001426:	2300      	movs	r3, #0
 8001428:	f507 5211 	add.w	r2, r7, #9280	; 0x2440
 800142c:	f102 0218 	add.w	r2, r2, #24
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	e052      	b.n	80014da <main+0x1c2>
			nnom_input_data[i] = (100*(int8_t)(string[i][0] - 0x30) + 10*(int8_t)(string[i][1] - 0x30) + (int8_t)(string[i][2] - 0x30));
 8001434:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001438:	3a28      	subs	r2, #40	; 0x28
 800143a:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 800143e:	f103 0318 	add.w	r3, r3, #24
 8001442:	6819      	ldr	r1, [r3, #0]
 8001444:	460b      	mov	r3, r1
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	440b      	add	r3, r1
 800144a:	4413      	add	r3, r2
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	461a      	mov	r2, r3
 8001450:	0092      	lsls	r2, r2, #2
 8001452:	4413      	add	r3, r2
 8001454:	461a      	mov	r2, r3
 8001456:	0091      	lsls	r1, r2, #2
 8001458:	461a      	mov	r2, r3
 800145a:	460b      	mov	r3, r1
 800145c:	4413      	add	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	b2d8      	uxtb	r0, r3
 8001462:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001466:	3a28      	subs	r2, #40	; 0x28
 8001468:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 800146c:	f103 0318 	add.w	r3, r3, #24
 8001470:	6819      	ldr	r1, [r3, #0]
 8001472:	460b      	mov	r3, r1
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	440b      	add	r3, r1
 8001478:	4413      	add	r3, r2
 800147a:	3301      	adds	r3, #1
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	461a      	mov	r2, r3
 8001480:	0092      	lsls	r2, r2, #2
 8001482:	4413      	add	r3, r2
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	b2db      	uxtb	r3, r3
 8001488:	4403      	add	r3, r0
 800148a:	b2d8      	uxtb	r0, r3
 800148c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001490:	3a28      	subs	r2, #40	; 0x28
 8001492:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 8001496:	f103 0318 	add.w	r3, r3, #24
 800149a:	6819      	ldr	r1, [r3, #0]
 800149c:	460b      	mov	r3, r1
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	440b      	add	r3, r1
 80014a2:	4413      	add	r3, r2
 80014a4:	3302      	adds	r3, #2
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	4403      	add	r3, r0
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	3330      	adds	r3, #48	; 0x30
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	b259      	sxtb	r1, r3
 80014b2:	4a4d      	ldr	r2, [pc, #308]	; (80015e8 <main+0x2d0>)
 80014b4:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 80014b8:	f103 0318 	add.w	r3, r3, #24
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4413      	add	r3, r2
 80014c0:	460a      	mov	r2, r1
 80014c2:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 3072; i++) {
 80014c4:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 80014c8:	f103 0318 	add.w	r3, r3, #24
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	3301      	adds	r3, #1
 80014d0:	f507 5211 	add.w	r2, r7, #9280	; 0x2440
 80014d4:	f102 0218 	add.w	r2, r2, #24
 80014d8:	6013      	str	r3, [r2, #0]
 80014da:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 80014de:	f103 0318 	add.w	r3, r3, #24
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80014e8:	dba4      	blt.n	8001434 <main+0x11c>
		}

		firsttimestamp =HAL_GetTick();
 80014ea:	f004 fcfd 	bl	8005ee8 <HAL_GetTick>
 80014ee:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 80014f2:	6018      	str	r0, [r3, #0]
		model_run(model);
 80014f4:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 80014f8:	f103 030c 	add.w	r3, r3, #12
 80014fc:	6818      	ldr	r0, [r3, #0]
 80014fe:	f007 fbe7 	bl	8008cd0 <model_run>
		secondtimestamp= HAL_GetTick();
 8001502:	f004 fcf1 	bl	8005ee8 <HAL_GetTick>
 8001506:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 800150a:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800150e:	6018      	str	r0, [r3, #0]
		time=secondtimestamp - firsttimestamp;
 8001510:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 8001514:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 8001526:	f102 0238 	add.w	r2, r2, #56	; 0x38
 800152a:	6013      	str	r3, [r2, #0]
		unsigned char recognized_class;
		recognized_class = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	f507 5211 	add.w	r2, r7, #9280	; 0x2440
 8001532:	f102 0217 	add.w	r2, r2, #23
 8001536:	7013      	strb	r3, [r2, #0]
		for (int i = 0; i < 43; i++){
 8001538:	2300      	movs	r3, #0
 800153a:	f507 5211 	add.w	r2, r7, #9280	; 0x2440
 800153e:	f102 0210 	add.w	r2, r2, #16
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	e026      	b.n	8001594 <main+0x27c>
			if (nnom_output_data[i] > nnom_output_data[recognized_class]){
 8001546:	4a29      	ldr	r2, [pc, #164]	; (80015ec <main+0x2d4>)
 8001548:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 800154c:	f103 0310 	add.w	r3, r3, #16
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4413      	add	r3, r2
 8001554:	f993 2000 	ldrsb.w	r2, [r3]
 8001558:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 800155c:	f103 0317 	add.w	r3, r3, #23
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	4922      	ldr	r1, [pc, #136]	; (80015ec <main+0x2d4>)
 8001564:	56cb      	ldrsb	r3, [r1, r3]
 8001566:	429a      	cmp	r2, r3
 8001568:	dd09      	ble.n	800157e <main+0x266>
				recognized_class = i;
 800156a:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 800156e:	f103 0310 	add.w	r3, r3, #16
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f507 5211 	add.w	r2, r7, #9280	; 0x2440
 8001578:	f102 0217 	add.w	r2, r2, #23
 800157c:	7013      	strb	r3, [r2, #0]
		for (int i = 0; i < 43; i++){
 800157e:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 8001582:	f103 0310 	add.w	r3, r3, #16
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	3301      	adds	r3, #1
 800158a:	f507 5211 	add.w	r2, r7, #9280	; 0x2440
 800158e:	f102 0210 	add.w	r2, r2, #16
 8001592:	6013      	str	r3, [r2, #0]
 8001594:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 8001598:	f103 0310 	add.w	r3, r3, #16
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2b2a      	cmp	r3, #42	; 0x2a
 80015a0:	ddd1      	ble.n	8001546 <main+0x22e>
			}
		}
		// Print output of neural network along with inference time (microseconds)
		buf_len = sprintf(buf,"Output: %d, Duration: %lu\r\n",recognized_class,time);
 80015a2:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 80015a6:	f103 0317 	add.w	r3, r3, #23
 80015aa:	781a      	ldrb	r2, [r3, #0]
 80015ac:	f107 0020 	add.w	r0, r7, #32
 80015b0:	381c      	subs	r0, #28
 80015b2:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 80015b6:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	490c      	ldr	r1, [pc, #48]	; (80015f0 <main+0x2d8>)
 80015be:	f009 ff95 	bl	800b4ec <siprintf>
 80015c2:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 80015c6:	f103 0308 	add.w	r3, r3, #8
 80015ca:	6018      	str	r0, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 80015cc:	f507 5311 	add.w	r3, r7, #9280	; 0x2440
 80015d0:	f103 0308 	add.w	r3, r3, #8
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	f107 0120 	add.w	r1, r7, #32
 80015dc:	391c      	subs	r1, #28
 80015de:	2364      	movs	r3, #100	; 0x64
 80015e0:	4804      	ldr	r0, [pc, #16]	; (80015f4 <main+0x2dc>)
 80015e2:	f005 fbbe 	bl	8006d62 <HAL_UART_Transmit>
	 reception=ioGetUint8((unsigned char *) string, 3072*3, 5000);
 80015e6:	e6b1      	b.n	800134c <main+0x34>
 80015e8:	200001f8 	.word	0x200001f8
 80015ec:	20000df8 	.word	0x20000df8
 80015f0:	0800eaa8 	.word	0x0800eaa8
 80015f4:	20000ebc 	.word	0x20000ebc

080015f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b094      	sub	sp, #80	; 0x50
 80015fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015fe:	f107 0320 	add.w	r3, r7, #32
 8001602:	2230      	movs	r2, #48	; 0x30
 8001604:	2100      	movs	r1, #0
 8001606:	4618      	mov	r0, r3
 8001608:	f008 ffdc 	bl	800a5c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800160c:	f107 030c 	add.w	r3, r7, #12
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800161c:	2300      	movs	r3, #0
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	4b29      	ldr	r3, [pc, #164]	; (80016c8 <SystemClock_Config+0xd0>)
 8001622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001624:	4a28      	ldr	r2, [pc, #160]	; (80016c8 <SystemClock_Config+0xd0>)
 8001626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800162a:	6413      	str	r3, [r2, #64]	; 0x40
 800162c:	4b26      	ldr	r3, [pc, #152]	; (80016c8 <SystemClock_Config+0xd0>)
 800162e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001638:	2300      	movs	r3, #0
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	4b23      	ldr	r3, [pc, #140]	; (80016cc <SystemClock_Config+0xd4>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001644:	4a21      	ldr	r2, [pc, #132]	; (80016cc <SystemClock_Config+0xd4>)
 8001646:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	4b1f      	ldr	r3, [pc, #124]	; (80016cc <SystemClock_Config+0xd4>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001654:	607b      	str	r3, [r7, #4]
 8001656:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001658:	2302      	movs	r3, #2
 800165a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800165c:	2301      	movs	r3, #1
 800165e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001660:	2310      	movs	r3, #16
 8001662:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001664:	2302      	movs	r3, #2
 8001666:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001668:	2300      	movs	r3, #0
 800166a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800166c:	2310      	movs	r3, #16
 800166e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001670:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001674:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001676:	2304      	movs	r3, #4
 8001678:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800167a:	2307      	movs	r3, #7
 800167c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800167e:	f107 0320 	add.w	r3, r7, #32
 8001682:	4618      	mov	r0, r3
 8001684:	f004 febe 	bl	8006404 <HAL_RCC_OscConfig>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800168e:	f000 f8b9 	bl	8001804 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001692:	230f      	movs	r3, #15
 8001694:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001696:	2302      	movs	r3, #2
 8001698:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800169e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016a8:	f107 030c 	add.w	r3, r7, #12
 80016ac:	2102      	movs	r1, #2
 80016ae:	4618      	mov	r0, r3
 80016b0:	f005 f918 	bl	80068e4 <HAL_RCC_ClockConfig>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80016ba:	f000 f8a3 	bl	8001804 <Error_Handler>
  }
}
 80016be:	bf00      	nop
 80016c0:	3750      	adds	r7, #80	; 0x50
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40007000 	.word	0x40007000

080016d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <MX_USART2_UART_Init+0x4c>)
 80016d6:	4a12      	ldr	r2, [pc, #72]	; (8001720 <MX_USART2_UART_Init+0x50>)
 80016d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <MX_USART2_UART_Init+0x4c>)
 80016dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016e2:	4b0e      	ldr	r3, [pc, #56]	; (800171c <MX_USART2_UART_Init+0x4c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016e8:	4b0c      	ldr	r3, [pc, #48]	; (800171c <MX_USART2_UART_Init+0x4c>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016ee:	4b0b      	ldr	r3, [pc, #44]	; (800171c <MX_USART2_UART_Init+0x4c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016f4:	4b09      	ldr	r3, [pc, #36]	; (800171c <MX_USART2_UART_Init+0x4c>)
 80016f6:	220c      	movs	r2, #12
 80016f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016fa:	4b08      	ldr	r3, [pc, #32]	; (800171c <MX_USART2_UART_Init+0x4c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001700:	4b06      	ldr	r3, [pc, #24]	; (800171c <MX_USART2_UART_Init+0x4c>)
 8001702:	2200      	movs	r2, #0
 8001704:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001706:	4805      	ldr	r0, [pc, #20]	; (800171c <MX_USART2_UART_Init+0x4c>)
 8001708:	f005 fade 	bl	8006cc8 <HAL_UART_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001712:	f000 f877 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000ebc 	.word	0x20000ebc
 8001720:	40004400 	.word	0x40004400

08001724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08a      	sub	sp, #40	; 0x28
 8001728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
 8001738:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	4b2d      	ldr	r3, [pc, #180]	; (80017f4 <MX_GPIO_Init+0xd0>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a2c      	ldr	r2, [pc, #176]	; (80017f4 <MX_GPIO_Init+0xd0>)
 8001744:	f043 0304 	orr.w	r3, r3, #4
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b2a      	ldr	r3, [pc, #168]	; (80017f4 <MX_GPIO_Init+0xd0>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0304 	and.w	r3, r3, #4
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	4b26      	ldr	r3, [pc, #152]	; (80017f4 <MX_GPIO_Init+0xd0>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a25      	ldr	r2, [pc, #148]	; (80017f4 <MX_GPIO_Init+0xd0>)
 8001760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b23      	ldr	r3, [pc, #140]	; (80017f4 <MX_GPIO_Init+0xd0>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	4b1f      	ldr	r3, [pc, #124]	; (80017f4 <MX_GPIO_Init+0xd0>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a1e      	ldr	r2, [pc, #120]	; (80017f4 <MX_GPIO_Init+0xd0>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <MX_GPIO_Init+0xd0>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	607b      	str	r3, [r7, #4]
 8001792:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <MX_GPIO_Init+0xd0>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a17      	ldr	r2, [pc, #92]	; (80017f4 <MX_GPIO_Init+0xd0>)
 8001798:	f043 0302 	orr.w	r3, r3, #2
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <MX_GPIO_Init+0xd0>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2120      	movs	r1, #32
 80017ae:	4812      	ldr	r0, [pc, #72]	; (80017f8 <MX_GPIO_Init+0xd4>)
 80017b0:	f004 fe0e 	bl	80063d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017ba:	4b10      	ldr	r3, [pc, #64]	; (80017fc <MX_GPIO_Init+0xd8>)
 80017bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017c2:	f107 0314 	add.w	r3, r7, #20
 80017c6:	4619      	mov	r1, r3
 80017c8:	480d      	ldr	r0, [pc, #52]	; (8001800 <MX_GPIO_Init+0xdc>)
 80017ca:	f004 fc7f 	bl	80060cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80017ce:	2320      	movs	r3, #32
 80017d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d2:	2301      	movs	r3, #1
 80017d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017da:	2300      	movs	r3, #0
 80017dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017de:	f107 0314 	add.w	r3, r7, #20
 80017e2:	4619      	mov	r1, r3
 80017e4:	4804      	ldr	r0, [pc, #16]	; (80017f8 <MX_GPIO_Init+0xd4>)
 80017e6:	f004 fc71 	bl	80060cc <HAL_GPIO_Init>

}
 80017ea:	bf00      	nop
 80017ec:	3728      	adds	r7, #40	; 0x28
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40020000 	.word	0x40020000
 80017fc:	10210000 	.word	0x10210000
 8001800:	40020800 	.word	0x40020800

08001804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
	...

08001814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <HAL_MspInit+0x4c>)
 8001820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001822:	4a0f      	ldr	r2, [pc, #60]	; (8001860 <HAL_MspInit+0x4c>)
 8001824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001828:	6453      	str	r3, [r2, #68]	; 0x44
 800182a:	4b0d      	ldr	r3, [pc, #52]	; (8001860 <HAL_MspInit+0x4c>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	603b      	str	r3, [r7, #0]
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <HAL_MspInit+0x4c>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	4a08      	ldr	r2, [pc, #32]	; (8001860 <HAL_MspInit+0x4c>)
 8001840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001844:	6413      	str	r3, [r2, #64]	; 0x40
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_MspInit+0x4c>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184e:	603b      	str	r3, [r7, #0]
 8001850:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001852:	2007      	movs	r0, #7
 8001854:	f004 fc06 	bl	8006064 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40023800 	.word	0x40023800

08001864 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08a      	sub	sp, #40	; 0x28
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a19      	ldr	r2, [pc, #100]	; (80018e8 <HAL_UART_MspInit+0x84>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d12b      	bne.n	80018de <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	4b18      	ldr	r3, [pc, #96]	; (80018ec <HAL_UART_MspInit+0x88>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	4a17      	ldr	r2, [pc, #92]	; (80018ec <HAL_UART_MspInit+0x88>)
 8001890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001894:	6413      	str	r3, [r2, #64]	; 0x40
 8001896:	4b15      	ldr	r3, [pc, #84]	; (80018ec <HAL_UART_MspInit+0x88>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	4b11      	ldr	r3, [pc, #68]	; (80018ec <HAL_UART_MspInit+0x88>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	4a10      	ldr	r2, [pc, #64]	; (80018ec <HAL_UART_MspInit+0x88>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <HAL_UART_MspInit+0x88>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018be:	230c      	movs	r3, #12
 80018c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c2:	2302      	movs	r3, #2
 80018c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ca:	2300      	movs	r3, #0
 80018cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018ce:	2307      	movs	r3, #7
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d2:	f107 0314 	add.w	r3, r7, #20
 80018d6:	4619      	mov	r1, r3
 80018d8:	4805      	ldr	r0, [pc, #20]	; (80018f0 <HAL_UART_MspInit+0x8c>)
 80018da:	f004 fbf7 	bl	80060cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018de:	bf00      	nop
 80018e0:	3728      	adds	r7, #40	; 0x28
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40004400 	.word	0x40004400
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40020000 	.word	0x40020000

080018f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001906:	e7fe      	b.n	8001906 <HardFault_Handler+0x4>

08001908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800190c:	e7fe      	b.n	800190c <MemManage_Handler+0x4>

0800190e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001912:	e7fe      	b.n	8001912 <BusFault_Handler+0x4>

08001914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001918:	e7fe      	b.n	8001918 <UsageFault_Handler+0x4>

0800191a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001948:	f004 faba 	bl	8005ec0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}

08001950 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	e00a      	b.n	8001978 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001962:	f3af 8000 	nop.w
 8001966:	4601      	mov	r1, r0
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	1c5a      	adds	r2, r3, #1
 800196c:	60ba      	str	r2, [r7, #8]
 800196e:	b2ca      	uxtb	r2, r1
 8001970:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	3301      	adds	r3, #1
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	429a      	cmp	r2, r3
 800197e:	dbf0      	blt.n	8001962 <_read+0x12>
	}

return len;
 8001980:	687b      	ldr	r3, [r7, #4]
}
 8001982:	4618      	mov	r0, r3
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <_close>:
	}
	return len;
}

int _close(int file)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
	return -1;
 8001992:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001996:	4618      	mov	r0, r3
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
 80019aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019b2:	605a      	str	r2, [r3, #4]
	return 0;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <_isatty>:

int _isatty(int file)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
	return 1;
 80019ca:	2301      	movs	r3, #1
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
	return 0;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
	...

080019f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019fc:	4a14      	ldr	r2, [pc, #80]	; (8001a50 <_sbrk+0x5c>)
 80019fe:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <_sbrk+0x60>)
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a08:	4b13      	ldr	r3, [pc, #76]	; (8001a58 <_sbrk+0x64>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d102      	bne.n	8001a16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a10:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <_sbrk+0x64>)
 8001a12:	4a12      	ldr	r2, [pc, #72]	; (8001a5c <_sbrk+0x68>)
 8001a14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a16:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <_sbrk+0x64>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d207      	bcs.n	8001a34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a24:	f008 fd78 	bl	800a518 <__errno>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	230c      	movs	r3, #12
 8001a2c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a32:	e009      	b.n	8001a48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a34:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <_sbrk+0x64>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a3a:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <_sbrk+0x64>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4413      	add	r3, r2
 8001a42:	4a05      	ldr	r2, [pc, #20]	; (8001a58 <_sbrk+0x64>)
 8001a44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a46:	68fb      	ldr	r3, [r7, #12]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20018000 	.word	0x20018000
 8001a54:	00000400 	.word	0x00000400
 8001a58:	20000eac 	.word	0x20000eac
 8001a5c:	20000f08 	.word	0x20000f08

08001a60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a64:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <SystemInit+0x28>)
 8001a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a6a:	4a07      	ldr	r2, [pc, #28]	; (8001a88 <SystemInit+0x28>)
 8001a6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a74:	4b04      	ldr	r3, [pc, #16]	; (8001a88 <SystemInit+0x28>)
 8001a76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a7a:	609a      	str	r2, [r3, #8]
#endif
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ac4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a90:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a92:	e003      	b.n	8001a9c <LoopCopyDataInit>

08001a94 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a94:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a96:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a98:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a9a:	3104      	adds	r1, #4

08001a9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a9c:	480b      	ldr	r0, [pc, #44]	; (8001acc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001aa0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001aa2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001aa4:	d3f6      	bcc.n	8001a94 <CopyDataInit>
  ldr  r2, =_sbss
 8001aa6:	4a0b      	ldr	r2, [pc, #44]	; (8001ad4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001aa8:	e002      	b.n	8001ab0 <LoopFillZerobss>

08001aaa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001aaa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001aac:	f842 3b04 	str.w	r3, [r2], #4

08001ab0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ab0:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ab2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ab4:	d3f9      	bcc.n	8001aaa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ab6:	f7ff ffd3 	bl	8001a60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aba:	f008 fd33 	bl	800a524 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001abe:	f7ff fc2b 	bl	8001318 <main>
  bx  lr    
 8001ac2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ac4:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001ac8:	0801f100 	.word	0x0801f100
  ldr  r0, =_sdata
 8001acc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ad0:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8001ad4:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8001ad8:	20000f04 	.word	0x20000f04

08001adc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001adc:	e7fe      	b.n	8001adc <ADC_IRQHandler>

08001ade <arm_relu_q7>:
   * Optimized relu with QSUB instructions.
   *
   */

void arm_relu_q7(q7_t * data, uint16_t size)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b08f      	sub	sp, #60	; 0x3c
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	807b      	strh	r3, [r7, #2]

#if defined (ARM_MATH_DSP)
    /* Run the following code for Cortex-M4 and Cortex-M7 */

    uint16_t  i = size >> 2;
 8001aea:	887b      	ldrh	r3, [r7, #2]
 8001aec:	089b      	lsrs	r3, r3, #2
 8001aee:	86fb      	strh	r3, [r7, #54]	; 0x36
    q7_t     *pIn = data;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	613b      	str	r3, [r7, #16]
    q7_t     *pOut = data;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	60fb      	str	r3, [r7, #12]
    q31_t     in;
    q31_t     buf;
    q31_t     mask;

    while (i)
 8001af8:	e032      	b.n	8001b60 <arm_relu_q7+0x82>
    {
        in = *__SIMD32(pIn)++;
 8001afa:	f107 0210 	add.w	r2, r7, #16
 8001afe:	6813      	ldr	r3, [r2, #0]
 8001b00:	1d19      	adds	r1, r3, #4
 8001b02:	6011      	str	r1, [r2, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	633b      	str	r3, [r7, #48]	; 0x30

        /* extract the first bit */
        buf = __ROR(in & 0x80808080, 7);
 8001b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b0a:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
 8001b0e:	61bb      	str	r3, [r7, #24]
 8001b10:	2307      	movs	r3, #7
 8001b12:	617b      	str	r3, [r7, #20]
  \param [in]    op2  Number of Bits to rotate
  \return               Rotated value
 */
__STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
{
  op2 %= 32U;
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f003 031f 	and.w	r3, r3, #31
 8001b1a:	617b      	str	r3, [r7, #20]
  if (op2 == 0U)
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <arm_relu_q7+0x48>
  {
    return op1;
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	e003      	b.n	8001b2e <arm_relu_q7+0x50>
  }
  return (op1 >> op2) | (op1 << (32U - op2));
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	fa62 f303 	ror.w	r3, r2, r3
 8001b2e:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* if MSB=1, mask will be 0xFF, 0x0 otherwise */
        mask = __QSUB8(0x00000000, buf);
 8001b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b32:	2200      	movs	r2, #0
 8001b34:	627a      	str	r2, [r7, #36]	; 0x24
 8001b36:	623b      	str	r3, [r7, #32]

__STATIC_FORCEINLINE uint32_t __QSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3a:	6a3a      	ldr	r2, [r7, #32]
 8001b3c:	fac3 f312 	qsub8	r3, r3, r2
 8001b40:	61fb      	str	r3, [r7, #28]
  return(result);
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	62bb      	str	r3, [r7, #40]	; 0x28

        *__SIMD32(pOut)++ = in & (~mask);
 8001b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b48:	43d9      	mvns	r1, r3
 8001b4a:	f107 020c 	add.w	r2, r7, #12
 8001b4e:	6813      	ldr	r3, [r2, #0]
 8001b50:	1d18      	adds	r0, r3, #4
 8001b52:	6010      	str	r0, [r2, #0]
 8001b54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b56:	400a      	ands	r2, r1
 8001b58:	601a      	str	r2, [r3, #0]
        i--;
 8001b5a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	86fb      	strh	r3, [r7, #54]	; 0x36
    while (i)
 8001b60:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1c9      	bne.n	8001afa <arm_relu_q7+0x1c>
    }

    i = size & 0x3;
 8001b66:	887b      	ldrh	r3, [r7, #2]
 8001b68:	f003 0303 	and.w	r3, r3, #3
 8001b6c:	86fb      	strh	r3, [r7, #54]	; 0x36
    while (i)
 8001b6e:	e00d      	b.n	8001b8c <arm_relu_q7+0xae>
    {
        if (*pIn < 0)
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	f993 3000 	ldrsb.w	r3, [r3]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	da02      	bge.n	8001b80 <arm_relu_q7+0xa2>
        {
            *pIn = 0;
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]
        }
        pIn++;
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	3301      	adds	r3, #1
 8001b84:	613b      	str	r3, [r7, #16]
        i--;
 8001b86:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	86fb      	strh	r3, [r7, #54]	; 0x36
    while (i)
 8001b8c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1ee      	bne.n	8001b70 <arm_relu_q7+0x92>
            data[i] = 0;
    }

#endif                          /* ARM_MATH_DSP */

}
 8001b92:	bf00      	nop
 8001b94:	373c      	adds	r7, #60	; 0x3c
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <arm_convolve_1x1_HWC_q7_fast_nonsquare>:
                                                  q7_t * Im_out,
                                                  const uint16_t dim_im_out_x,
                                                  const uint16_t dim_im_out_y, 
                                                  q15_t * bufferA, 
                                                  q7_t * bufferB)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b0aa      	sub	sp, #168	; 0xa8
 8001ba2:	af04      	add	r7, sp, #16
 8001ba4:	60f8      	str	r0, [r7, #12]
 8001ba6:	4608      	mov	r0, r1
 8001ba8:	4611      	mov	r1, r2
 8001baa:	461a      	mov	r2, r3
 8001bac:	4603      	mov	r3, r0
 8001bae:	817b      	strh	r3, [r7, #10]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	813b      	strh	r3, [r7, #8]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	80fb      	strh	r3, [r7, #6]
    /* -----------------------
     *  Here we use bufferA as q15_t internally as computation are done with q15_t level
     *  im2col are done to output in q15_t format from q7_t input
     */

    q15_t    *pBuffer = bufferA;
 8001bb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001bbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    q7_t     *pOut = Im_out;
 8001bc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001bc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    if (ch_im_in % 4 != 0 || ch_im_out % 2 != 0 || dim_kernel_x != 1 || dim_kernel_y != 1
 8001bc8:	88fb      	ldrh	r3, [r7, #6]
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d11e      	bne.n	8001c12 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 8001bd4:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d117      	bne.n	8001c12 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 8001be2:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d113      	bne.n	8001c12 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 8001bea:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d10f      	bne.n	8001c12 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
        || padding_x != 0 || padding_y != 0 || stride_x != 1 || stride_y != 1)
 8001bf2:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10b      	bne.n	8001c12 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 8001bfa:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d107      	bne.n	8001c12 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 8001c02:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d103      	bne.n	8001c12 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 8001c0a:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d002      	beq.n	8001c18 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x7a>
    {
        /* check if the input dimension meets the constraints */
        return ARM_MATH_SIZE_MISMATCH;
 8001c12:	f06f 0302 	mvn.w	r3, #2
 8001c16:	e163      	b.n	8001ee0 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x342>
    }

    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8001c1e:	e060      	b.n	8001ce2 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x144>
    {
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 8001c20:	2300      	movs	r3, #0
 8001c22:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8001c26:	e04f      	b.n	8001cc8 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x12a>
        {
            /* This part implements the im2col function */
            arm_q7_to_q15_reordered_no_shift((q7_t *) Im_in + (i_out_y * dim_im_in_x + i_out_x) * ch_im_in, pBuffer,
 8001c28:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8001c2c:	897a      	ldrh	r2, [r7, #10]
 8001c2e:	fb02 f203 	mul.w	r2, r2, r3
 8001c32:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8001c36:	4413      	add	r3, r2
 8001c38:	88fa      	ldrh	r2, [r7, #6]
 8001c3a:	fb02 f303 	mul.w	r3, r2, r3
 8001c3e:	461a      	mov	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4413      	add	r3, r2
 8001c44:	88fa      	ldrh	r2, [r7, #6]
 8001c46:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f003 fefa 	bl	8005a44 <arm_q7_to_q15_reordered_no_shift>
                                             ch_im_in);
            pBuffer += ch_im_in;
 8001c50:	88fb      	ldrh	r3, [r7, #6]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001c58:	4413      	add	r3, r2
 8001c5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel_x * dim_kernel_y)
 8001c5e:	88fb      	ldrh	r3, [r7, #6]
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 8001c66:	fb02 f303 	mul.w	r3, r2, r3
 8001c6a:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8001c6e:	fb02 f303 	mul.w	r3, r2, r3
 8001c72:	461a      	mov	r2, r3
 8001c74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001c78:	4413      	add	r3, r2
 8001c7a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d11b      	bne.n	8001cba <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x11c>
            {
                pOut =
 8001c82:	88f9      	ldrh	r1, [r7, #6]
 8001c84:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8001c88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c8c:	9303      	str	r3, [sp, #12]
 8001c8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c92:	9302      	str	r3, [sp, #8]
 8001c94:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8001c98:	9301      	str	r3, [sp, #4]
 8001c9a:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8001ca6:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8001caa:	f002 fe98 	bl	80049de <arm_nn_mat_mult_kernel_q7_q15_reordered>
 8001cae:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                    arm_nn_mat_mult_kernel_q7_q15_reordered(wt, bufferA, ch_im_out, ch_im_in, bias_shift, out_shift, bias, pOut);
                /* counter reset */
                pBuffer = bufferA;
 8001cb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001cb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 8001cba:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8001cc8:	f9b7 2094 	ldrsh.w	r2, [r7, #148]	; 0x94
 8001ccc:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	dba9      	blt.n	8001c28 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x8a>
    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 8001cd4:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	3301      	adds	r3, #1
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8001ce2:	f9b7 2096 	ldrsh.w	r2, [r7, #150]	; 0x96
 8001ce6:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8001cea:	429a      	cmp	r2, r3
 8001cec:	db98      	blt.n	8001c20 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x82>
            }
        }
    }

    /* check if there is left-over for compute */
    if (pBuffer != bufferA)
 8001cee:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001cf2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	f000 80f1 	beq.w	8001ede <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x340>
    {
        const q7_t *pA = wt;
 8001cfc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        for (i_ch_out = 0; i_ch_out < ch_im_out; i_ch_out++)
 8001d04:	2300      	movs	r3, #0
 8001d06:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8001d0a:	e0e1      	b.n	8001ed0 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x332>
        {
            q31_t     sum = ((q31_t)(bias[i_ch_out]) << bias_shift) + NN_ROUND(out_shift);
 8001d0c:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8001d10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001d14:	4413      	add	r3, r2
 8001d16:	f993 3000 	ldrsb.w	r3, [r3]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8001d20:	409a      	lsls	r2, r3
 8001d22:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8001d26:	3b01      	subs	r3, #1
 8001d28:	2101      	movs	r1, #1
 8001d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2e:	4413      	add	r3, r2
 8001d30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            q15_t    *pB = bufferA;
 8001d34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d38:	623b      	str	r3, [r7, #32]
            /* basically each time it process 4 entries */
            uint16_t  colCnt = ch_im_in * dim_kernel_x * dim_kernel_y >> 2;
 8001d3a:	88fb      	ldrh	r3, [r7, #6]
 8001d3c:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 8001d40:	fb02 f303 	mul.w	r3, r2, r3
 8001d44:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8001d48:	fb02 f303 	mul.w	r3, r2, r3
 8001d4c:	109b      	asrs	r3, r3, #2
 8001d4e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

            while (colCnt)
 8001d52:	e06b      	b.n	8001e2c <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x28e>
 8001d54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d58:	617b      	str	r3, [r7, #20]
 8001d5a:	f107 031c 	add.w	r3, r7, #28
 8001d5e:	647b      	str	r3, [r7, #68]	; 0x44
 8001d60:	f107 0318 	add.w	r3, r7, #24
 8001d64:	643b      	str	r3, [r7, #64]	; 0x40
 * @brief read and expand one Q7 word into two Q15 words with reordering
 */

__STATIC_FORCEINLINE void *read_and_pad_reordered(void *source, q31_t * out1, q31_t * out2)
{
        q31_t     inA = *__SIMD32(source)++;
 8001d66:	f107 0214 	add.w	r2, r7, #20
 8001d6a:	6813      	ldr	r3, [r2, #0]
 8001d6c:	1d19      	adds	r1, r3, #4
 8001d6e:	6011      	str	r1, [r2, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	63fb      	str	r3, [r7, #60]	; 0x3c
#ifndef ARM_MATH_BIG_ENDIAN
        *out2 = __SXTB16(__ROR(inA, 8));
 8001d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d76:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d78:	2308      	movs	r3, #8
 8001d7a:	637b      	str	r3, [r7, #52]	; 0x34
  op2 %= 32U;
 8001d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d7e:	f003 031f 	and.w	r3, r3, #31
 8001d82:	637b      	str	r3, [r7, #52]	; 0x34
  if (op2 == 0U)
 8001d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x1f0>
    return op1;
 8001d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d8c:	e003      	b.n	8001d96 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x1f8>
  return (op1 >> op2) | (op1 << (32U - op2));
 8001d8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d92:	fa62 f303 	ror.w	r3, r2, r3
 8001d96:	633b      	str	r3, [r7, #48]	; 0x30

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d9a:	fa2f f383 	sxtb16	r3, r3
 8001d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8001da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da2:	461a      	mov	r2, r3
 8001da4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001da6:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 8001da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001daa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dae:	fa2f f383 	sxtb16	r3, r3
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db6:	461a      	mov	r2, r3
 8001db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dba:	601a      	str	r2, [r3, #0]
#else
        *out1 = __SXTB16(__ROR(inA, 8));
        *out2 = __SXTB16(inA);
#endif

        return source;
 8001dbc:	697b      	ldr	r3, [r7, #20]
            {

                q31_t     inA1, inA2;
                q31_t     inB1, inB2;

                pA = (const q7_t *)read_and_pad_reordered((void *)pA, &inA1, &inA2);
 8001dbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                inB1 = *__SIMD32(pB)++;
 8001dc2:	f107 0220 	add.w	r2, r7, #32
 8001dc6:	6813      	ldr	r3, [r2, #0]
 8001dc8:	1d19      	adds	r1, r3, #4
 8001dca:	6011      	str	r1, [r2, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	66fb      	str	r3, [r7, #108]	; 0x6c
                sum = __SMLAD(inA1, inB1, sum);
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001dd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001dda:	6579      	str	r1, [r7, #84]	; 0x54
 8001ddc:	653a      	str	r2, [r7, #80]	; 0x50
 8001dde:	64fb      	str	r3, [r7, #76]	; 0x4c

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001de0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001de2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001de4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001de6:	fb23 1302 	smlad	r3, r3, r2, r1
 8001dea:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8001dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                inB2 = *__SIMD32(pB)++;
 8001df2:	f107 0220 	add.w	r2, r7, #32
 8001df6:	6813      	ldr	r3, [r2, #0]
 8001df8:	1d19      	adds	r1, r3, #4
 8001dfa:	6011      	str	r1, [r2, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	66bb      	str	r3, [r7, #104]	; 0x68
                sum = __SMLAD(inA2, inB2, sum);
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	4619      	mov	r1, r3
 8001e04:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001e06:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e0a:	6679      	str	r1, [r7, #100]	; 0x64
 8001e0c:	663a      	str	r2, [r7, #96]	; 0x60
 8001e0e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001e10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e12:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e14:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001e16:	fb23 1302 	smlad	r3, r3, r2, r1
 8001e1a:	65bb      	str	r3, [r7, #88]	; 0x58
  return(result);
 8001e1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                colCnt--;
 8001e22:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8001e26:	3b01      	subs	r3, #1
 8001e28:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
            while (colCnt)
 8001e2c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d18f      	bne.n	8001d54 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x1b6>
            }
            colCnt = ch_im_in * dim_kernel_y * dim_kernel_x & 0x3;
 8001e34:	88fa      	ldrh	r2, [r7, #6]
 8001e36:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8001e3a:	fb12 f303 	smulbb	r3, r2, r3
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 8001e44:	fb12 f303 	smulbb	r3, r2, r3
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
            while (colCnt)
 8001e52:	e01d      	b.n	8001e90 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x2f2>
            {
                q7_t      inA1 = *pA++;
 8001e54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e58:	1c5a      	adds	r2, r3, #1
 8001e5a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                q15_t     inB1 = *pB++;
 8001e64:	6a3b      	ldr	r3, [r7, #32]
 8001e66:	1c9a      	adds	r2, r3, #2
 8001e68:	623a      	str	r2, [r7, #32]
 8001e6a:	881b      	ldrh	r3, [r3, #0]
 8001e6c:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
                sum += inA1 * inB1;
 8001e70:	f997 3073 	ldrsb.w	r3, [r7, #115]	; 0x73
 8001e74:	f9b7 2070 	ldrsh.w	r2, [r7, #112]	; 0x70
 8001e78:	fb02 f303 	mul.w	r3, r2, r3
 8001e7c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001e80:	4413      	add	r3, r2
 8001e82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                colCnt--;
 8001e86:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
            while (colCnt)
 8001e90:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1dd      	bne.n	8001e54 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x2b6>
            }
            *pOut = (q7_t) __SSAT((sum >> out_shift), 8);
 8001e98:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8001e9c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001ea0:	fa42 f303 	asr.w	r3, r2, r3
 8001ea4:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ea6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ea8:	f303 0307 	ssat	r3, #8, r3
 8001eac:	677b      	str	r3, [r7, #116]	; 0x74
 8001eae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001eb0:	b25a      	sxtb	r2, r3
 8001eb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001eb6:	701a      	strb	r2, [r3, #0]
            pOut++;
 8001eb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (i_ch_out = 0; i_ch_out < ch_im_out; i_ch_out++)
 8001ec2:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	3301      	adds	r3, #1
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8001ed0:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 8001ed4:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	f6ff af17 	blt.w	8001d0c <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x16e>
    }

#endif                          /* ARM_MATH_DSP */

    /* Return to application */
    return ARM_MATH_SUCCESS;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3798      	adds	r7, #152	; 0x98
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <arm_convolve_HWC_q7_RGB>:
                        const uint16_t stride,
                        const q7_t * bias,
                        const uint16_t bias_shift,
                        const uint16_t out_shift,
                        q7_t * Im_out, const uint16_t dim_im_out, q15_t * bufferA, q7_t * bufferB)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b0b6      	sub	sp, #216	; 0xd8
 8001eec:	af04      	add	r7, sp, #16
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	607b      	str	r3, [r7, #4]
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	817b      	strh	r3, [r7, #10]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	813b      	strh	r3, [r7, #8]

    /*
     *  Here we use bufferA as q15_t internally as computation are done with q15_t level
     *  im2col are done to output in q15_t format from q7_t input
     */
    q15_t    *pBuffer = bufferA;
 8001efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001efe:	62fb      	str	r3, [r7, #44]	; 0x2c
    q7_t     *pOut = Im_out;
 8001f00:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001f04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

    // check if number of input channels is 3
    if (ch_im_in != 3)
 8001f08:	893b      	ldrh	r3, [r7, #8]
 8001f0a:	2b03      	cmp	r3, #3
 8001f0c:	d002      	beq.n	8001f14 <arm_convolve_HWC_q7_RGB+0x2c>
    {
        return ARM_MATH_SIZE_MISMATCH;
 8001f0e:	f06f 0302 	mvn.w	r3, #2
 8001f12:	e225      	b.n	8002360 <arm_convolve_HWC_q7_RGB+0x478>
    }
    // This part implements the im2col function
    for (i_out_y = 0; i_out_y < dim_im_out; i_out_y++)
 8001f14:	2300      	movs	r3, #0
 8001f16:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 8001f1a:	e111      	b.n	8002140 <arm_convolve_HWC_q7_RGB+0x258>
    {
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 8001f22:	e0ff      	b.n	8002124 <arm_convolve_HWC_q7_RGB+0x23c>
        {
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 8001f24:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8001f28:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	; 0xdc
 8001f2c:	fb12 f303 	smulbb	r3, r2, r3
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 8001f3e:	e0a3      	b.n	8002088 <arm_convolve_HWC_q7_RGB+0x1a0>
            {
                for (i_ker_x = i_out_x * stride - padding; i_ker_x < i_out_x * stride - padding + dim_kernel; i_ker_x++)
 8001f40:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8001f44:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	; 0xdc
 8001f48:	fb12 f303 	smulbb	r3, r2, r3
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
 8001f5a:	e07d      	b.n	8002058 <arm_convolve_HWC_q7_RGB+0x170>
                {
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in || i_ker_x < 0 || i_ker_x >= dim_im_in)
 8001f5c:	f9b7 30c2 	ldrsh.w	r3, [r7, #194]	; 0xc2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	db0d      	blt.n	8001f80 <arm_convolve_HWC_q7_RGB+0x98>
 8001f64:	f9b7 20c2 	ldrsh.w	r2, [r7, #194]	; 0xc2
 8001f68:	897b      	ldrh	r3, [r7, #10]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	da08      	bge.n	8001f80 <arm_convolve_HWC_q7_RGB+0x98>
 8001f6e:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	; 0xc0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	db04      	blt.n	8001f80 <arm_convolve_HWC_q7_RGB+0x98>
 8001f76:	f9b7 20c0 	ldrsh.w	r2, [r7, #192]	; 0xc0
 8001f7a:	897b      	ldrh	r3, [r7, #10]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	db0c      	blt.n	8001f9a <arm_convolve_HWC_q7_RGB+0xb2>
                    {
                        /* Equivalent to arm_fill_q15(0, pBuffer, ch_im_in) with assumption: ch_im_in = 3 */
                        *__SIMD32(pBuffer) = 0x0;
 8001f80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
                        *(pBuffer + 2) = 0;
 8001f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	2200      	movs	r2, #0
 8001f90:	801a      	strh	r2, [r3, #0]
                        pBuffer += 3;
 8001f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f94:	3306      	adds	r3, #6
 8001f96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f98:	e057      	b.n	800204a <arm_convolve_HWC_q7_RGB+0x162>
                        /* 
                         * Equivalent to:
                         *  arm_q7_to_q15_no_shift( (q7_t*)Im_in+(i_ker_y*dim_im_in+i_ker_x)*3, pBuffer, 3);
                         */

                        const q7_t *pPixel = Im_in + (i_ker_y * dim_im_in + i_ker_x) * 3;
 8001f9a:	f9b7 30c2 	ldrsh.w	r3, [r7, #194]	; 0xc2
 8001f9e:	897a      	ldrh	r2, [r7, #10]
 8001fa0:	fb02 f203 	mul.w	r2, r2, r3
 8001fa4:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	; 0xc0
 8001fa8:	441a      	add	r2, r3
 8001faa:	4613      	mov	r3, r2
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	4413      	add	r3, r2
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	62bb      	str	r3, [r7, #40]	; 0x28
                        q31_t     buf = *__SIMD32(pPixel);
 8001fb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                        union arm_nnword top;
                        union arm_nnword bottom;

                        top.word = __SXTB16(buf);
 8001fc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001fc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001fcc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fd0:	fa2f f383 	sxtb16	r3, r3
 8001fd4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return(result);
 8001fd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
                        bottom.word = __SXTB16(__ROR(buf, 8));
 8001fda:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001fde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001fe2:	2308      	movs	r3, #8
 8001fe4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  op2 %= 32U;
 8001fe8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fec:	f003 031f 	and.w	r3, r3, #31
 8001ff0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (op2 == 0U)
 8001ff4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d102      	bne.n	8002002 <arm_convolve_HWC_q7_RGB+0x11a>
    return op1;
 8001ffc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002000:	e005      	b.n	800200e <arm_convolve_HWC_q7_RGB+0x126>
  return (op1 >> op2) | (op1 << (32U - op2));
 8002002:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002006:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800200a:	fa62 f303 	ror.w	r3, r2, r3
 800200e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002012:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002016:	fa2f f383 	sxtb16	r3, r3
 800201a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  return(result);
 800201e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002022:	623b      	str	r3, [r7, #32]
                         * *__SIMD32(pBuffer) = top.word;
                         * *(pBuffer+2) = bottom.half_words[0];
                         *
                         *  version 2, no weight shuffling required
                         */
                        *pBuffer++ = top.half_words[0];
 8002024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002026:	1c9a      	adds	r2, r3, #2
 8002028:	62fa      	str	r2, [r7, #44]	; 0x2c
 800202a:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800202e:	801a      	strh	r2, [r3, #0]
                        *__SIMD32(pBuffer) = __PKHBT(bottom.word, top.word, 0);
 8002030:	6a3b      	ldr	r3, [r7, #32]
 8002032:	b29a      	uxth	r2, r3
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	0c1b      	lsrs	r3, r3, #16
 8002038:	041b      	lsls	r3, r3, #16
 800203a:	431a      	orrs	r2, r3
 800203c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	601a      	str	r2, [r3, #0]
                         *  version 2, no weight shuffling required
                         */
                        *pBuffer++ = bottom.half_words[0];
                        *__SIMD32(pBuffer) = __PKHTB(top.word, bottom.word, 0);
#endif
                        pBuffer += 2;
 8002044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002046:	3304      	adds	r3, #4
 8002048:	62fb      	str	r3, [r7, #44]	; 0x2c
                for (i_ker_x = i_out_x * stride - padding; i_ker_x < i_out_x * stride - padding + dim_kernel; i_ker_x++)
 800204a:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	; 0xc0
 800204e:	b29b      	uxth	r3, r3
 8002050:	3301      	adds	r3, #1
 8002052:	b29b      	uxth	r3, r3
 8002054:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
 8002058:	f9b7 20c0 	ldrsh.w	r2, [r7, #192]	; 0xc0
 800205c:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	; 0xc4
 8002060:	f8b7 10dc 	ldrh.w	r1, [r7, #220]	; 0xdc
 8002064:	fb01 f103 	mul.w	r1, r1, r3
 8002068:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 800206c:	1ac9      	subs	r1, r1, r3
 800206e:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8002072:	440b      	add	r3, r1
 8002074:	429a      	cmp	r2, r3
 8002076:	f6ff af71 	blt.w	8001f5c <arm_convolve_HWC_q7_RGB+0x74>
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 800207a:	f9b7 30c2 	ldrsh.w	r3, [r7, #194]	; 0xc2
 800207e:	b29b      	uxth	r3, r3
 8002080:	3301      	adds	r3, #1
 8002082:	b29b      	uxth	r3, r3
 8002084:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 8002088:	f9b7 20c2 	ldrsh.w	r2, [r7, #194]	; 0xc2
 800208c:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	; 0xc6
 8002090:	f8b7 10dc 	ldrh.w	r1, [r7, #220]	; 0xdc
 8002094:	fb01 f103 	mul.w	r1, r1, r3
 8002098:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 800209c:	1ac9      	subs	r1, r1, r3
 800209e:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 80020a2:	440b      	add	r3, r1
 80020a4:	429a      	cmp	r2, r3
 80020a6:	f6ff af4b 	blt.w	8001f40 <arm_convolve_HWC_q7_RGB+0x58>
                    }
                }
            }

            if (pBuffer == bufferA + 2 * 3 * dim_kernel * dim_kernel)
 80020aa:	f8b7 20d4 	ldrh.w	r2, [r7, #212]	; 0xd4
 80020ae:	4613      	mov	r3, r2
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	4413      	add	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	461a      	mov	r2, r3
 80020b8:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 80020bc:	fb03 f302 	mul.w	r3, r3, r2
 80020c0:	461a      	mov	r2, r3
 80020c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020c6:	441a      	add	r2, r3
 80020c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d123      	bne.n	8002116 <arm_convolve_HWC_q7_RGB+0x22e>
            {
                pOut =
                    arm_nn_mat_mult_kernel_q7_q15(wt, bufferA,
 80020ce:	f8b7 20d4 	ldrh.w	r2, [r7, #212]	; 0xd4
 80020d2:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 80020d6:	fb12 f303 	smulbb	r3, r2, r3
 80020da:	b29b      	uxth	r3, r3
 80020dc:	461a      	mov	r2, r3
 80020de:	0052      	lsls	r2, r2, #1
 80020e0:	4413      	add	r3, r2
 80020e2:	b299      	uxth	r1, r3
                pOut =
 80020e4:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 80020e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80020ec:	9303      	str	r3, [sp, #12]
 80020ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020f2:	9302      	str	r3, [sp, #8]
 80020f4:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 80020f8:	9301      	str	r3, [sp, #4]
 80020fa:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	460b      	mov	r3, r1
 8002102:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f001 fefc 	bl	8003f04 <arm_nn_mat_mult_kernel_q7_q15>
 800210c:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
                                                  ch_im_out,
                                                  3 * dim_kernel * dim_kernel, bias_shift, out_shift, bias, pOut);

                /* counter reset */
                pBuffer = bufferA;
 8002110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002114:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 8002116:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	; 0xc4
 800211a:	b29b      	uxth	r3, r3
 800211c:	3301      	adds	r3, #1
 800211e:	b29b      	uxth	r3, r3
 8002120:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 8002124:	f9b7 20c4 	ldrsh.w	r2, [r7, #196]	; 0xc4
 8002128:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 800212c:	429a      	cmp	r2, r3
 800212e:	f6ff aef9 	blt.w	8001f24 <arm_convolve_HWC_q7_RGB+0x3c>
    for (i_out_y = 0; i_out_y < dim_im_out; i_out_y++)
 8002132:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	; 0xc6
 8002136:	b29b      	uxth	r3, r3
 8002138:	3301      	adds	r3, #1
 800213a:	b29b      	uxth	r3, r3
 800213c:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 8002140:	f9b7 20c6 	ldrsh.w	r2, [r7, #198]	; 0xc6
 8002144:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 8002148:	429a      	cmp	r2, r3
 800214a:	f6ff aee7 	blt.w	8001f1c <arm_convolve_HWC_q7_RGB+0x34>
            }
        }
    }

    /* left-over because odd number of output pixels */
    if (pBuffer != bufferA)
 800214e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002150:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8002154:	429a      	cmp	r2, r3
 8002156:	f000 8102 	beq.w	800235e <arm_convolve_HWC_q7_RGB+0x476>
    {
        const q7_t *pA = wt;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
        int       i;

        for (i = 0; i < ch_im_out; i++)
 8002160:	2300      	movs	r3, #0
 8002162:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002166:	e0f3      	b.n	8002350 <arm_convolve_HWC_q7_RGB+0x468>
        {
            q31_t     sum = ((q31_t)bias[i] << bias_shift) + NN_ROUND(out_shift);
 8002168:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800216c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002170:	4413      	add	r3, r2
 8002172:	f993 3000 	ldrsb.w	r3, [r3]
 8002176:	461a      	mov	r2, r3
 8002178:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 800217c:	409a      	lsls	r2, r3
 800217e:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8002182:	3b01      	subs	r3, #1
 8002184:	2101      	movs	r1, #1
 8002186:	fa01 f303 	lsl.w	r3, r1, r3
 800218a:	4413      	add	r3, r2
 800218c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            q15_t    *pB = bufferA;
 8002190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002194:	61fb      	str	r3, [r7, #28]
            /* basically each time it process 4 entries */
            uint16_t  colCnt = 3 * dim_kernel * dim_kernel >> 2;
 8002196:	f8b7 20d4 	ldrh.w	r2, [r7, #212]	; 0xd4
 800219a:	4613      	mov	r3, r2
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	4413      	add	r3, r2
 80021a0:	f8b7 20d4 	ldrh.w	r2, [r7, #212]	; 0xd4
 80021a4:	fb02 f303 	mul.w	r3, r2, r3
 80021a8:	109b      	asrs	r3, r3, #2
 80021aa:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae

            while (colCnt)
 80021ae:	e07c      	b.n	80022aa <arm_convolve_HWC_q7_RGB+0x3c2>
 80021b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80021b4:	613b      	str	r3, [r7, #16]
 80021b6:	f107 0318 	add.w	r3, r7, #24
 80021ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80021bc:	f107 0314 	add.w	r3, r7, #20
 80021c0:	657b      	str	r3, [r7, #84]	; 0x54
        q31_t     inA = *__SIMD32(source)++;
 80021c2:	f107 0210 	add.w	r2, r7, #16
 80021c6:	6813      	ldr	r3, [r2, #0]
 80021c8:	1d19      	adds	r1, r3, #4
 80021ca:	6011      	str	r1, [r2, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	653b      	str	r3, [r7, #80]	; 0x50
        q31_t     inAbuf1 = __SXTB16(__ROR(inA, 8));
 80021d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021d4:	2308      	movs	r3, #8
 80021d6:	64bb      	str	r3, [r7, #72]	; 0x48
  op2 %= 32U;
 80021d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021da:	f003 031f 	and.w	r3, r3, #31
 80021de:	64bb      	str	r3, [r7, #72]	; 0x48
  if (op2 == 0U)
 80021e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <arm_convolve_HWC_q7_RGB+0x302>
    return op1;
 80021e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021e8:	e003      	b.n	80021f2 <arm_convolve_HWC_q7_RGB+0x30a>
  return (op1 >> op2) | (op1 << (32U - op2));
 80021ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021ee:	fa62 f303 	ror.w	r3, r2, r3
 80021f2:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80021f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021f6:	fa2f f383 	sxtb16	r3, r3
 80021fa:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 80021fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        q31_t     inAbuf2 = __SXTB16(inA);
 8002200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002202:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002206:	fa2f f383 	sxtb16	r3, r3
 800220a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800220c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800220e:	633b      	str	r3, [r7, #48]	; 0x30
        *out2 = __PKHTB(inAbuf1, inAbuf2, 16);
 8002210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002212:	0c1b      	lsrs	r3, r3, #16
 8002214:	041b      	lsls	r3, r3, #16
 8002216:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002218:	0c12      	lsrs	r2, r2, #16
 800221a:	4313      	orrs	r3, r2
 800221c:	461a      	mov	r2, r3
 800221e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002220:	601a      	str	r2, [r3, #0]
        *out1 = __PKHBT(inAbuf2, inAbuf1, 16);
 8002222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002224:	b29a      	uxth	r2, r3
 8002226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002228:	041b      	lsls	r3, r3, #16
 800222a:	4313      	orrs	r3, r2
 800222c:	461a      	mov	r2, r3
 800222e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002230:	601a      	str	r2, [r3, #0]
        return source;
 8002232:	693b      	ldr	r3, [r7, #16]
            {

                q31_t     inA1, inA2;
                q31_t     inB1, inB2;

                pA = (q7_t *) read_and_pad((void *)pA, &inA1, &inA2);
 8002234:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

                inB1 = *__SIMD32(pB)++;
 8002238:	f107 021c 	add.w	r2, r7, #28
 800223c:	6813      	ldr	r3, [r2, #0]
 800223e:	1d19      	adds	r1, r3, #4
 8002240:	6011      	str	r1, [r2, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                sum = __SMLAD(inA1, inB1, sum);
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	4619      	mov	r1, r3
 800224c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8002250:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002254:	66b9      	str	r1, [r7, #104]	; 0x68
 8002256:	667a      	str	r2, [r7, #100]	; 0x64
 8002258:	663b      	str	r3, [r7, #96]	; 0x60
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800225a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800225c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800225e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002260:	fb23 1302 	smlad	r3, r3, r2, r1
 8002264:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 8002266:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002268:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                inB2 = *__SIMD32(pB)++;
 800226c:	f107 021c 	add.w	r2, r7, #28
 8002270:	6813      	ldr	r3, [r2, #0]
 8002272:	1d19      	adds	r1, r3, #4
 8002274:	6011      	str	r1, [r2, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                sum = __SMLAD(inA2, inB2, sum);
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	4619      	mov	r1, r3
 8002280:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002284:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002288:	67b9      	str	r1, [r7, #120]	; 0x78
 800228a:	677a      	str	r2, [r7, #116]	; 0x74
 800228c:	673b      	str	r3, [r7, #112]	; 0x70
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800228e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002290:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002292:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002294:	fb23 1302 	smlad	r3, r3, r2, r1
 8002298:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 800229a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800229c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

                colCnt--;
 80022a0:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80022a4:	3b01      	subs	r3, #1
 80022a6:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
            while (colCnt)
 80022aa:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f47f af7e 	bne.w	80021b0 <arm_convolve_HWC_q7_RGB+0x2c8>
            }
            colCnt = 3 * dim_kernel * dim_kernel & 0x3;
 80022b4:	f8b7 20d4 	ldrh.w	r2, [r7, #212]	; 0xd4
 80022b8:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 80022bc:	fb12 f303 	smulbb	r3, r2, r3
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	461a      	mov	r2, r3
 80022c4:	0052      	lsls	r2, r2, #1
 80022c6:	4413      	add	r3, r2
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	f003 0303 	and.w	r3, r3, #3
 80022ce:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
            while (colCnt)
 80022d2:	e01d      	b.n	8002310 <arm_convolve_HWC_q7_RGB+0x428>
            {
                q7_t      inA1 = *pA++;
 80022d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80022d8:	1c5a      	adds	r2, r3, #1
 80022da:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
                q15_t     inB1 = *pB++;
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	1c9a      	adds	r2, r3, #2
 80022e8:	61fa      	str	r2, [r7, #28]
 80022ea:	881b      	ldrh	r3, [r3, #0]
 80022ec:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
                sum += inA1 * inB1;
 80022f0:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 80022f4:	f9b7 20a0 	ldrsh.w	r2, [r7, #160]	; 0xa0
 80022f8:	fb02 f303 	mul.w	r3, r2, r3
 80022fc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002300:	4413      	add	r3, r2
 8002302:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                colCnt--;
 8002306:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800230a:	3b01      	subs	r3, #1
 800230c:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
            while (colCnt)
 8002310:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1dd      	bne.n	80022d4 <arm_convolve_HWC_q7_RGB+0x3ec>
            }
            *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 8002318:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 800231c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002320:	fa42 f303 	asr.w	r3, r2, r3
 8002324:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002328:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800232c:	f303 0307 	ssat	r3, #8, r3
 8002330:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002334:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002338:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800233c:	1c5a      	adds	r2, r3, #1
 800233e:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002342:	b24a      	sxtb	r2, r1
 8002344:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < ch_im_out; i++)
 8002346:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800234a:	3301      	adds	r3, #1
 800234c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002350:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 8002354:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002358:	429a      	cmp	r2, r3
 800235a:	f6ff af05 	blt.w	8002168 <arm_convolve_HWC_q7_RGB+0x280>
    }

#endif                          /* ARM_MATH_DSP */

    /* Return to application */
    return (ARM_MATH_SUCCESS);
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	37c8      	adds	r7, #200	; 0xc8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <arm_convolve_HWC_q7_basic>:
                          const uint16_t out_shift,
                          q7_t * Im_out, 
                          const uint16_t dim_im_out, 
                          q15_t * bufferA, 
                          q7_t * bufferB)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b0ac      	sub	sp, #176	; 0xb0
 800236c:	af04      	add	r7, sp, #16
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	607b      	str	r3, [r7, #4]
 8002372:	460b      	mov	r3, r1
 8002374:	817b      	strh	r3, [r7, #10]
 8002376:	4613      	mov	r3, r2
 8002378:	813b      	strh	r3, [r7, #8]

    /* 
     *  Here we use bufferA as q15_t internally as computation are done with q15_t level
     *  im2col are done to output in q15_t format from q7_t input
     */
    q15_t    *pBuffer = bufferA;
 800237a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800237e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    q7_t     *pOut = Im_out;
 8002382:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002386:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

    /* This part implements the im2col function */
    for (i_out_y = 0; i_out_y < dim_im_out; i_out_y++)
 800238a:	2300      	movs	r3, #0
 800238c:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8002390:	e0cf      	b.n	8002532 <arm_convolve_HWC_q7_basic+0x1ca>
    {
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 8002392:	2300      	movs	r3, #0
 8002394:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002398:	e0bd      	b.n	8002516 <arm_convolve_HWC_q7_basic+0x1ae>
        {
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 800239a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800239e:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 80023a2:	fb12 f303 	smulbb	r3, r2, r3
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 80023b4:	e061      	b.n	800247a <arm_convolve_HWC_q7_basic+0x112>
            {
                for (i_ker_x = i_out_x * stride - padding; i_ker_x < i_out_x * stride - padding + dim_kernel; i_ker_x++)
 80023b6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80023ba:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 80023be:	fb12 f303 	smulbb	r3, r2, r3
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80023d0:	e03c      	b.n	800244c <arm_convolve_HWC_q7_basic+0xe4>
                {
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in || i_ker_x < 0 || i_ker_x >= dim_im_in)
 80023d2:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	db0d      	blt.n	80023f6 <arm_convolve_HWC_q7_basic+0x8e>
 80023da:	f9b7 209a 	ldrsh.w	r2, [r7, #154]	; 0x9a
 80023de:	897b      	ldrh	r3, [r7, #10]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	da08      	bge.n	80023f6 <arm_convolve_HWC_q7_basic+0x8e>
 80023e4:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	db04      	blt.n	80023f6 <arm_convolve_HWC_q7_basic+0x8e>
 80023ec:	f9b7 2098 	ldrsh.w	r2, [r7, #152]	; 0x98
 80023f0:	897b      	ldrh	r3, [r7, #10]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	db08      	blt.n	8002408 <arm_convolve_HWC_q7_basic+0xa0>
                    {
                        /* Filling 0 for out-of-bound paddings */
                        /* arm_fill_q15(0, pBuffer, ch_im_in); */
                        memset(pBuffer, 0, sizeof(q15_t)*ch_im_in);
 80023f6:	893b      	ldrh	r3, [r7, #8]
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	461a      	mov	r2, r3
 80023fc:	2100      	movs	r1, #0
 80023fe:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8002402:	f008 f8df 	bl	800a5c4 <memset>
 8002406:	e013      	b.n	8002430 <arm_convolve_HWC_q7_basic+0xc8>
                    } else
                    {
                        /* Copying the pixel data to column */
                        arm_q7_to_q15_no_shift((q7_t *)
                                               Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, pBuffer, ch_im_in);
 8002408:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 800240c:	897a      	ldrh	r2, [r7, #10]
 800240e:	fb02 f203 	mul.w	r2, r2, r3
 8002412:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8002416:	4413      	add	r3, r2
 8002418:	893a      	ldrh	r2, [r7, #8]
 800241a:	fb02 f303 	mul.w	r3, r2, r3
 800241e:	461a      	mov	r2, r3
                        arm_q7_to_q15_no_shift((q7_t *)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4413      	add	r3, r2
 8002424:	893a      	ldrh	r2, [r7, #8]
 8002426:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800242a:	4618      	mov	r0, r3
 800242c:	f003 fa9b 	bl	8005966 <arm_q7_to_q15_no_shift>
                    }
                    pBuffer += ch_im_in;
 8002430:	893b      	ldrh	r3, [r7, #8]
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002438:	4413      	add	r3, r2
 800243a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                for (i_ker_x = i_out_x * stride - padding; i_ker_x < i_out_x * stride - padding + dim_kernel; i_ker_x++)
 800243e:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8002442:	b29b      	uxth	r3, r3
 8002444:	3301      	adds	r3, #1
 8002446:	b29b      	uxth	r3, r3
 8002448:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800244c:	f9b7 2098 	ldrsh.w	r2, [r7, #152]	; 0x98
 8002450:	f9b7 309c 	ldrsh.w	r3, [r7, #156]	; 0x9c
 8002454:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 8002458:	fb01 f103 	mul.w	r1, r1, r3
 800245c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8002460:	1ac9      	subs	r1, r1, r3
 8002462:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8002466:	440b      	add	r3, r1
 8002468:	429a      	cmp	r2, r3
 800246a:	dbb2      	blt.n	80023d2 <arm_convolve_HWC_q7_basic+0x6a>
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 800246c:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8002470:	b29b      	uxth	r3, r3
 8002472:	3301      	adds	r3, #1
 8002474:	b29b      	uxth	r3, r3
 8002476:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 800247a:	f9b7 209a 	ldrsh.w	r2, [r7, #154]	; 0x9a
 800247e:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8002482:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 8002486:	fb01 f103 	mul.w	r1, r1, r3
 800248a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 800248e:	1ac9      	subs	r1, r1, r3
 8002490:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8002494:	440b      	add	r3, r1
 8002496:	429a      	cmp	r2, r3
 8002498:	db8d      	blt.n	80023b6 <arm_convolve_HWC_q7_basic+0x4e>
                }
            }

            /* Computation is filed for every 2 columns */
            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 800249a:	893b      	ldrh	r3, [r7, #8]
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 80024a2:	fb02 f303 	mul.w	r3, r2, r3
 80024a6:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 80024aa:	fb02 f303 	mul.w	r3, r2, r3
 80024ae:	461a      	mov	r2, r3
 80024b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80024b4:	4413      	add	r3, r2
 80024b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d124      	bne.n	8002508 <arm_convolve_HWC_q7_basic+0x1a0>
            {
                pOut =
                    arm_nn_mat_mult_kernel_q7_q15(wt, bufferA,
 80024be:	893a      	ldrh	r2, [r7, #8]
 80024c0:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 80024c4:	fb12 f303 	smulbb	r3, r2, r3
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 80024ce:	fb12 f303 	smulbb	r3, r2, r3
 80024d2:	b299      	uxth	r1, r3
                pOut =
 80024d4:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 80024d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024dc:	9303      	str	r3, [sp, #12]
 80024de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80024e2:	9302      	str	r3, [sp, #8]
 80024e4:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 80024e8:	9301      	str	r3, [sp, #4]
 80024ea:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	460b      	mov	r3, r1
 80024f2:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f001 fd04 	bl	8003f04 <arm_nn_mat_mult_kernel_q7_q15>
 80024fc:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
                                                  ch_im_out,
                                                  ch_im_in *
                                                  dim_kernel * dim_kernel, bias_shift, out_shift, bias, pOut);

                /* counter reset */
                pBuffer = bufferA;
 8002500:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002504:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 8002508:	f9b7 309c 	ldrsh.w	r3, [r7, #156]	; 0x9c
 800250c:	b29b      	uxth	r3, r3
 800250e:	3301      	adds	r3, #1
 8002510:	b29b      	uxth	r3, r3
 8002512:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002516:	f9b7 209c 	ldrsh.w	r2, [r7, #156]	; 0x9c
 800251a:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800251e:	429a      	cmp	r2, r3
 8002520:	f6ff af3b 	blt.w	800239a <arm_convolve_HWC_q7_basic+0x32>
    for (i_out_y = 0; i_out_y < dim_im_out; i_out_y++)
 8002524:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8002528:	b29b      	uxth	r3, r3
 800252a:	3301      	adds	r3, #1
 800252c:	b29b      	uxth	r3, r3
 800252e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8002532:	f9b7 209e 	ldrsh.w	r2, [r7, #158]	; 0x9e
 8002536:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800253a:	429a      	cmp	r2, r3
 800253c:	f6ff af29 	blt.w	8002392 <arm_convolve_HWC_q7_basic+0x2a>
            }
        }
    }

    /* left-over because odd number of output pixels */
    if (pBuffer != bufferA)
 8002540:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002544:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002548:	429a      	cmp	r2, r3
 800254a:	f000 80f9 	beq.w	8002740 <arm_convolve_HWC_q7_basic+0x3d8>
    {
        const q7_t *pA = wt;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        int       i;

        for (i = 0; i < ch_im_out; i++)
 8002554:	2300      	movs	r3, #0
 8002556:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800255a:	e0ea      	b.n	8002732 <arm_convolve_HWC_q7_basic+0x3ca>
        {
            /* Load the accumulator with bias first */
            q31_t     sum = ((q31_t)bias[i] << bias_shift) + NN_ROUND(out_shift);
 800255c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002560:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002564:	4413      	add	r3, r2
 8002566:	f993 3000 	ldrsb.w	r3, [r3]
 800256a:	461a      	mov	r2, r3
 800256c:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8002570:	409a      	lsls	r2, r3
 8002572:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8002576:	3b01      	subs	r3, #1
 8002578:	2101      	movs	r1, #1
 800257a:	fa01 f303 	lsl.w	r3, r1, r3
 800257e:	4413      	add	r3, r2
 8002580:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

            /* Point to the beging of the im2col buffer */
            q15_t    *pB = bufferA;
 8002584:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002588:	61fb      	str	r3, [r7, #28]

            /* Each time it process 4 entries */
            uint16_t  colCnt = ch_im_in * dim_kernel * dim_kernel >> 2;
 800258a:	893b      	ldrh	r3, [r7, #8]
 800258c:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8002590:	fb02 f303 	mul.w	r3, r2, r3
 8002594:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8002598:	fb02 f303 	mul.w	r3, r2, r3
 800259c:	109b      	asrs	r3, r3, #2
 800259e:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

            while (colCnt)
 80025a2:	e078      	b.n	8002696 <arm_convolve_HWC_q7_basic+0x32e>
 80025a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	f107 0318 	add.w	r3, r7, #24
 80025ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80025b0:	f107 0314 	add.w	r3, r7, #20
 80025b4:	647b      	str	r3, [r7, #68]	; 0x44
        q31_t     inA = *__SIMD32(source)++;
 80025b6:	f107 0210 	add.w	r2, r7, #16
 80025ba:	6813      	ldr	r3, [r2, #0]
 80025bc:	1d19      	adds	r1, r3, #4
 80025be:	6011      	str	r1, [r2, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	643b      	str	r3, [r7, #64]	; 0x40
        q31_t     inAbuf1 = __SXTB16(__ROR(inA, 8));
 80025c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025c8:	2308      	movs	r3, #8
 80025ca:	63bb      	str	r3, [r7, #56]	; 0x38
  op2 %= 32U;
 80025cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ce:	f003 031f 	and.w	r3, r3, #31
 80025d2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (op2 == 0U)
 80025d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <arm_convolve_HWC_q7_basic+0x276>
    return op1;
 80025da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025dc:	e003      	b.n	80025e6 <arm_convolve_HWC_q7_basic+0x27e>
  return (op1 >> op2) | (op1 << (32U - op2));
 80025de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e2:	fa62 f303 	ror.w	r3, r2, r3
 80025e6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80025e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ea:	fa2f f383 	sxtb16	r3, r3
 80025ee:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80025f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        q31_t     inAbuf2 = __SXTB16(inA);
 80025f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025f6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80025f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fa:	fa2f f383 	sxtb16	r3, r3
 80025fe:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	623b      	str	r3, [r7, #32]
        *out2 = __PKHTB(inAbuf1, inAbuf2, 16);
 8002604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002606:	0c1b      	lsrs	r3, r3, #16
 8002608:	041b      	lsls	r3, r3, #16
 800260a:	6a3a      	ldr	r2, [r7, #32]
 800260c:	0c12      	lsrs	r2, r2, #16
 800260e:	4313      	orrs	r3, r2
 8002610:	461a      	mov	r2, r3
 8002612:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002614:	601a      	str	r2, [r3, #0]
        *out1 = __PKHBT(inAbuf2, inAbuf1, 16);
 8002616:	6a3b      	ldr	r3, [r7, #32]
 8002618:	b29a      	uxth	r2, r3
 800261a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261c:	041b      	lsls	r3, r3, #16
 800261e:	4313      	orrs	r3, r2
 8002620:	461a      	mov	r2, r3
 8002622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002624:	601a      	str	r2, [r3, #0]
        return source;
 8002626:	693b      	ldr	r3, [r7, #16]
            {
                q31_t     inA1, inA2;
                q31_t     inB1, inB2;

                pA = (q7_t *) read_and_pad((void *)pA, &inA1, &inA2);
 8002628:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                inB1 = *__SIMD32(pB)++;
 800262c:	f107 021c 	add.w	r2, r7, #28
 8002630:	6813      	ldr	r3, [r2, #0]
 8002632:	1d19      	adds	r1, r3, #4
 8002634:	6011      	str	r1, [r2, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	673b      	str	r3, [r7, #112]	; 0x70
                sum = __SMLAD(inA1, inB1, sum);
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	4619      	mov	r1, r3
 800263e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002640:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002644:	65b9      	str	r1, [r7, #88]	; 0x58
 8002646:	657a      	str	r2, [r7, #84]	; 0x54
 8002648:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800264a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800264c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800264e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002650:	fb23 1302 	smlad	r3, r3, r2, r1
 8002654:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8002656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002658:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                inB2 = *__SIMD32(pB)++;
 800265c:	f107 021c 	add.w	r2, r7, #28
 8002660:	6813      	ldr	r3, [r2, #0]
 8002662:	1d19      	adds	r1, r3, #4
 8002664:	6011      	str	r1, [r2, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	66fb      	str	r3, [r7, #108]	; 0x6c
                sum = __SMLAD(inA2, inB2, sum);
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	4619      	mov	r1, r3
 800266e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002670:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002674:	66b9      	str	r1, [r7, #104]	; 0x68
 8002676:	667a      	str	r2, [r7, #100]	; 0x64
 8002678:	663b      	str	r3, [r7, #96]	; 0x60
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800267a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800267c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800267e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002680:	fb23 1302 	smlad	r3, r3, r2, r1
 8002684:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 8002686:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002688:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                colCnt--;
 800268c:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002690:	3b01      	subs	r3, #1
 8002692:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
            while (colCnt)
 8002696:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800269a:	2b00      	cmp	r3, #0
 800269c:	d182      	bne.n	80025a4 <arm_convolve_HWC_q7_basic+0x23c>
            }
            colCnt = ch_im_in * dim_kernel * dim_kernel & 0x3;
 800269e:	893a      	ldrh	r2, [r7, #8]
 80026a0:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 80026a4:	fb12 f303 	smulbb	r3, r2, r3
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 80026ae:	fb12 f303 	smulbb	r3, r2, r3
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	f003 0303 	and.w	r3, r3, #3
 80026b8:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
            while (colCnt)
 80026bc:	e01d      	b.n	80026fa <arm_convolve_HWC_q7_basic+0x392>
            {
                q7_t      inA1 = *pA++;
 80026be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026c2:	1c5a      	adds	r2, r3, #1
 80026c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
                q15_t     inB1 = *pB++;
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	1c9a      	adds	r2, r3, #2
 80026d2:	61fa      	str	r2, [r7, #28]
 80026d4:	881b      	ldrh	r3, [r3, #0]
 80026d6:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
                sum += inA1 * inB1;
 80026da:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 80026de:	f9b7 2074 	ldrsh.w	r2, [r7, #116]	; 0x74
 80026e2:	fb02 f303 	mul.w	r3, r2, r3
 80026e6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80026ea:	4413      	add	r3, r2
 80026ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                colCnt--;
 80026f0:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80026f4:	3b01      	subs	r3, #1
 80026f6:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
            while (colCnt)
 80026fa:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1dd      	bne.n	80026be <arm_convolve_HWC_q7_basic+0x356>
            }
            *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 8002702:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8002706:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800270a:	fa42 f303 	asr.w	r3, r2, r3
 800270e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002710:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002712:	f303 0307 	ssat	r3, #8, r3
 8002716:	67bb      	str	r3, [r7, #120]	; 0x78
 8002718:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800271a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800271e:	1c5a      	adds	r2, r3, #1
 8002720:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8002724:	b24a      	sxtb	r2, r1
 8002726:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < ch_im_out; i++)
 8002728:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800272c:	3301      	adds	r3, #1
 800272e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002732:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8002736:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800273a:	429a      	cmp	r2, r3
 800273c:	f6ff af0e 	blt.w	800255c <arm_convolve_HWC_q7_basic+0x1f4>
    }

#endif                          /* ARM_MATH_DSP */

    /* Return to application */
    return ARM_MATH_SUCCESS;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	37a0      	adds	r7, #160	; 0xa0
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <arm_convolve_HWC_q7_basic_nonsquare>:
                                               q7_t * Im_out,
                                               const uint16_t dim_im_out_x,
                                               const uint16_t dim_im_out_y,
                                               q15_t * bufferA,
                                               q7_t * bufferB)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b0ac      	sub	sp, #176	; 0xb0
 800274e:	af04      	add	r7, sp, #16
 8002750:	60f8      	str	r0, [r7, #12]
 8002752:	4608      	mov	r0, r1
 8002754:	4611      	mov	r1, r2
 8002756:	461a      	mov	r2, r3
 8002758:	4603      	mov	r3, r0
 800275a:	817b      	strh	r3, [r7, #10]
 800275c:	460b      	mov	r3, r1
 800275e:	813b      	strh	r3, [r7, #8]
 8002760:	4613      	mov	r3, r2
 8002762:	80fb      	strh	r3, [r7, #6]

    /* 
     *  Here we use bufferA as q15_t internally as computation are done with q15_t level
     *  im2col are done to output in q15_t format from q7_t input
     */
    q15_t    *pBuffer = bufferA;
 8002764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002768:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    q7_t     *pOut = Im_out;
 800276c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002770:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

    /* This part implements the im2col function */
    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 8002774:	2300      	movs	r3, #0
 8002776:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 800277a:	e0d0      	b.n	800291e <arm_convolve_HWC_q7_basic_nonsquare+0x1d4>
    {
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 800277c:	2300      	movs	r3, #0
 800277e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002782:	e0be      	b.n	8002902 <arm_convolve_HWC_q7_basic_nonsquare+0x1b8>
        {
            for (i_ker_y = i_out_y * stride_y - padding_y; i_ker_y < i_out_y * stride_y - padding_y + dim_kernel_y; i_ker_y++)
 8002784:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002788:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 800278c:	fb12 f303 	smulbb	r3, r2, r3
 8002790:	b29a      	uxth	r2, r3
 8002792:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	b29b      	uxth	r3, r3
 800279a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 800279e:	e061      	b.n	8002864 <arm_convolve_HWC_q7_basic_nonsquare+0x11a>
            {
                for (i_ker_x = i_out_x * stride_x - padding_x; i_ker_x < i_out_x * stride_x - padding_x + dim_kernel_x; i_ker_x++)
 80027a0:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80027a4:	f8b7 20c0 	ldrh.w	r2, [r7, #192]	; 0xc0
 80027a8:	fb12 f303 	smulbb	r3, r2, r3
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80027ba:	e03c      	b.n	8002836 <arm_convolve_HWC_q7_basic_nonsquare+0xec>
                {
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in_y || i_ker_x < 0 || i_ker_x >= dim_im_in_x)
 80027bc:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	db0d      	blt.n	80027e0 <arm_convolve_HWC_q7_basic_nonsquare+0x96>
 80027c4:	f9b7 209a 	ldrsh.w	r2, [r7, #154]	; 0x9a
 80027c8:	893b      	ldrh	r3, [r7, #8]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	da08      	bge.n	80027e0 <arm_convolve_HWC_q7_basic_nonsquare+0x96>
 80027ce:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	db04      	blt.n	80027e0 <arm_convolve_HWC_q7_basic_nonsquare+0x96>
 80027d6:	f9b7 2098 	ldrsh.w	r2, [r7, #152]	; 0x98
 80027da:	897b      	ldrh	r3, [r7, #10]
 80027dc:	429a      	cmp	r2, r3
 80027de:	db08      	blt.n	80027f2 <arm_convolve_HWC_q7_basic_nonsquare+0xa8>
                    {
                        /* Filling 0 for out-of-bound paddings */
                        /* arm_fill_q15(0, pBuffer, ch_im_in); */
                        memset(pBuffer, 0, sizeof(q15_t)*ch_im_in);
 80027e0:	88fb      	ldrh	r3, [r7, #6]
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	461a      	mov	r2, r3
 80027e6:	2100      	movs	r1, #0
 80027e8:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80027ec:	f007 feea 	bl	800a5c4 <memset>
 80027f0:	e013      	b.n	800281a <arm_convolve_HWC_q7_basic_nonsquare+0xd0>
                    } else
                    {
                        /* Copying the pixel data to column */
                        arm_q7_to_q15_no_shift((q7_t *)
                                               Im_in + (i_ker_y * dim_im_in_x + i_ker_x) * ch_im_in, pBuffer, ch_im_in);
 80027f2:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 80027f6:	897a      	ldrh	r2, [r7, #10]
 80027f8:	fb02 f203 	mul.w	r2, r2, r3
 80027fc:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8002800:	4413      	add	r3, r2
 8002802:	88fa      	ldrh	r2, [r7, #6]
 8002804:	fb02 f303 	mul.w	r3, r2, r3
 8002808:	461a      	mov	r2, r3
                        arm_q7_to_q15_no_shift((q7_t *)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	4413      	add	r3, r2
 800280e:	88fa      	ldrh	r2, [r7, #6]
 8002810:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8002814:	4618      	mov	r0, r3
 8002816:	f003 f8a6 	bl	8005966 <arm_q7_to_q15_no_shift>
                    }
                    pBuffer += ch_im_in;
 800281a:	88fb      	ldrh	r3, [r7, #6]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002822:	4413      	add	r3, r2
 8002824:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                for (i_ker_x = i_out_x * stride_x - padding_x; i_ker_x < i_out_x * stride_x - padding_x + dim_kernel_x; i_ker_x++)
 8002828:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 800282c:	b29b      	uxth	r3, r3
 800282e:	3301      	adds	r3, #1
 8002830:	b29b      	uxth	r3, r3
 8002832:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8002836:	f9b7 2098 	ldrsh.w	r2, [r7, #152]	; 0x98
 800283a:	f9b7 309c 	ldrsh.w	r3, [r7, #156]	; 0x9c
 800283e:	f8b7 10c0 	ldrh.w	r1, [r7, #192]	; 0xc0
 8002842:	fb01 f103 	mul.w	r1, r1, r3
 8002846:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 800284a:	1ac9      	subs	r1, r1, r3
 800284c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8002850:	440b      	add	r3, r1
 8002852:	429a      	cmp	r2, r3
 8002854:	dbb2      	blt.n	80027bc <arm_convolve_HWC_q7_basic_nonsquare+0x72>
            for (i_ker_y = i_out_y * stride_y - padding_y; i_ker_y < i_out_y * stride_y - padding_y + dim_kernel_y; i_ker_y++)
 8002856:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 800285a:	b29b      	uxth	r3, r3
 800285c:	3301      	adds	r3, #1
 800285e:	b29b      	uxth	r3, r3
 8002860:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8002864:	f9b7 209a 	ldrsh.w	r2, [r7, #154]	; 0x9a
 8002868:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 800286c:	f8b7 10c4 	ldrh.w	r1, [r7, #196]	; 0xc4
 8002870:	fb01 f103 	mul.w	r1, r1, r3
 8002874:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8002878:	1ac9      	subs	r1, r1, r3
 800287a:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800287e:	440b      	add	r3, r1
 8002880:	429a      	cmp	r2, r3
 8002882:	db8d      	blt.n	80027a0 <arm_convolve_HWC_q7_basic_nonsquare+0x56>
                }
            }

            /* Computation is filed for every 2 columns */
            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel_y * dim_kernel_x)
 8002884:	88fb      	ldrh	r3, [r7, #6]
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 800288c:	fb02 f303 	mul.w	r3, r2, r3
 8002890:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8002894:	fb02 f303 	mul.w	r3, r2, r3
 8002898:	461a      	mov	r2, r3
 800289a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800289e:	4413      	add	r3, r2
 80028a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d125      	bne.n	80028f4 <arm_convolve_HWC_q7_basic_nonsquare+0x1aa>
            {
                pOut =
                    arm_nn_mat_mult_kernel_q7_q15(wt, bufferA,
 80028a8:	88fa      	ldrh	r2, [r7, #6]
 80028aa:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80028ae:	fb12 f303 	smulbb	r3, r2, r3
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 80028b8:	fb12 f303 	smulbb	r3, r2, r3
 80028bc:	b299      	uxth	r1, r3
                pOut =
 80028be:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 80028c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028c6:	9303      	str	r3, [sp, #12]
 80028c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 80028d2:	9301      	str	r3, [sp, #4]
 80028d4:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	460b      	mov	r3, r1
 80028dc:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 80028e0:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80028e4:	f001 fb0e 	bl	8003f04 <arm_nn_mat_mult_kernel_q7_q15>
 80028e8:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
                                                  ch_im_out,
                                                  ch_im_in *
                                                  dim_kernel_y * dim_kernel_x, bias_shift, out_shift, bias, pOut);

                /* counter reset */
                pBuffer = bufferA;
 80028ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 80028f4:	f9b7 309c 	ldrsh.w	r3, [r7, #156]	; 0x9c
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	3301      	adds	r3, #1
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002902:	f9b7 209c 	ldrsh.w	r2, [r7, #156]	; 0x9c
 8002906:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 800290a:	429a      	cmp	r2, r3
 800290c:	f6ff af3a 	blt.w	8002784 <arm_convolve_HWC_q7_basic_nonsquare+0x3a>
    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 8002910:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8002914:	b29b      	uxth	r3, r3
 8002916:	3301      	adds	r3, #1
 8002918:	b29b      	uxth	r3, r3
 800291a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 800291e:	f9b7 209e 	ldrsh.w	r2, [r7, #158]	; 0x9e
 8002922:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 8002926:	429a      	cmp	r2, r3
 8002928:	f6ff af28 	blt.w	800277c <arm_convolve_HWC_q7_basic_nonsquare+0x32>
            }
        }
    }

    /* left-over because odd number of output pixels */
    if (pBuffer != bufferA)
 800292c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002934:	429a      	cmp	r2, r3
 8002936:	f000 80fa 	beq.w	8002b2e <arm_convolve_HWC_q7_basic_nonsquare+0x3e4>
    {
        const q7_t *pA = wt;
 800293a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800293e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        int       i;

        for (i = 0; i < ch_im_out; i++)
 8002942:	2300      	movs	r3, #0
 8002944:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002948:	e0ea      	b.n	8002b20 <arm_convolve_HWC_q7_basic_nonsquare+0x3d6>
        {
            /* Load the accumulator with bias first */
            q31_t     sum = ((q31_t)bias[i] << bias_shift) + NN_ROUND(out_shift);
 800294a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800294e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002952:	4413      	add	r3, r2
 8002954:	f993 3000 	ldrsb.w	r3, [r3]
 8002958:	461a      	mov	r2, r3
 800295a:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 800295e:	409a      	lsls	r2, r3
 8002960:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 8002964:	3b01      	subs	r3, #1
 8002966:	2101      	movs	r1, #1
 8002968:	fa01 f303 	lsl.w	r3, r1, r3
 800296c:	4413      	add	r3, r2
 800296e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

            /* Point to the beging of the im2col buffer */
            q15_t    *pB = bufferA;
 8002972:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002976:	61fb      	str	r3, [r7, #28]

            /* Each time it process 4 entries */
            uint16_t  colCnt = ch_im_in * dim_kernel_y * dim_kernel_x >> 2;
 8002978:	88fb      	ldrh	r3, [r7, #6]
 800297a:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 800297e:	fb02 f303 	mul.w	r3, r2, r3
 8002982:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8002986:	fb02 f303 	mul.w	r3, r2, r3
 800298a:	109b      	asrs	r3, r3, #2
 800298c:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

            while (colCnt)
 8002990:	e078      	b.n	8002a84 <arm_convolve_HWC_q7_basic_nonsquare+0x33a>
 8002992:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002996:	613b      	str	r3, [r7, #16]
 8002998:	f107 0318 	add.w	r3, r7, #24
 800299c:	64bb      	str	r3, [r7, #72]	; 0x48
 800299e:	f107 0314 	add.w	r3, r7, #20
 80029a2:	647b      	str	r3, [r7, #68]	; 0x44
        q31_t     inA = *__SIMD32(source)++;
 80029a4:	f107 0210 	add.w	r2, r7, #16
 80029a8:	6813      	ldr	r3, [r2, #0]
 80029aa:	1d19      	adds	r1, r3, #4
 80029ac:	6011      	str	r1, [r2, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	643b      	str	r3, [r7, #64]	; 0x40
        q31_t     inAbuf1 = __SXTB16(__ROR(inA, 8));
 80029b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029b6:	2308      	movs	r3, #8
 80029b8:	63bb      	str	r3, [r7, #56]	; 0x38
  op2 %= 32U;
 80029ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029bc:	f003 031f 	and.w	r3, r3, #31
 80029c0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (op2 == 0U)
 80029c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <arm_convolve_HWC_q7_basic_nonsquare+0x282>
    return op1;
 80029c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029ca:	e003      	b.n	80029d4 <arm_convolve_HWC_q7_basic_nonsquare+0x28a>
  return (op1 >> op2) | (op1 << (32U - op2));
 80029cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d0:	fa62 f303 	ror.w	r3, r2, r3
 80029d4:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80029d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029d8:	fa2f f383 	sxtb16	r3, r3
 80029dc:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80029de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        q31_t     inAbuf2 = __SXTB16(inA);
 80029e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029e4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80029e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e8:	fa2f f383 	sxtb16	r3, r3
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f0:	623b      	str	r3, [r7, #32]
        *out2 = __PKHTB(inAbuf1, inAbuf2, 16);
 80029f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f4:	0c1b      	lsrs	r3, r3, #16
 80029f6:	041b      	lsls	r3, r3, #16
 80029f8:	6a3a      	ldr	r2, [r7, #32]
 80029fa:	0c12      	lsrs	r2, r2, #16
 80029fc:	4313      	orrs	r3, r2
 80029fe:	461a      	mov	r2, r3
 8002a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a02:	601a      	str	r2, [r3, #0]
        *out1 = __PKHBT(inAbuf2, inAbuf1, 16);
 8002a04:	6a3b      	ldr	r3, [r7, #32]
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0a:	041b      	lsls	r3, r3, #16
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	461a      	mov	r2, r3
 8002a10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a12:	601a      	str	r2, [r3, #0]
        return source;
 8002a14:	693b      	ldr	r3, [r7, #16]
            {
                q31_t     inA1, inA2;
                q31_t     inB1, inB2;

                pA = (q7_t *) read_and_pad((void *)pA, &inA1, &inA2);
 8002a16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                inB1 = *__SIMD32(pB)++;
 8002a1a:	f107 021c 	add.w	r2, r7, #28
 8002a1e:	6813      	ldr	r3, [r2, #0]
 8002a20:	1d19      	adds	r1, r3, #4
 8002a22:	6011      	str	r1, [r2, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	673b      	str	r3, [r7, #112]	; 0x70
                sum = __SMLAD(inA1, inB1, sum);
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002a2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a32:	65b9      	str	r1, [r7, #88]	; 0x58
 8002a34:	657a      	str	r2, [r7, #84]	; 0x54
 8002a36:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002a38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a3a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a3c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002a3e:	fb23 1302 	smlad	r3, r3, r2, r1
 8002a42:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8002a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                inB2 = *__SIMD32(pB)++;
 8002a4a:	f107 021c 	add.w	r2, r7, #28
 8002a4e:	6813      	ldr	r3, [r2, #0]
 8002a50:	1d19      	adds	r1, r3, #4
 8002a52:	6011      	str	r1, [r2, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	66fb      	str	r3, [r7, #108]	; 0x6c
                sum = __SMLAD(inA2, inB2, sum);
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a62:	66b9      	str	r1, [r7, #104]	; 0x68
 8002a64:	667a      	str	r2, [r7, #100]	; 0x64
 8002a66:	663b      	str	r3, [r7, #96]	; 0x60
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002a68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a6a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002a6c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002a6e:	fb23 1302 	smlad	r3, r3, r2, r1
 8002a72:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 8002a74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                colCnt--;
 8002a7a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
            while (colCnt)
 8002a84:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d182      	bne.n	8002992 <arm_convolve_HWC_q7_basic_nonsquare+0x248>
            }
            colCnt = ch_im_in * dim_kernel_y * dim_kernel_x & 0x3;
 8002a8c:	88fa      	ldrh	r2, [r7, #6]
 8002a8e:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8002a92:	fb12 f303 	smulbb	r3, r2, r3
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8002a9c:	fb12 f303 	smulbb	r3, r2, r3
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	f003 0303 	and.w	r3, r3, #3
 8002aa6:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
            while (colCnt)
 8002aaa:	e01d      	b.n	8002ae8 <arm_convolve_HWC_q7_basic_nonsquare+0x39e>
            {
                q7_t      inA1 = *pA++;
 8002aac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ab0:	1c5a      	adds	r2, r3, #1
 8002ab2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
                q15_t     inB1 = *pB++;
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	1c9a      	adds	r2, r3, #2
 8002ac0:	61fa      	str	r2, [r7, #28]
 8002ac2:	881b      	ldrh	r3, [r3, #0]
 8002ac4:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
                sum += inA1 * inB1;
 8002ac8:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 8002acc:	f9b7 2074 	ldrsh.w	r2, [r7, #116]	; 0x74
 8002ad0:	fb02 f303 	mul.w	r3, r2, r3
 8002ad4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002ad8:	4413      	add	r3, r2
 8002ada:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                colCnt--;
 8002ade:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
            while (colCnt)
 8002ae8:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1dd      	bne.n	8002aac <arm_convolve_HWC_q7_basic_nonsquare+0x362>
            }
            *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 8002af0:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 8002af4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002af8:	fa42 f303 	asr.w	r3, r2, r3
 8002afc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002afe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b00:	f303 0307 	ssat	r3, #8, r3
 8002b04:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b06:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002b08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b0c:	1c5a      	adds	r2, r3, #1
 8002b0e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8002b12:	b24a      	sxtb	r2, r1
 8002b14:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < ch_im_out; i++)
 8002b16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002b20:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8002b24:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	f6ff af0e 	blt.w	800294a <arm_convolve_HWC_q7_basic_nonsquare+0x200>
    }

#endif                          /* ARM_MATH_DSP */

    /* Return to application */
    return ARM_MATH_SUCCESS;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	37a0      	adds	r7, #160	; 0xa0
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <arm_convolve_HWC_q7_fast>:
                         const uint16_t out_shift,
                         q7_t * Im_out, 
                         const uint16_t dim_im_out, 
                         q15_t * bufferA, 
                         q7_t * bufferB)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b0aa      	sub	sp, #168	; 0xa8
 8002b3c:	af04      	add	r7, sp, #16
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	607b      	str	r3, [r7, #4]
 8002b42:	460b      	mov	r3, r1
 8002b44:	817b      	strh	r3, [r7, #10]
 8002b46:	4613      	mov	r3, r2
 8002b48:	813b      	strh	r3, [r7, #8]
    /*
     *  Here we use bufferA as q15_t internally as computation are done with q15_t level
     *  im2col are done to output in q15_t format from q7_t input
     */

    q15_t    *pBuffer = bufferA;
 8002b4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    q7_t     *pOut = Im_out;
 8002b52:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    if (ch_im_in % 4 != 0 || ch_im_out % 2 != 0)
 8002b5a:	893b      	ldrh	r3, [r7, #8]
 8002b5c:	f003 0303 	and.w	r3, r3, #3
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d106      	bne.n	8002b74 <arm_convolve_HWC_q7_fast+0x3c>
 8002b66:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d003      	beq.n	8002b7c <arm_convolve_HWC_q7_fast+0x44>
    {
        /* check if the input dimension meets the constraints */
        return ARM_MATH_SIZE_MISMATCH;
 8002b74:	f06f 0302 	mvn.w	r3, #2
 8002b78:	f000 bcc8 	b.w	800350c <arm_convolve_HWC_q7_fast+0x9d4>
     * Middle: i_out_y from padding to dim_im_out-padding-1
     * Bottom: i_out_y from dim_im_out-padding to dim_im_out-1
     */

    /* top part */
    for (i_out_y = 0; i_out_y < padding; i_out_y++)
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8002b82:	e0cf      	b.n	8002d24 <arm_convolve_HWC_q7_fast+0x1ec>
    {
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 8002b84:	2300      	movs	r3, #0
 8002b86:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8002b8a:	e0bd      	b.n	8002d08 <arm_convolve_HWC_q7_fast+0x1d0>
        {
            /* This part implements the im2col function */
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 8002b8c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002b90:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8002b94:	fb12 f303 	smulbb	r3, r2, r3
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8002ba6:	e061      	b.n	8002c6c <arm_convolve_HWC_q7_fast+0x134>
            {
                for (i_ker_x = i_out_x * stride - padding; i_ker_x < i_out_x * stride - padding + dim_kernel; i_ker_x++)
 8002ba8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8002bac:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8002bb0:	fb12 f303 	smulbb	r3, r2, r3
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8002bc2:	e03c      	b.n	8002c3e <arm_convolve_HWC_q7_fast+0x106>
                {
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in || i_ker_x < 0 || i_ker_x >= dim_im_in)
 8002bc4:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	db0d      	blt.n	8002be8 <arm_convolve_HWC_q7_fast+0xb0>
 8002bcc:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 8002bd0:	897b      	ldrh	r3, [r7, #10]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	da08      	bge.n	8002be8 <arm_convolve_HWC_q7_fast+0xb0>
 8002bd6:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	db04      	blt.n	8002be8 <arm_convolve_HWC_q7_fast+0xb0>
 8002bde:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 8002be2:	897b      	ldrh	r3, [r7, #10]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	db08      	blt.n	8002bfa <arm_convolve_HWC_q7_fast+0xc2>
                    {
                        /* arm_fill_q15(0, pBuffer, ch_im_in); */
                        memset(pBuffer, 0, sizeof(q15_t)*ch_im_in);
 8002be8:	893b      	ldrh	r3, [r7, #8]
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	461a      	mov	r2, r3
 8002bee:	2100      	movs	r1, #0
 8002bf0:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8002bf4:	f007 fce6 	bl	800a5c4 <memset>
 8002bf8:	e013      	b.n	8002c22 <arm_convolve_HWC_q7_fast+0xea>
                    } else
                    {
                        arm_q7_to_q15_reordered_no_shift
                            ((q7_t *) Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, pBuffer, ch_im_in);
 8002bfa:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8002bfe:	897a      	ldrh	r2, [r7, #10]
 8002c00:	fb02 f203 	mul.w	r2, r2, r3
 8002c04:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8002c08:	4413      	add	r3, r2
 8002c0a:	893a      	ldrh	r2, [r7, #8]
 8002c0c:	fb02 f303 	mul.w	r3, r2, r3
 8002c10:	461a      	mov	r2, r3
                        arm_q7_to_q15_reordered_no_shift
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	4413      	add	r3, r2
 8002c16:	893a      	ldrh	r2, [r7, #8]
 8002c18:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f002 ff11 	bl	8005a44 <arm_q7_to_q15_reordered_no_shift>
                    }
                    pBuffer += ch_im_in;
 8002c22:	893b      	ldrh	r3, [r7, #8]
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002c2a:	4413      	add	r3, r2
 8002c2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                for (i_ker_x = i_out_x * stride - padding; i_ker_x < i_out_x * stride - padding + dim_kernel; i_ker_x++)
 8002c30:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	3301      	adds	r3, #1
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8002c3e:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 8002c42:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8002c46:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8002c4a:	fb01 f103 	mul.w	r1, r1, r3
 8002c4e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8002c52:	1ac9      	subs	r1, r1, r3
 8002c54:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002c58:	440b      	add	r3, r1
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	dbb2      	blt.n	8002bc4 <arm_convolve_HWC_q7_fast+0x8c>
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 8002c5e:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	3301      	adds	r3, #1
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8002c6c:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 8002c70:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8002c74:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8002c78:	fb01 f103 	mul.w	r1, r1, r3
 8002c7c:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8002c80:	1ac9      	subs	r1, r1, r3
 8002c82:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002c86:	440b      	add	r3, r1
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	db8d      	blt.n	8002ba8 <arm_convolve_HWC_q7_fast+0x70>
                }
            }

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 8002c8c:	893b      	ldrh	r3, [r7, #8]
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8002c94:	fb02 f303 	mul.w	r3, r2, r3
 8002c98:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8002c9c:	fb02 f303 	mul.w	r3, r2, r3
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ca6:	4413      	add	r3, r2
 8002ca8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d124      	bne.n	8002cfa <arm_convolve_HWC_q7_fast+0x1c2>
            {
                pOut =
                    arm_nn_mat_mult_kernel_q7_q15_reordered(wt,
 8002cb0:	893a      	ldrh	r2, [r7, #8]
 8002cb2:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002cb6:	fb12 f303 	smulbb	r3, r2, r3
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8002cc0:	fb12 f303 	smulbb	r3, r2, r3
 8002cc4:	b299      	uxth	r1, r3
                pOut =
 8002cc6:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8002cca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cce:	9303      	str	r3, [sp, #12]
 8002cd0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002cd4:	9302      	str	r3, [sp, #8]
 8002cd6:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8002cda:	9301      	str	r3, [sp, #4]
 8002cdc:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f001 fe78 	bl	80049de <arm_nn_mat_mult_kernel_q7_q15_reordered>
 8002cee:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                                                            ch_im_out,
                                                            ch_im_in
                                                            *
                                                            dim_kernel * dim_kernel, bias_shift, out_shift, bias, pOut);
                /* counter reset */
                pBuffer = bufferA;
 8002cf2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cf6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 8002cfa:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	3301      	adds	r3, #1
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8002d08:	f9b7 2094 	ldrsh.w	r2, [r7, #148]	; 0x94
 8002d0c:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8002d10:	429a      	cmp	r2, r3
 8002d12:	f6ff af3b 	blt.w	8002b8c <arm_convolve_HWC_q7_fast+0x54>
    for (i_out_y = 0; i_out_y < padding; i_out_y++)
 8002d16:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8002d24:	f9b7 2096 	ldrsh.w	r2, [r7, #150]	; 0x96
 8002d28:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	f6ff af29 	blt.w	8002b84 <arm_convolve_HWC_q7_fast+0x4c>
            }
        }
    }

    /* middle part, here we also divide the x into left, mid and right */
    for (; i_out_y < dim_im_out - padding; i_out_y++)
 8002d32:	e21b      	b.n	800316c <arm_convolve_HWC_q7_fast+0x634>
    {

        /* left part */
        for (i_out_x = 0; i_out_x < padding; i_out_x++)
 8002d34:	2300      	movs	r3, #0
 8002d36:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8002d3a:	e0b4      	b.n	8002ea6 <arm_convolve_HWC_q7_fast+0x36e>
        {
            /* This part implements the im2col function */
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 8002d3c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002d40:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8002d44:	fb12 f303 	smulbb	r3, r2, r3
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8002d56:	e058      	b.n	8002e0a <arm_convolve_HWC_q7_fast+0x2d2>
            {
                for (i_ker_x = i_out_x * stride - padding; i_ker_x < i_out_x * stride - padding + dim_kernel; i_ker_x++)
 8002d58:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8002d5c:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8002d60:	fb12 f303 	smulbb	r3, r2, r3
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8002d72:	e033      	b.n	8002ddc <arm_convolve_HWC_q7_fast+0x2a4>
                {
                    if (i_ker_x < 0 || i_ker_x >= dim_im_in)
 8002d74:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	db04      	blt.n	8002d86 <arm_convolve_HWC_q7_fast+0x24e>
 8002d7c:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 8002d80:	897b      	ldrh	r3, [r7, #10]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	db08      	blt.n	8002d98 <arm_convolve_HWC_q7_fast+0x260>
                    {
                        /* arm_fill_q15(0, pBuffer, ch_im_in); */
                        memset(pBuffer, 0, sizeof(q15_t)*ch_im_in);
 8002d86:	893b      	ldrh	r3, [r7, #8]
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8002d92:	f007 fc17 	bl	800a5c4 <memset>
 8002d96:	e013      	b.n	8002dc0 <arm_convolve_HWC_q7_fast+0x288>
                    } else
                    {
                        arm_q7_to_q15_reordered_no_shift
                            ((q7_t *) Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, pBuffer, ch_im_in);
 8002d98:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8002d9c:	897a      	ldrh	r2, [r7, #10]
 8002d9e:	fb02 f203 	mul.w	r2, r2, r3
 8002da2:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8002da6:	4413      	add	r3, r2
 8002da8:	893a      	ldrh	r2, [r7, #8]
 8002daa:	fb02 f303 	mul.w	r3, r2, r3
 8002dae:	461a      	mov	r2, r3
                        arm_q7_to_q15_reordered_no_shift
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4413      	add	r3, r2
 8002db4:	893a      	ldrh	r2, [r7, #8]
 8002db6:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f002 fe42 	bl	8005a44 <arm_q7_to_q15_reordered_no_shift>
                    }
                    pBuffer += ch_im_in;
 8002dc0:	893b      	ldrh	r3, [r7, #8]
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002dc8:	4413      	add	r3, r2
 8002dca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                for (i_ker_x = i_out_x * stride - padding; i_ker_x < i_out_x * stride - padding + dim_kernel; i_ker_x++)
 8002dce:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8002ddc:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 8002de0:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8002de4:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8002de8:	fb01 f103 	mul.w	r1, r1, r3
 8002dec:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8002df0:	1ac9      	subs	r1, r1, r3
 8002df2:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002df6:	440b      	add	r3, r1
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	dbbb      	blt.n	8002d74 <arm_convolve_HWC_q7_fast+0x23c>
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 8002dfc:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	3301      	adds	r3, #1
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8002e0a:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 8002e0e:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8002e12:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8002e16:	fb01 f103 	mul.w	r1, r1, r3
 8002e1a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8002e1e:	1ac9      	subs	r1, r1, r3
 8002e20:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002e24:	440b      	add	r3, r1
 8002e26:	429a      	cmp	r2, r3
 8002e28:	db96      	blt.n	8002d58 <arm_convolve_HWC_q7_fast+0x220>
                }
            }

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 8002e2a:	893b      	ldrh	r3, [r7, #8]
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8002e32:	fb02 f303 	mul.w	r3, r2, r3
 8002e36:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8002e3a:	fb02 f303 	mul.w	r3, r2, r3
 8002e3e:	461a      	mov	r2, r3
 8002e40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e44:	4413      	add	r3, r2
 8002e46:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d124      	bne.n	8002e98 <arm_convolve_HWC_q7_fast+0x360>
            {
                pOut =
                    arm_nn_mat_mult_kernel_q7_q15_reordered(wt,
 8002e4e:	893a      	ldrh	r2, [r7, #8]
 8002e50:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002e54:	fb12 f303 	smulbb	r3, r2, r3
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8002e5e:	fb12 f303 	smulbb	r3, r2, r3
 8002e62:	b299      	uxth	r1, r3
                pOut =
 8002e64:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8002e68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e6c:	9303      	str	r3, [sp, #12]
 8002e6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e72:	9302      	str	r3, [sp, #8]
 8002e74:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8002e78:	9301      	str	r3, [sp, #4]
 8002e7a:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	460b      	mov	r3, r1
 8002e82:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f001 fda9 	bl	80049de <arm_nn_mat_mult_kernel_q7_q15_reordered>
 8002e8c:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                                                            ch_im_out,
                                                            ch_im_in
                                                            *
                                                            dim_kernel * dim_kernel, bias_shift, out_shift, bias, pOut);
                /* counter reset */
                pBuffer = bufferA;
 8002e90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        for (i_out_x = 0; i_out_x < padding; i_out_x++)
 8002e98:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8002ea6:	f9b7 2094 	ldrsh.w	r2, [r7, #148]	; 0x94
 8002eaa:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	f6ff af44 	blt.w	8002d3c <arm_convolve_HWC_q7_fast+0x204>
            }
        }

        /* mid part */
        for (; i_out_x < dim_im_out - padding; i_out_x++)
 8002eb4:	e08c      	b.n	8002fd0 <arm_convolve_HWC_q7_fast+0x498>
        {
            /* This part implements the im2col function */
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 8002eb6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002eba:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8002ebe:	fb12 f303 	smulbb	r3, r2, r3
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8002ed0:	e030      	b.n	8002f34 <arm_convolve_HWC_q7_fast+0x3fc>
            {
                arm_q7_to_q15_reordered_no_shift((q7_t *) Im_in
                                                 +
                                                 (i_ker_y *
 8002ed2:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8002ed6:	897a      	ldrh	r2, [r7, #10]
 8002ed8:	fb02 f203 	mul.w	r2, r2, r3
                                                  dim_im_in +
                                                  i_out_x *
 8002edc:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8002ee0:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8002ee4:	fb01 f303 	mul.w	r3, r1, r3
                                                  dim_im_in +
 8002ee8:	441a      	add	r2, r3
                                                  stride - padding) * ch_im_in, pBuffer, ch_im_in * dim_kernel);
 8002eea:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	893a      	ldrh	r2, [r7, #8]
 8002ef2:	fb02 f303 	mul.w	r3, r2, r3
 8002ef6:	461a      	mov	r2, r3
                arm_q7_to_q15_reordered_no_shift((q7_t *) Im_in
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	1898      	adds	r0, r3, r2
                                                  stride - padding) * ch_im_in, pBuffer, ch_im_in * dim_kernel);
 8002efc:	893b      	ldrh	r3, [r7, #8]
 8002efe:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8002f02:	fb02 f303 	mul.w	r3, r2, r3
                arm_q7_to_q15_reordered_no_shift((q7_t *) Im_in
 8002f06:	461a      	mov	r2, r3
 8002f08:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8002f0c:	f002 fd9a 	bl	8005a44 <arm_q7_to_q15_reordered_no_shift>
                pBuffer += ch_im_in * dim_kernel;
 8002f10:	893b      	ldrh	r3, [r7, #8]
 8002f12:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8002f16:	fb02 f303 	mul.w	r3, r2, r3
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002f20:	4413      	add	r3, r2
 8002f22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 8002f26:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8002f34:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 8002f38:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8002f3c:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8002f40:	fb01 f103 	mul.w	r1, r1, r3
 8002f44:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8002f48:	1ac9      	subs	r1, r1, r3
 8002f4a:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002f4e:	440b      	add	r3, r1
 8002f50:	429a      	cmp	r2, r3
 8002f52:	dbbe      	blt.n	8002ed2 <arm_convolve_HWC_q7_fast+0x39a>
            }

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 8002f54:	893b      	ldrh	r3, [r7, #8]
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8002f5c:	fb02 f303 	mul.w	r3, r2, r3
 8002f60:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8002f64:	fb02 f303 	mul.w	r3, r2, r3
 8002f68:	461a      	mov	r2, r3
 8002f6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f6e:	4413      	add	r3, r2
 8002f70:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d124      	bne.n	8002fc2 <arm_convolve_HWC_q7_fast+0x48a>
            {
                pOut =
                    arm_nn_mat_mult_kernel_q7_q15_reordered(wt,
 8002f78:	893a      	ldrh	r2, [r7, #8]
 8002f7a:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002f7e:	fb12 f303 	smulbb	r3, r2, r3
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8002f88:	fb12 f303 	smulbb	r3, r2, r3
 8002f8c:	b299      	uxth	r1, r3
                pOut =
 8002f8e:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8002f92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f96:	9303      	str	r3, [sp, #12]
 8002f98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002f9c:	9302      	str	r3, [sp, #8]
 8002f9e:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8002fa2:	9301      	str	r3, [sp, #4]
 8002fa4:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8002fa8:	9300      	str	r3, [sp, #0]
 8002faa:	460b      	mov	r3, r1
 8002fac:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f001 fd14 	bl	80049de <arm_nn_mat_mult_kernel_q7_q15_reordered>
 8002fb6:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                                                            ch_im_out,
                                                            ch_im_in
                                                            *
                                                            dim_kernel * dim_kernel, bias_shift, out_shift, bias, pOut);
                /* counter reset */
                pBuffer = bufferA;
 8002fba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        for (; i_out_x < dim_im_out - padding; i_out_x++)
 8002fc2:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	3301      	adds	r3, #1
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8002fd0:	f9b7 2094 	ldrsh.w	r2, [r7, #148]	; 0x94
 8002fd4:	f8b7 10c0 	ldrh.w	r1, [r7, #192]	; 0xc0
 8002fd8:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8002fdc:	1acb      	subs	r3, r1, r3
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	f6ff af69 	blt.w	8002eb6 <arm_convolve_HWC_q7_fast+0x37e>
            }
        }

        /* right part */
        for (; i_out_x < dim_im_out; i_out_x++)
 8002fe4:	e0b4      	b.n	8003150 <arm_convolve_HWC_q7_fast+0x618>
        {
            /* This part implements the im2col function */
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 8002fe6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002fea:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8002fee:	fb12 f303 	smulbb	r3, r2, r3
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8003000:	e058      	b.n	80030b4 <arm_convolve_HWC_q7_fast+0x57c>
            {
                for (i_ker_x = i_out_x * stride - padding; i_ker_x < i_out_x * stride - padding + dim_kernel; i_ker_x++)
 8003002:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8003006:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 800300a:	fb12 f303 	smulbb	r3, r2, r3
 800300e:	b29a      	uxth	r2, r3
 8003010:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	b29b      	uxth	r3, r3
 8003018:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 800301c:	e033      	b.n	8003086 <arm_convolve_HWC_q7_fast+0x54e>
                {
                    if (i_ker_x < 0 || i_ker_x >= dim_im_in)
 800301e:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8003022:	2b00      	cmp	r3, #0
 8003024:	db04      	blt.n	8003030 <arm_convolve_HWC_q7_fast+0x4f8>
 8003026:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 800302a:	897b      	ldrh	r3, [r7, #10]
 800302c:	429a      	cmp	r2, r3
 800302e:	db08      	blt.n	8003042 <arm_convolve_HWC_q7_fast+0x50a>
                    {
                        /* arm_fill_q15(0, pBuffer, ch_im_in); */
                        memset(pBuffer, 0, sizeof(q15_t)*ch_im_in);
 8003030:	893b      	ldrh	r3, [r7, #8]
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	461a      	mov	r2, r3
 8003036:	2100      	movs	r1, #0
 8003038:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800303c:	f007 fac2 	bl	800a5c4 <memset>
 8003040:	e013      	b.n	800306a <arm_convolve_HWC_q7_fast+0x532>
                    } else
                    {
                        arm_q7_to_q15_reordered_no_shift
                            ((q7_t *) Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, pBuffer, ch_im_in);
 8003042:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8003046:	897a      	ldrh	r2, [r7, #10]
 8003048:	fb02 f203 	mul.w	r2, r2, r3
 800304c:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8003050:	4413      	add	r3, r2
 8003052:	893a      	ldrh	r2, [r7, #8]
 8003054:	fb02 f303 	mul.w	r3, r2, r3
 8003058:	461a      	mov	r2, r3
                        arm_q7_to_q15_reordered_no_shift
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	4413      	add	r3, r2
 800305e:	893a      	ldrh	r2, [r7, #8]
 8003060:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8003064:	4618      	mov	r0, r3
 8003066:	f002 fced 	bl	8005a44 <arm_q7_to_q15_reordered_no_shift>
                    }
                    pBuffer += ch_im_in;
 800306a:	893b      	ldrh	r3, [r7, #8]
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003072:	4413      	add	r3, r2
 8003074:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                for (i_ker_x = i_out_x * stride - padding; i_ker_x < i_out_x * stride - padding + dim_kernel; i_ker_x++)
 8003078:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 800307c:	b29b      	uxth	r3, r3
 800307e:	3301      	adds	r3, #1
 8003080:	b29b      	uxth	r3, r3
 8003082:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8003086:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 800308a:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 800308e:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8003092:	fb01 f103 	mul.w	r1, r1, r3
 8003096:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800309a:	1ac9      	subs	r1, r1, r3
 800309c:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80030a0:	440b      	add	r3, r1
 80030a2:	429a      	cmp	r2, r3
 80030a4:	dbbb      	blt.n	800301e <arm_convolve_HWC_q7_fast+0x4e6>
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 80030a6:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	3301      	adds	r3, #1
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 80030b4:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 80030b8:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 80030bc:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 80030c0:	fb01 f103 	mul.w	r1, r1, r3
 80030c4:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80030c8:	1ac9      	subs	r1, r1, r3
 80030ca:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80030ce:	440b      	add	r3, r1
 80030d0:	429a      	cmp	r2, r3
 80030d2:	db96      	blt.n	8003002 <arm_convolve_HWC_q7_fast+0x4ca>
                }
            }

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 80030d4:	893b      	ldrh	r3, [r7, #8]
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80030dc:	fb02 f303 	mul.w	r3, r2, r3
 80030e0:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80030e4:	fb02 f303 	mul.w	r3, r2, r3
 80030e8:	461a      	mov	r2, r3
 80030ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030ee:	4413      	add	r3, r2
 80030f0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d124      	bne.n	8003142 <arm_convolve_HWC_q7_fast+0x60a>
            {
                pOut =
                    arm_nn_mat_mult_kernel_q7_q15_reordered(wt,
 80030f8:	893a      	ldrh	r2, [r7, #8]
 80030fa:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80030fe:	fb12 f303 	smulbb	r3, r2, r3
 8003102:	b29b      	uxth	r3, r3
 8003104:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8003108:	fb12 f303 	smulbb	r3, r2, r3
 800310c:	b299      	uxth	r1, r3
                pOut =
 800310e:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8003112:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003116:	9303      	str	r3, [sp, #12]
 8003118:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800311c:	9302      	str	r3, [sp, #8]
 800311e:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8003122:	9301      	str	r3, [sp, #4]
 8003124:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	460b      	mov	r3, r1
 800312c:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f001 fc54 	bl	80049de <arm_nn_mat_mult_kernel_q7_q15_reordered>
 8003136:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                                                            ch_im_out,
                                                            ch_im_in
                                                            *
                                                            dim_kernel * dim_kernel, bias_shift, out_shift, bias, pOut);
                /* counter reset */
                pBuffer = bufferA;
 800313a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800313e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        for (; i_out_x < dim_im_out; i_out_x++)
 8003142:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8003146:	b29b      	uxth	r3, r3
 8003148:	3301      	adds	r3, #1
 800314a:	b29b      	uxth	r3, r3
 800314c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8003150:	f9b7 2094 	ldrsh.w	r2, [r7, #148]	; 0x94
 8003154:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8003158:	429a      	cmp	r2, r3
 800315a:	f6ff af44 	blt.w	8002fe6 <arm_convolve_HWC_q7_fast+0x4ae>
    for (; i_out_y < dim_im_out - padding; i_out_y++)
 800315e:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8003162:	b29b      	uxth	r3, r3
 8003164:	3301      	adds	r3, #1
 8003166:	b29b      	uxth	r3, r3
 8003168:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800316c:	f9b7 2096 	ldrsh.w	r2, [r7, #150]	; 0x96
 8003170:	f8b7 10c0 	ldrh.w	r1, [r7, #192]	; 0xc0
 8003174:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8003178:	1acb      	subs	r3, r1, r3
 800317a:	429a      	cmp	r2, r3
 800317c:	f6ff adda 	blt.w	8002d34 <arm_convolve_HWC_q7_fast+0x1fc>
            }
        }
    }

    for (; i_out_y < dim_im_out; i_out_y++)
 8003180:	e0cf      	b.n	8003322 <arm_convolve_HWC_q7_fast+0x7ea>
    {
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 8003182:	2300      	movs	r3, #0
 8003184:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8003188:	e0bd      	b.n	8003306 <arm_convolve_HWC_q7_fast+0x7ce>
        {
            /* This part implements the im2col function */
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 800318a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800318e:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8003192:	fb12 f303 	smulbb	r3, r2, r3
 8003196:	b29a      	uxth	r2, r3
 8003198:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	b29b      	uxth	r3, r3
 80031a0:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 80031a4:	e061      	b.n	800326a <arm_convolve_HWC_q7_fast+0x732>
            {
                for (i_ker_x = i_out_x * stride - padding; i_ker_x < i_out_x * stride - padding + dim_kernel; i_ker_x++)
 80031a6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80031aa:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 80031ae:	fb12 f303 	smulbb	r3, r2, r3
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 80031c0:	e03c      	b.n	800323c <arm_convolve_HWC_q7_fast+0x704>
                {
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in || i_ker_x < 0 || i_ker_x >= dim_im_in)
 80031c2:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	db0d      	blt.n	80031e6 <arm_convolve_HWC_q7_fast+0x6ae>
 80031ca:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 80031ce:	897b      	ldrh	r3, [r7, #10]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	da08      	bge.n	80031e6 <arm_convolve_HWC_q7_fast+0x6ae>
 80031d4:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 80031d8:	2b00      	cmp	r3, #0
 80031da:	db04      	blt.n	80031e6 <arm_convolve_HWC_q7_fast+0x6ae>
 80031dc:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 80031e0:	897b      	ldrh	r3, [r7, #10]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	db08      	blt.n	80031f8 <arm_convolve_HWC_q7_fast+0x6c0>
                    {
                        /* arm_fill_q15(0, pBuffer, ch_im_in); */
                        memset(pBuffer, 0, sizeof(q15_t)*ch_im_in);
 80031e6:	893b      	ldrh	r3, [r7, #8]
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	461a      	mov	r2, r3
 80031ec:	2100      	movs	r1, #0
 80031ee:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80031f2:	f007 f9e7 	bl	800a5c4 <memset>
 80031f6:	e013      	b.n	8003220 <arm_convolve_HWC_q7_fast+0x6e8>
                    } else
                    {
                        arm_q7_to_q15_reordered_no_shift
                            ((q7_t *) Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, pBuffer, ch_im_in);
 80031f8:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 80031fc:	897a      	ldrh	r2, [r7, #10]
 80031fe:	fb02 f203 	mul.w	r2, r2, r3
 8003202:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8003206:	4413      	add	r3, r2
 8003208:	893a      	ldrh	r2, [r7, #8]
 800320a:	fb02 f303 	mul.w	r3, r2, r3
 800320e:	461a      	mov	r2, r3
                        arm_q7_to_q15_reordered_no_shift
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4413      	add	r3, r2
 8003214:	893a      	ldrh	r2, [r7, #8]
 8003216:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800321a:	4618      	mov	r0, r3
 800321c:	f002 fc12 	bl	8005a44 <arm_q7_to_q15_reordered_no_shift>
                    }
                    pBuffer += ch_im_in;
 8003220:	893b      	ldrh	r3, [r7, #8]
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003228:	4413      	add	r3, r2
 800322a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                for (i_ker_x = i_out_x * stride - padding; i_ker_x < i_out_x * stride - padding + dim_kernel; i_ker_x++)
 800322e:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8003232:	b29b      	uxth	r3, r3
 8003234:	3301      	adds	r3, #1
 8003236:	b29b      	uxth	r3, r3
 8003238:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 800323c:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 8003240:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8003244:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8003248:	fb01 f103 	mul.w	r1, r1, r3
 800324c:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8003250:	1ac9      	subs	r1, r1, r3
 8003252:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8003256:	440b      	add	r3, r1
 8003258:	429a      	cmp	r2, r3
 800325a:	dbb2      	blt.n	80031c2 <arm_convolve_HWC_q7_fast+0x68a>
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 800325c:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8003260:	b29b      	uxth	r3, r3
 8003262:	3301      	adds	r3, #1
 8003264:	b29b      	uxth	r3, r3
 8003266:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 800326a:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 800326e:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8003272:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8003276:	fb01 f103 	mul.w	r1, r1, r3
 800327a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800327e:	1ac9      	subs	r1, r1, r3
 8003280:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8003284:	440b      	add	r3, r1
 8003286:	429a      	cmp	r2, r3
 8003288:	db8d      	blt.n	80031a6 <arm_convolve_HWC_q7_fast+0x66e>
                }
            }

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 800328a:	893b      	ldrh	r3, [r7, #8]
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8003292:	fb02 f303 	mul.w	r3, r2, r3
 8003296:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800329a:	fb02 f303 	mul.w	r3, r2, r3
 800329e:	461a      	mov	r2, r3
 80032a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032a4:	4413      	add	r3, r2
 80032a6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d124      	bne.n	80032f8 <arm_convolve_HWC_q7_fast+0x7c0>
            {
                pOut =
                    arm_nn_mat_mult_kernel_q7_q15_reordered(wt,
 80032ae:	893a      	ldrh	r2, [r7, #8]
 80032b0:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80032b4:	fb12 f303 	smulbb	r3, r2, r3
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80032be:	fb12 f303 	smulbb	r3, r2, r3
 80032c2:	b299      	uxth	r1, r3
                pOut =
 80032c4:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 80032c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032cc:	9303      	str	r3, [sp, #12]
 80032ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80032d2:	9302      	str	r3, [sp, #8]
 80032d4:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 80032d8:	9301      	str	r3, [sp, #4]
 80032da:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	460b      	mov	r3, r1
 80032e2:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f001 fb79 	bl	80049de <arm_nn_mat_mult_kernel_q7_q15_reordered>
 80032ec:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                                                            ch_im_out,
                                                            ch_im_in
                                                            *
                                                            dim_kernel * dim_kernel, bias_shift, out_shift, bias, pOut);
                /* counter reset */
                pBuffer = bufferA;
 80032f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 80032f8:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	3301      	adds	r3, #1
 8003300:	b29b      	uxth	r3, r3
 8003302:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8003306:	f9b7 2094 	ldrsh.w	r2, [r7, #148]	; 0x94
 800330a:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800330e:	429a      	cmp	r2, r3
 8003310:	f6ff af3b 	blt.w	800318a <arm_convolve_HWC_q7_fast+0x652>
    for (; i_out_y < dim_im_out; i_out_y++)
 8003314:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8003318:	b29b      	uxth	r3, r3
 800331a:	3301      	adds	r3, #1
 800331c:	b29b      	uxth	r3, r3
 800331e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8003322:	f9b7 2096 	ldrsh.w	r2, [r7, #150]	; 0x96
 8003326:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800332a:	429a      	cmp	r2, r3
 800332c:	f6ff af29 	blt.w	8003182 <arm_convolve_HWC_q7_fast+0x64a>
            }
        }
    }

    /* check if there is left-over for compute */
    if (pBuffer != bufferA)
 8003330:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003334:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003338:	429a      	cmp	r2, r3
 800333a:	f000 80e6 	beq.w	800350a <arm_convolve_HWC_q7_fast+0x9d2>
    {
        const q7_t *pA = wt;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        int       i;

        for (i = 0; i < ch_im_out; i++)
 8003344:	2300      	movs	r3, #0
 8003346:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800334a:	e0d7      	b.n	80034fc <arm_convolve_HWC_q7_fast+0x9c4>
        {
            q31_t     sum = ((q31_t)bias[i] << bias_shift) + NN_ROUND(out_shift);
 800334c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003350:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003354:	4413      	add	r3, r2
 8003356:	f993 3000 	ldrsb.w	r3, [r3]
 800335a:	461a      	mov	r2, r3
 800335c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8003360:	409a      	lsls	r2, r3
 8003362:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8003366:	3b01      	subs	r3, #1
 8003368:	2101      	movs	r1, #1
 800336a:	fa01 f303 	lsl.w	r3, r1, r3
 800336e:	4413      	add	r3, r2
 8003370:	67fb      	str	r3, [r7, #124]	; 0x7c
            q15_t    *pB = bufferA;
 8003372:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003376:	61fb      	str	r3, [r7, #28]
            /* each time it process 4 entries */
            uint16_t  colCnt = ch_im_in * dim_kernel * dim_kernel >> 2;
 8003378:	893b      	ldrh	r3, [r7, #8]
 800337a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800337e:	fb02 f303 	mul.w	r3, r2, r3
 8003382:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8003386:	fb02 f303 	mul.w	r3, r2, r3
 800338a:	109b      	asrs	r3, r3, #2
 800338c:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

            while (colCnt)
 8003390:	e067      	b.n	8003462 <arm_convolve_HWC_q7_fast+0x92a>
 8003392:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003396:	613b      	str	r3, [r7, #16]
 8003398:	f107 0318 	add.w	r3, r7, #24
 800339c:	643b      	str	r3, [r7, #64]	; 0x40
 800339e:	f107 0314 	add.w	r3, r7, #20
 80033a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        q31_t     inA = *__SIMD32(source)++;
 80033a4:	f107 0210 	add.w	r2, r7, #16
 80033a8:	6813      	ldr	r3, [r2, #0]
 80033aa:	1d19      	adds	r1, r3, #4
 80033ac:	6011      	str	r1, [r2, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	63bb      	str	r3, [r7, #56]	; 0x38
        *out2 = __SXTB16(__ROR(inA, 8));
 80033b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b4:	637b      	str	r3, [r7, #52]	; 0x34
 80033b6:	2308      	movs	r3, #8
 80033b8:	633b      	str	r3, [r7, #48]	; 0x30
  op2 %= 32U;
 80033ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033bc:	f003 031f 	and.w	r3, r3, #31
 80033c0:	633b      	str	r3, [r7, #48]	; 0x30
  if (op2 == 0U)
 80033c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <arm_convolve_HWC_q7_fast+0x894>
    return op1;
 80033c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ca:	e003      	b.n	80033d4 <arm_convolve_HWC_q7_fast+0x89c>
  return (op1 >> op2) | (op1 << (32U - op2));
 80033cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d0:	fa62 f303 	ror.w	r3, r2, r3
 80033d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80033d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d8:	fa2f f383 	sxtb16	r3, r3
 80033dc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80033de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e0:	461a      	mov	r2, r3
 80033e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033e4:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 80033e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80033ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ec:	fa2f f383 	sxtb16	r3, r3
 80033f0:	623b      	str	r3, [r7, #32]
  return(result);
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	461a      	mov	r2, r3
 80033f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033f8:	601a      	str	r2, [r3, #0]
        return source;
 80033fa:	693b      	ldr	r3, [r7, #16]
            {

                q31_t     inA1, inA2;
                q31_t     inB1, inB2;

                pA = (q7_t *) read_and_pad_reordered((void *)pA, &inA1, &inA2);
 80033fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                inB1 = *__SIMD32(pB)++;
 8003400:	f107 021c 	add.w	r2, r7, #28
 8003404:	6813      	ldr	r3, [r2, #0]
 8003406:	1d19      	adds	r1, r3, #4
 8003408:	6011      	str	r1, [r2, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	66bb      	str	r3, [r7, #104]	; 0x68
                sum = __SMLAD(inA1, inB1, sum);
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	4619      	mov	r1, r3
 8003412:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003414:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003416:	6539      	str	r1, [r7, #80]	; 0x50
 8003418:	64fa      	str	r2, [r7, #76]	; 0x4c
 800341a:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800341c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800341e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003420:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003422:	fb23 1302 	smlad	r3, r3, r2, r1
 8003426:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 8003428:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800342a:	67fb      	str	r3, [r7, #124]	; 0x7c
                inB2 = *__SIMD32(pB)++;
 800342c:	f107 021c 	add.w	r2, r7, #28
 8003430:	6813      	ldr	r3, [r2, #0]
 8003432:	1d19      	adds	r1, r3, #4
 8003434:	6011      	str	r1, [r2, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	667b      	str	r3, [r7, #100]	; 0x64
                sum = __SMLAD(inA2, inB2, sum);
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	4619      	mov	r1, r3
 800343e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003440:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003442:	6639      	str	r1, [r7, #96]	; 0x60
 8003444:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003446:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8003448:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800344a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800344c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800344e:	fb23 1302 	smlad	r3, r3, r2, r1
 8003452:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003454:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003456:	67fb      	str	r3, [r7, #124]	; 0x7c

                colCnt--;
 8003458:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800345c:	3b01      	subs	r3, #1
 800345e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
            while (colCnt)
 8003462:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8003466:	2b00      	cmp	r3, #0
 8003468:	d193      	bne.n	8003392 <arm_convolve_HWC_q7_fast+0x85a>
            }
            colCnt = ch_im_in * dim_kernel * dim_kernel & 0x3;
 800346a:	893a      	ldrh	r2, [r7, #8]
 800346c:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8003470:	fb12 f303 	smulbb	r3, r2, r3
 8003474:	b29b      	uxth	r3, r3
 8003476:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800347a:	fb12 f303 	smulbb	r3, r2, r3
 800347e:	b29b      	uxth	r3, r3
 8003480:	f003 0303 	and.w	r3, r3, #3
 8003484:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
            while (colCnt)
 8003488:	e01b      	b.n	80034c2 <arm_convolve_HWC_q7_fast+0x98a>
            {
                q7_t      inA1 = *pA++;
 800348a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800348e:	1c5a      	adds	r2, r3, #1
 8003490:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                q15_t     inB1 = *pB++;
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	1c9a      	adds	r2, r3, #2
 800349e:	61fa      	str	r2, [r7, #28]
 80034a0:	881b      	ldrh	r3, [r3, #0]
 80034a2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
                sum += inA1 * inB1;
 80034a6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80034aa:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 80034ae:	fb02 f303 	mul.w	r3, r2, r3
 80034b2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80034b4:	4413      	add	r3, r2
 80034b6:	67fb      	str	r3, [r7, #124]	; 0x7c
                colCnt--;
 80034b8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80034bc:	3b01      	subs	r3, #1
 80034be:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
            while (colCnt)
 80034c2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1df      	bne.n	800348a <arm_convolve_HWC_q7_fast+0x952>
            }
            *pOut = (q7_t) __SSAT((sum >> out_shift), 8);
 80034ca:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 80034ce:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80034d0:	fa42 f303 	asr.w	r3, r2, r3
 80034d4:	677b      	str	r3, [r7, #116]	; 0x74
 80034d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034d8:	f303 0307 	ssat	r3, #8, r3
 80034dc:	673b      	str	r3, [r7, #112]	; 0x70
 80034de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034e0:	b25a      	sxtb	r2, r3
 80034e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034e6:	701a      	strb	r2, [r3, #0]
            pOut++;
 80034e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034ec:	3301      	adds	r3, #1
 80034ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (i = 0; i < ch_im_out; i++)
 80034f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80034f6:	3301      	adds	r3, #1
 80034f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034fc:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8003500:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003504:	429a      	cmp	r2, r3
 8003506:	f6ff af21 	blt.w	800334c <arm_convolve_HWC_q7_fast+0x814>
    }

#endif                          /* ARM_MATH_DSP */

    /* Return to application */
    return ARM_MATH_SUCCESS;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3798      	adds	r7, #152	; 0x98
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <arm_convolve_HWC_q7_fast_nonsquare>:
                                              q7_t * Im_out,
                                              const uint16_t dim_im_out_x,
                                              const uint16_t dim_im_out_y, 
                                              q15_t * bufferA, 
                                              q7_t * bufferB)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b0aa      	sub	sp, #168	; 0xa8
 8003518:	af04      	add	r7, sp, #16
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	4608      	mov	r0, r1
 800351e:	4611      	mov	r1, r2
 8003520:	461a      	mov	r2, r3
 8003522:	4603      	mov	r3, r0
 8003524:	817b      	strh	r3, [r7, #10]
 8003526:	460b      	mov	r3, r1
 8003528:	813b      	strh	r3, [r7, #8]
 800352a:	4613      	mov	r3, r2
 800352c:	80fb      	strh	r3, [r7, #6]
    /* -----------------------
     *  Here we use bufferA as q15_t internally as computation are done with q15_t level
     *  im2col are done to output in q15_t format from q7_t input
     */

    q15_t    *pBuffer = bufferA;
 800352e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003532:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    q7_t     *pOut = Im_out;
 8003536:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800353a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    if (ch_im_in % 4 != 0 || ch_im_out % 2 != 0)
 800353e:	88fb      	ldrh	r3, [r7, #6]
 8003540:	f003 0303 	and.w	r3, r3, #3
 8003544:	b29b      	uxth	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d106      	bne.n	8003558 <arm_convolve_HWC_q7_fast_nonsquare+0x44>
 800354a:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	b29b      	uxth	r3, r3
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <arm_convolve_HWC_q7_fast_nonsquare+0x4c>
    {
        /* check if the input dimension meets the constraints */
        return ARM_MATH_SIZE_MISMATCH;
 8003558:	f06f 0302 	mvn.w	r3, #2
 800355c:	f000 bcce 	b.w	8003efc <arm_convolve_HWC_q7_fast_nonsquare+0x9e8>
     * Middle: i_out_y from padding to dim_im_out-padding-1
     * Bottom: i_out_y from dim_im_out-padding to dim_im_out-1
     */

    /* top part */
    for (i_out_y = 0; i_out_y < padding_y; i_out_y++)
 8003560:	2300      	movs	r3, #0
 8003562:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8003566:	e0d0      	b.n	800370a <arm_convolve_HWC_q7_fast_nonsquare+0x1f6>
    {
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 8003568:	2300      	movs	r3, #0
 800356a:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800356e:	e0be      	b.n	80036ee <arm_convolve_HWC_q7_fast_nonsquare+0x1da>
        {
            /* This part implements the im2col function */
            for (i_ker_y = i_out_y * stride_y - padding_y; i_ker_y < i_out_y * stride_y - padding_y + dim_kernel_y;
 8003570:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8003574:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	; 0xbc
 8003578:	fb12 f303 	smulbb	r3, r2, r3
 800357c:	b29a      	uxth	r2, r3
 800357e:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	b29b      	uxth	r3, r3
 8003586:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 800358a:	e061      	b.n	8003650 <arm_convolve_HWC_q7_fast_nonsquare+0x13c>
                 i_ker_y++)
            {
                for (i_ker_x = i_out_x * stride_x - padding_x; i_ker_x < i_out_x * stride_x - padding_x + dim_kernel_x;
 800358c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8003590:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	; 0xb8
 8003594:	fb12 f303 	smulbb	r3, r2, r3
 8003598:	b29a      	uxth	r2, r3
 800359a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 80035a6:	e03c      	b.n	8003622 <arm_convolve_HWC_q7_fast_nonsquare+0x10e>
                     i_ker_x++)
                {
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in_y || i_ker_x < 0 || i_ker_x >= dim_im_in_x)
 80035a8:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	db0d      	blt.n	80035cc <arm_convolve_HWC_q7_fast_nonsquare+0xb8>
 80035b0:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 80035b4:	893b      	ldrh	r3, [r7, #8]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	da08      	bge.n	80035cc <arm_convolve_HWC_q7_fast_nonsquare+0xb8>
 80035ba:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 80035be:	2b00      	cmp	r3, #0
 80035c0:	db04      	blt.n	80035cc <arm_convolve_HWC_q7_fast_nonsquare+0xb8>
 80035c2:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 80035c6:	897b      	ldrh	r3, [r7, #10]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	db08      	blt.n	80035de <arm_convolve_HWC_q7_fast_nonsquare+0xca>
                    {
                        /* arm_fill_q15(0, pBuffer, ch_im_in); */
                        memset(pBuffer, 0, sizeof(q15_t)*ch_im_in);
 80035cc:	88fb      	ldrh	r3, [r7, #6]
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	461a      	mov	r2, r3
 80035d2:	2100      	movs	r1, #0
 80035d4:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80035d8:	f006 fff4 	bl	800a5c4 <memset>
 80035dc:	e013      	b.n	8003606 <arm_convolve_HWC_q7_fast_nonsquare+0xf2>
                    } else
                    {
                        arm_q7_to_q15_reordered_no_shift((q7_t *) Im_in + (i_ker_y * dim_im_in_x + i_ker_x) * ch_im_in,
 80035de:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 80035e2:	897a      	ldrh	r2, [r7, #10]
 80035e4:	fb02 f203 	mul.w	r2, r2, r3
 80035e8:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 80035ec:	4413      	add	r3, r2
 80035ee:	88fa      	ldrh	r2, [r7, #6]
 80035f0:	fb02 f303 	mul.w	r3, r2, r3
 80035f4:	461a      	mov	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	4413      	add	r3, r2
 80035fa:	88fa      	ldrh	r2, [r7, #6]
 80035fc:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8003600:	4618      	mov	r0, r3
 8003602:	f002 fa1f 	bl	8005a44 <arm_q7_to_q15_reordered_no_shift>
                                                         pBuffer, ch_im_in);
                    }
                    pBuffer += ch_im_in;
 8003606:	88fb      	ldrh	r3, [r7, #6]
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800360e:	4413      	add	r3, r2
 8003610:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                     i_ker_x++)
 8003614:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8003618:	b29b      	uxth	r3, r3
 800361a:	3301      	adds	r3, #1
 800361c:	b29b      	uxth	r3, r3
 800361e:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
                for (i_ker_x = i_out_x * stride_x - padding_x; i_ker_x < i_out_x * stride_x - padding_x + dim_kernel_x;
 8003622:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 8003626:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 800362a:	f8b7 10b8 	ldrh.w	r1, [r7, #184]	; 0xb8
 800362e:	fb01 f103 	mul.w	r1, r1, r3
 8003632:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8003636:	1ac9      	subs	r1, r1, r3
 8003638:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800363c:	440b      	add	r3, r1
 800363e:	429a      	cmp	r2, r3
 8003640:	dbb2      	blt.n	80035a8 <arm_convolve_HWC_q7_fast_nonsquare+0x94>
                 i_ker_y++)
 8003642:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8003646:	b29b      	uxth	r3, r3
 8003648:	3301      	adds	r3, #1
 800364a:	b29b      	uxth	r3, r3
 800364c:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
            for (i_ker_y = i_out_y * stride_y - padding_y; i_ker_y < i_out_y * stride_y - padding_y + dim_kernel_y;
 8003650:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 8003654:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8003658:	f8b7 10bc 	ldrh.w	r1, [r7, #188]	; 0xbc
 800365c:	fb01 f103 	mul.w	r1, r1, r3
 8003660:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8003664:	1ac9      	subs	r1, r1, r3
 8003666:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 800366a:	440b      	add	r3, r1
 800366c:	429a      	cmp	r2, r3
 800366e:	db8d      	blt.n	800358c <arm_convolve_HWC_q7_fast_nonsquare+0x78>
                }
            }

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel_x * dim_kernel_y)
 8003670:	88fb      	ldrh	r3, [r7, #6]
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 8003678:	fb02 f303 	mul.w	r3, r2, r3
 800367c:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8003680:	fb02 f303 	mul.w	r3, r2, r3
 8003684:	461a      	mov	r2, r3
 8003686:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800368a:	4413      	add	r3, r2
 800368c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003690:	429a      	cmp	r2, r3
 8003692:	d125      	bne.n	80036e0 <arm_convolve_HWC_q7_fast_nonsquare+0x1cc>
            {
                pOut =
                    arm_nn_mat_mult_kernel_q7_q15_reordered(wt, bufferA, ch_im_out, ch_im_in * dim_kernel_x * dim_kernel_y,
 8003694:	88fa      	ldrh	r2, [r7, #6]
 8003696:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800369a:	fb12 f303 	smulbb	r3, r2, r3
 800369e:	b29b      	uxth	r3, r3
 80036a0:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 80036a4:	fb12 f303 	smulbb	r3, r2, r3
 80036a8:	b299      	uxth	r1, r3
                pOut =
 80036aa:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80036ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80036b2:	9303      	str	r3, [sp, #12]
 80036b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80036b8:	9302      	str	r3, [sp, #8]
 80036ba:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80036be:	9301      	str	r3, [sp, #4]
 80036c0:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	460b      	mov	r3, r1
 80036c8:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80036cc:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80036d0:	f001 f985 	bl	80049de <arm_nn_mat_mult_kernel_q7_q15_reordered>
 80036d4:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                                                  bias_shift, out_shift, bias, pOut);
                /* counter reset */
                pBuffer = bufferA;
 80036d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 80036e0:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	3301      	adds	r3, #1
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80036ee:	f9b7 2094 	ldrsh.w	r2, [r7, #148]	; 0x94
 80036f2:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 80036f6:	429a      	cmp	r2, r3
 80036f8:	f6ff af3a 	blt.w	8003570 <arm_convolve_HWC_q7_fast_nonsquare+0x5c>
    for (i_out_y = 0; i_out_y < padding_y; i_out_y++)
 80036fc:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8003700:	b29b      	uxth	r3, r3
 8003702:	3301      	adds	r3, #1
 8003704:	b29b      	uxth	r3, r3
 8003706:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800370a:	f9b7 2096 	ldrsh.w	r2, [r7, #150]	; 0x96
 800370e:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8003712:	429a      	cmp	r2, r3
 8003714:	f6ff af28 	blt.w	8003568 <arm_convolve_HWC_q7_fast_nonsquare+0x54>
            }
        }
    }

    /* middle part, here we also divide the x into left, mid and right */
    for (; i_out_y < dim_im_out_y - padding_y; i_out_y++)
 8003718:	e21e      	b.n	8003b58 <arm_convolve_HWC_q7_fast_nonsquare+0x644>
    {

        /* left part */
        for (i_out_x = 0; i_out_x < padding_x; i_out_x++)
 800371a:	2300      	movs	r3, #0
 800371c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8003720:	e0b5      	b.n	800388e <arm_convolve_HWC_q7_fast_nonsquare+0x37a>
        {
            /* This part implements the im2col function */
            for (i_ker_y = i_out_y * stride_y - padding_y; i_ker_y < i_out_y * stride_y - padding_y + dim_kernel_y;
 8003722:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8003726:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	; 0xbc
 800372a:	fb12 f303 	smulbb	r3, r2, r3
 800372e:	b29a      	uxth	r2, r3
 8003730:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	b29b      	uxth	r3, r3
 8003738:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 800373c:	e058      	b.n	80037f0 <arm_convolve_HWC_q7_fast_nonsquare+0x2dc>
                 i_ker_y++)
            {
                for (i_ker_x = i_out_x * stride_x - padding_x; i_ker_x < i_out_x * stride_x - padding_x + dim_kernel_x;
 800373e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8003742:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	; 0xb8
 8003746:	fb12 f303 	smulbb	r3, r2, r3
 800374a:	b29a      	uxth	r2, r3
 800374c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	b29b      	uxth	r3, r3
 8003754:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8003758:	e033      	b.n	80037c2 <arm_convolve_HWC_q7_fast_nonsquare+0x2ae>
                     i_ker_x++)
                {
                    if (i_ker_x < 0 || i_ker_x >= dim_im_in_x)
 800375a:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 800375e:	2b00      	cmp	r3, #0
 8003760:	db04      	blt.n	800376c <arm_convolve_HWC_q7_fast_nonsquare+0x258>
 8003762:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 8003766:	897b      	ldrh	r3, [r7, #10]
 8003768:	429a      	cmp	r2, r3
 800376a:	db08      	blt.n	800377e <arm_convolve_HWC_q7_fast_nonsquare+0x26a>
                    {
                        /* arm_fill_q15(0, pBuffer, ch_im_in); */
                        memset(pBuffer, 0, sizeof(q15_t)*ch_im_in);
 800376c:	88fb      	ldrh	r3, [r7, #6]
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	461a      	mov	r2, r3
 8003772:	2100      	movs	r1, #0
 8003774:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8003778:	f006 ff24 	bl	800a5c4 <memset>
 800377c:	e013      	b.n	80037a6 <arm_convolve_HWC_q7_fast_nonsquare+0x292>
                    } else
                    {
                        arm_q7_to_q15_reordered_no_shift((q7_t *) Im_in + (i_ker_y * dim_im_in_x + i_ker_x) * ch_im_in,
 800377e:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8003782:	897a      	ldrh	r2, [r7, #10]
 8003784:	fb02 f203 	mul.w	r2, r2, r3
 8003788:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 800378c:	4413      	add	r3, r2
 800378e:	88fa      	ldrh	r2, [r7, #6]
 8003790:	fb02 f303 	mul.w	r3, r2, r3
 8003794:	461a      	mov	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	4413      	add	r3, r2
 800379a:	88fa      	ldrh	r2, [r7, #6]
 800379c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80037a0:	4618      	mov	r0, r3
 80037a2:	f002 f94f 	bl	8005a44 <arm_q7_to_q15_reordered_no_shift>
                                                         pBuffer, ch_im_in);
                    }
                    pBuffer += ch_im_in;
 80037a6:	88fb      	ldrh	r3, [r7, #6]
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80037ae:	4413      	add	r3, r2
 80037b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                     i_ker_x++)
 80037b4:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	3301      	adds	r3, #1
 80037bc:	b29b      	uxth	r3, r3
 80037be:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
                for (i_ker_x = i_out_x * stride_x - padding_x; i_ker_x < i_out_x * stride_x - padding_x + dim_kernel_x;
 80037c2:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 80037c6:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 80037ca:	f8b7 10b8 	ldrh.w	r1, [r7, #184]	; 0xb8
 80037ce:	fb01 f103 	mul.w	r1, r1, r3
 80037d2:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80037d6:	1ac9      	subs	r1, r1, r3
 80037d8:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80037dc:	440b      	add	r3, r1
 80037de:	429a      	cmp	r2, r3
 80037e0:	dbbb      	blt.n	800375a <arm_convolve_HWC_q7_fast_nonsquare+0x246>
                 i_ker_y++)
 80037e2:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	3301      	adds	r3, #1
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
            for (i_ker_y = i_out_y * stride_y - padding_y; i_ker_y < i_out_y * stride_y - padding_y + dim_kernel_y;
 80037f0:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 80037f4:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 80037f8:	f8b7 10bc 	ldrh.w	r1, [r7, #188]	; 0xbc
 80037fc:	fb01 f103 	mul.w	r1, r1, r3
 8003800:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8003804:	1ac9      	subs	r1, r1, r3
 8003806:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 800380a:	440b      	add	r3, r1
 800380c:	429a      	cmp	r2, r3
 800380e:	db96      	blt.n	800373e <arm_convolve_HWC_q7_fast_nonsquare+0x22a>
                }
            }

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel_x * dim_kernel_y)
 8003810:	88fb      	ldrh	r3, [r7, #6]
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 8003818:	fb02 f303 	mul.w	r3, r2, r3
 800381c:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8003820:	fb02 f303 	mul.w	r3, r2, r3
 8003824:	461a      	mov	r2, r3
 8003826:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800382a:	4413      	add	r3, r2
 800382c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003830:	429a      	cmp	r2, r3
 8003832:	d125      	bne.n	8003880 <arm_convolve_HWC_q7_fast_nonsquare+0x36c>
            {
                pOut =
                    arm_nn_mat_mult_kernel_q7_q15_reordered(wt, bufferA, ch_im_out, ch_im_in * dim_kernel_x * dim_kernel_y,
 8003834:	88fa      	ldrh	r2, [r7, #6]
 8003836:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800383a:	fb12 f303 	smulbb	r3, r2, r3
 800383e:	b29b      	uxth	r3, r3
 8003840:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8003844:	fb12 f303 	smulbb	r3, r2, r3
 8003848:	b299      	uxth	r1, r3
                pOut =
 800384a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800384e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003852:	9303      	str	r3, [sp, #12]
 8003854:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003858:	9302      	str	r3, [sp, #8]
 800385a:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800385e:	9301      	str	r3, [sp, #4]
 8003860:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	460b      	mov	r3, r1
 8003868:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800386c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8003870:	f001 f8b5 	bl	80049de <arm_nn_mat_mult_kernel_q7_q15_reordered>
 8003874:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                                                  bias_shift, out_shift, bias, pOut);
                /* counter reset */
                pBuffer = bufferA;
 8003878:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800387c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        for (i_out_x = 0; i_out_x < padding_x; i_out_x++)
 8003880:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8003884:	b29b      	uxth	r3, r3
 8003886:	3301      	adds	r3, #1
 8003888:	b29b      	uxth	r3, r3
 800388a:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800388e:	f9b7 2094 	ldrsh.w	r2, [r7, #148]	; 0x94
 8003892:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8003896:	429a      	cmp	r2, r3
 8003898:	f6ff af43 	blt.w	8003722 <arm_convolve_HWC_q7_fast_nonsquare+0x20e>
            }
        }

        /* mid part */
        for (; i_out_x < dim_im_out_x - padding_x; i_out_x++)
 800389c:	e08d      	b.n	80039ba <arm_convolve_HWC_q7_fast_nonsquare+0x4a6>
        {
            /* This part implements the im2col function */
            for (i_ker_y = i_out_y * stride_y - padding_y; i_ker_y < i_out_y * stride_y - padding_y + dim_kernel_y;
 800389e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80038a2:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	; 0xbc
 80038a6:	fb12 f303 	smulbb	r3, r2, r3
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 80038b8:	e030      	b.n	800391c <arm_convolve_HWC_q7_fast_nonsquare+0x408>
                 i_ker_y++)
            {
                arm_q7_to_q15_reordered_no_shift((q7_t *) Im_in +
                                                 (i_ker_y * dim_im_in_x + i_out_x * stride_x - padding_x) * ch_im_in,
 80038ba:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 80038be:	897a      	ldrh	r2, [r7, #10]
 80038c0:	fb02 f203 	mul.w	r2, r2, r3
 80038c4:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 80038c8:	f8b7 10b8 	ldrh.w	r1, [r7, #184]	; 0xb8
 80038cc:	fb01 f303 	mul.w	r3, r1, r3
 80038d0:	441a      	add	r2, r3
 80038d2:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	88fa      	ldrh	r2, [r7, #6]
 80038da:	fb02 f303 	mul.w	r3, r2, r3
 80038de:	461a      	mov	r2, r3
                arm_q7_to_q15_reordered_no_shift((q7_t *) Im_in +
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	1898      	adds	r0, r3, r2
                                                 pBuffer, ch_im_in * dim_kernel_x);
 80038e4:	88fb      	ldrh	r3, [r7, #6]
 80038e6:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 80038ea:	fb02 f303 	mul.w	r3, r2, r3
                arm_q7_to_q15_reordered_no_shift((q7_t *) Im_in +
 80038ee:	461a      	mov	r2, r3
 80038f0:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80038f4:	f002 f8a6 	bl	8005a44 <arm_q7_to_q15_reordered_no_shift>
                pBuffer += ch_im_in * dim_kernel_x;
 80038f8:	88fb      	ldrh	r3, [r7, #6]
 80038fa:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 80038fe:	fb02 f303 	mul.w	r3, r2, r3
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003908:	4413      	add	r3, r2
 800390a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                 i_ker_y++)
 800390e:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8003912:	b29b      	uxth	r3, r3
 8003914:	3301      	adds	r3, #1
 8003916:	b29b      	uxth	r3, r3
 8003918:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
            for (i_ker_y = i_out_y * stride_y - padding_y; i_ker_y < i_out_y * stride_y - padding_y + dim_kernel_y;
 800391c:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 8003920:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8003924:	f8b7 10bc 	ldrh.w	r1, [r7, #188]	; 0xbc
 8003928:	fb01 f103 	mul.w	r1, r1, r3
 800392c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8003930:	1ac9      	subs	r1, r1, r3
 8003932:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8003936:	440b      	add	r3, r1
 8003938:	429a      	cmp	r2, r3
 800393a:	dbbe      	blt.n	80038ba <arm_convolve_HWC_q7_fast_nonsquare+0x3a6>
            }

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel_x * dim_kernel_y)
 800393c:	88fb      	ldrh	r3, [r7, #6]
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 8003944:	fb02 f303 	mul.w	r3, r2, r3
 8003948:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 800394c:	fb02 f303 	mul.w	r3, r2, r3
 8003950:	461a      	mov	r2, r3
 8003952:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003956:	4413      	add	r3, r2
 8003958:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800395c:	429a      	cmp	r2, r3
 800395e:	d125      	bne.n	80039ac <arm_convolve_HWC_q7_fast_nonsquare+0x498>
            {
                pOut =
                    arm_nn_mat_mult_kernel_q7_q15_reordered(wt, bufferA, ch_im_out, ch_im_in * dim_kernel_x * dim_kernel_y,
 8003960:	88fa      	ldrh	r2, [r7, #6]
 8003962:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8003966:	fb12 f303 	smulbb	r3, r2, r3
 800396a:	b29b      	uxth	r3, r3
 800396c:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8003970:	fb12 f303 	smulbb	r3, r2, r3
 8003974:	b299      	uxth	r1, r3
                pOut =
 8003976:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800397a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800397e:	9303      	str	r3, [sp, #12]
 8003980:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003984:	9302      	str	r3, [sp, #8]
 8003986:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800398a:	9301      	str	r3, [sp, #4]
 800398c:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	460b      	mov	r3, r1
 8003994:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8003998:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800399c:	f001 f81f 	bl	80049de <arm_nn_mat_mult_kernel_q7_q15_reordered>
 80039a0:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                                                  bias_shift, out_shift, bias, pOut);
                /* counter reset */
                pBuffer = bufferA;
 80039a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        for (; i_out_x < dim_im_out_x - padding_x; i_out_x++)
 80039ac:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	3301      	adds	r3, #1
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80039ba:	f9b7 2094 	ldrsh.w	r2, [r7, #148]	; 0x94
 80039be:	f8b7 10d0 	ldrh.w	r1, [r7, #208]	; 0xd0
 80039c2:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80039c6:	1acb      	subs	r3, r1, r3
 80039c8:	429a      	cmp	r2, r3
 80039ca:	f6ff af68 	blt.w	800389e <arm_convolve_HWC_q7_fast_nonsquare+0x38a>
            }
        }

        /* right part */
        for (; i_out_x < dim_im_out_x; i_out_x++)
 80039ce:	e0b5      	b.n	8003b3c <arm_convolve_HWC_q7_fast_nonsquare+0x628>
        {
            /* This part implements the im2col function */
            for (i_ker_y = i_out_y * stride_y - padding_y; i_ker_y < i_out_y * stride_y - padding_y + dim_kernel_y;
 80039d0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80039d4:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	; 0xbc
 80039d8:	fb12 f303 	smulbb	r3, r2, r3
 80039dc:	b29a      	uxth	r2, r3
 80039de:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 80039ea:	e058      	b.n	8003a9e <arm_convolve_HWC_q7_fast_nonsquare+0x58a>
                 i_ker_y++)
            {
                for (i_ker_x = i_out_x * stride_x - padding_x; i_ker_x < i_out_x * stride_x - padding_x + dim_kernel_x;
 80039ec:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80039f0:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	; 0xb8
 80039f4:	fb12 f303 	smulbb	r3, r2, r3
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8003a06:	e033      	b.n	8003a70 <arm_convolve_HWC_q7_fast_nonsquare+0x55c>
                     i_ker_x++)
                {
                    if (i_ker_x < 0 || i_ker_x >= dim_im_in_x)
 8003a08:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	db04      	blt.n	8003a1a <arm_convolve_HWC_q7_fast_nonsquare+0x506>
 8003a10:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 8003a14:	897b      	ldrh	r3, [r7, #10]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	db08      	blt.n	8003a2c <arm_convolve_HWC_q7_fast_nonsquare+0x518>
                    {
                        /* arm_fill_q15(0, pBuffer, ch_im_in); */
                        memset(pBuffer, 0, sizeof(q15_t)*ch_im_in);
 8003a1a:	88fb      	ldrh	r3, [r7, #6]
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	461a      	mov	r2, r3
 8003a20:	2100      	movs	r1, #0
 8003a22:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8003a26:	f006 fdcd 	bl	800a5c4 <memset>
 8003a2a:	e013      	b.n	8003a54 <arm_convolve_HWC_q7_fast_nonsquare+0x540>
                    } else
                    {
                        arm_q7_to_q15_reordered_no_shift((q7_t *) Im_in + (i_ker_y * dim_im_in_x + i_ker_x) * ch_im_in,
 8003a2c:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8003a30:	897a      	ldrh	r2, [r7, #10]
 8003a32:	fb02 f203 	mul.w	r2, r2, r3
 8003a36:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8003a3a:	4413      	add	r3, r2
 8003a3c:	88fa      	ldrh	r2, [r7, #6]
 8003a3e:	fb02 f303 	mul.w	r3, r2, r3
 8003a42:	461a      	mov	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4413      	add	r3, r2
 8003a48:	88fa      	ldrh	r2, [r7, #6]
 8003a4a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f001 fff8 	bl	8005a44 <arm_q7_to_q15_reordered_no_shift>
                                                         pBuffer, ch_im_in);
                    }
                    pBuffer += ch_im_in;
 8003a54:	88fb      	ldrh	r3, [r7, #6]
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003a5c:	4413      	add	r3, r2
 8003a5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                     i_ker_x++)
 8003a62:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	3301      	adds	r3, #1
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
                for (i_ker_x = i_out_x * stride_x - padding_x; i_ker_x < i_out_x * stride_x - padding_x + dim_kernel_x;
 8003a70:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 8003a74:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8003a78:	f8b7 10b8 	ldrh.w	r1, [r7, #184]	; 0xb8
 8003a7c:	fb01 f103 	mul.w	r1, r1, r3
 8003a80:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8003a84:	1ac9      	subs	r1, r1, r3
 8003a86:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8003a8a:	440b      	add	r3, r1
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	dbbb      	blt.n	8003a08 <arm_convolve_HWC_q7_fast_nonsquare+0x4f4>
                 i_ker_y++)
 8003a90:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	3301      	adds	r3, #1
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
            for (i_ker_y = i_out_y * stride_y - padding_y; i_ker_y < i_out_y * stride_y - padding_y + dim_kernel_y;
 8003a9e:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 8003aa2:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8003aa6:	f8b7 10bc 	ldrh.w	r1, [r7, #188]	; 0xbc
 8003aaa:	fb01 f103 	mul.w	r1, r1, r3
 8003aae:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8003ab2:	1ac9      	subs	r1, r1, r3
 8003ab4:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8003ab8:	440b      	add	r3, r1
 8003aba:	429a      	cmp	r2, r3
 8003abc:	db96      	blt.n	80039ec <arm_convolve_HWC_q7_fast_nonsquare+0x4d8>
                }
            }

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel_x * dim_kernel_y)
 8003abe:	88fb      	ldrh	r3, [r7, #6]
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 8003ac6:	fb02 f303 	mul.w	r3, r2, r3
 8003aca:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8003ace:	fb02 f303 	mul.w	r3, r2, r3
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ad8:	4413      	add	r3, r2
 8003ada:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d125      	bne.n	8003b2e <arm_convolve_HWC_q7_fast_nonsquare+0x61a>
            {
                pOut =
                    arm_nn_mat_mult_kernel_q7_q15_reordered(wt, bufferA, ch_im_out, ch_im_in * dim_kernel_x * dim_kernel_y,
 8003ae2:	88fa      	ldrh	r2, [r7, #6]
 8003ae4:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8003ae8:	fb12 f303 	smulbb	r3, r2, r3
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8003af2:	fb12 f303 	smulbb	r3, r2, r3
 8003af6:	b299      	uxth	r1, r3
                pOut =
 8003af8:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8003afc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b00:	9303      	str	r3, [sp, #12]
 8003b02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b06:	9302      	str	r3, [sp, #8]
 8003b08:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8003b0c:	9301      	str	r3, [sp, #4]
 8003b0e:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	460b      	mov	r3, r1
 8003b16:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8003b1a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8003b1e:	f000 ff5e 	bl	80049de <arm_nn_mat_mult_kernel_q7_q15_reordered>
 8003b22:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                                                  bias_shift, out_shift, bias, pOut);
                /* counter reset */
                pBuffer = bufferA;
 8003b26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        for (; i_out_x < dim_im_out_x; i_out_x++)
 8003b2e:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	3301      	adds	r3, #1
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8003b3c:	f9b7 2094 	ldrsh.w	r2, [r7, #148]	; 0x94
 8003b40:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 8003b44:	429a      	cmp	r2, r3
 8003b46:	f6ff af43 	blt.w	80039d0 <arm_convolve_HWC_q7_fast_nonsquare+0x4bc>
    for (; i_out_y < dim_im_out_y - padding_y; i_out_y++)
 8003b4a:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	3301      	adds	r3, #1
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8003b58:	f9b7 2096 	ldrsh.w	r2, [r7, #150]	; 0x96
 8003b5c:	f8b7 10d4 	ldrh.w	r1, [r7, #212]	; 0xd4
 8003b60:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8003b64:	1acb      	subs	r3, r1, r3
 8003b66:	429a      	cmp	r2, r3
 8003b68:	f6ff add7 	blt.w	800371a <arm_convolve_HWC_q7_fast_nonsquare+0x206>
            }
        }
    }

    for (; i_out_y < dim_im_out_y; i_out_y++)
 8003b6c:	e0d0      	b.n	8003d10 <arm_convolve_HWC_q7_fast_nonsquare+0x7fc>
    {
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 8003b6e:	2300      	movs	r3, #0
 8003b70:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8003b74:	e0be      	b.n	8003cf4 <arm_convolve_HWC_q7_fast_nonsquare+0x7e0>
        {
            /* This part implements the im2col function */
            for (i_ker_y = i_out_y * stride_y - padding_y; i_ker_y < i_out_y * stride_y - padding_y + dim_kernel_y;
 8003b76:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8003b7a:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	; 0xbc
 8003b7e:	fb12 f303 	smulbb	r3, r2, r3
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8003b90:	e061      	b.n	8003c56 <arm_convolve_HWC_q7_fast_nonsquare+0x742>
                 i_ker_y++)
            {
                for (i_ker_x = i_out_x * stride_x - padding_x; i_ker_x < i_out_x * stride_x - padding_x + dim_kernel_x;
 8003b92:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8003b96:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	; 0xb8
 8003b9a:	fb12 f303 	smulbb	r3, r2, r3
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8003bac:	e03c      	b.n	8003c28 <arm_convolve_HWC_q7_fast_nonsquare+0x714>
                     i_ker_x++)
                {
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in_y || i_ker_x < 0 || i_ker_x >= dim_im_in_x)
 8003bae:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	db0d      	blt.n	8003bd2 <arm_convolve_HWC_q7_fast_nonsquare+0x6be>
 8003bb6:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 8003bba:	893b      	ldrh	r3, [r7, #8]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	da08      	bge.n	8003bd2 <arm_convolve_HWC_q7_fast_nonsquare+0x6be>
 8003bc0:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	db04      	blt.n	8003bd2 <arm_convolve_HWC_q7_fast_nonsquare+0x6be>
 8003bc8:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 8003bcc:	897b      	ldrh	r3, [r7, #10]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	db08      	blt.n	8003be4 <arm_convolve_HWC_q7_fast_nonsquare+0x6d0>
                    {
                        /* arm_fill_q15(0, pBuffer, ch_im_in); */
                        memset(pBuffer, 0, sizeof(q15_t)*ch_im_in);
 8003bd2:	88fb      	ldrh	r3, [r7, #6]
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	2100      	movs	r1, #0
 8003bda:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8003bde:	f006 fcf1 	bl	800a5c4 <memset>
 8003be2:	e013      	b.n	8003c0c <arm_convolve_HWC_q7_fast_nonsquare+0x6f8>
                    } else
                    {
                        arm_q7_to_q15_reordered_no_shift((q7_t *) Im_in + (i_ker_y * dim_im_in_x + i_ker_x) * ch_im_in,
 8003be4:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8003be8:	897a      	ldrh	r2, [r7, #10]
 8003bea:	fb02 f203 	mul.w	r2, r2, r3
 8003bee:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8003bf2:	4413      	add	r3, r2
 8003bf4:	88fa      	ldrh	r2, [r7, #6]
 8003bf6:	fb02 f303 	mul.w	r3, r2, r3
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	4413      	add	r3, r2
 8003c00:	88fa      	ldrh	r2, [r7, #6]
 8003c02:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8003c06:	4618      	mov	r0, r3
 8003c08:	f001 ff1c 	bl	8005a44 <arm_q7_to_q15_reordered_no_shift>
                                                         pBuffer, ch_im_in);
                    }
                    pBuffer += ch_im_in;
 8003c0c:	88fb      	ldrh	r3, [r7, #6]
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003c14:	4413      	add	r3, r2
 8003c16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                     i_ker_x++)
 8003c1a:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	3301      	adds	r3, #1
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
                for (i_ker_x = i_out_x * stride_x - padding_x; i_ker_x < i_out_x * stride_x - padding_x + dim_kernel_x;
 8003c28:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 8003c2c:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8003c30:	f8b7 10b8 	ldrh.w	r1, [r7, #184]	; 0xb8
 8003c34:	fb01 f103 	mul.w	r1, r1, r3
 8003c38:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8003c3c:	1ac9      	subs	r1, r1, r3
 8003c3e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8003c42:	440b      	add	r3, r1
 8003c44:	429a      	cmp	r2, r3
 8003c46:	dbb2      	blt.n	8003bae <arm_convolve_HWC_q7_fast_nonsquare+0x69a>
                 i_ker_y++)
 8003c48:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	3301      	adds	r3, #1
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
            for (i_ker_y = i_out_y * stride_y - padding_y; i_ker_y < i_out_y * stride_y - padding_y + dim_kernel_y;
 8003c56:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 8003c5a:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8003c5e:	f8b7 10bc 	ldrh.w	r1, [r7, #188]	; 0xbc
 8003c62:	fb01 f103 	mul.w	r1, r1, r3
 8003c66:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8003c6a:	1ac9      	subs	r1, r1, r3
 8003c6c:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8003c70:	440b      	add	r3, r1
 8003c72:	429a      	cmp	r2, r3
 8003c74:	db8d      	blt.n	8003b92 <arm_convolve_HWC_q7_fast_nonsquare+0x67e>
                }
            }

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel_x * dim_kernel_y)
 8003c76:	88fb      	ldrh	r3, [r7, #6]
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 8003c7e:	fb02 f303 	mul.w	r3, r2, r3
 8003c82:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8003c86:	fb02 f303 	mul.w	r3, r2, r3
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c90:	4413      	add	r3, r2
 8003c92:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d125      	bne.n	8003ce6 <arm_convolve_HWC_q7_fast_nonsquare+0x7d2>
            {
                pOut =
                    arm_nn_mat_mult_kernel_q7_q15_reordered(wt, bufferA, ch_im_out, ch_im_in * dim_kernel_x * dim_kernel_y,
 8003c9a:	88fa      	ldrh	r2, [r7, #6]
 8003c9c:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8003ca0:	fb12 f303 	smulbb	r3, r2, r3
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8003caa:	fb12 f303 	smulbb	r3, r2, r3
 8003cae:	b299      	uxth	r1, r3
                pOut =
 8003cb0:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8003cb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cb8:	9303      	str	r3, [sp, #12]
 8003cba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003cbe:	9302      	str	r3, [sp, #8]
 8003cc0:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8003cc4:	9301      	str	r3, [sp, #4]
 8003cc6:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	460b      	mov	r3, r1
 8003cce:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8003cd2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8003cd6:	f000 fe82 	bl	80049de <arm_nn_mat_mult_kernel_q7_q15_reordered>
 8003cda:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                                                  bias_shift, out_shift, bias, pOut);
                /* counter reset */
                pBuffer = bufferA;
 8003cde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ce2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 8003ce6:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	3301      	adds	r3, #1
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8003cf4:	f9b7 2094 	ldrsh.w	r2, [r7, #148]	; 0x94
 8003cf8:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	f6ff af3a 	blt.w	8003b76 <arm_convolve_HWC_q7_fast_nonsquare+0x662>
    for (; i_out_y < dim_im_out_y; i_out_y++)
 8003d02:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	3301      	adds	r3, #1
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8003d10:	f9b7 2096 	ldrsh.w	r2, [r7, #150]	; 0x96
 8003d14:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	f6ff af28 	blt.w	8003b6e <arm_convolve_HWC_q7_fast_nonsquare+0x65a>
            }
        }
    }

    /* check if there is left-over for compute */
    if (pBuffer != bufferA)
 8003d1e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003d22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d26:	429a      	cmp	r2, r3
 8003d28:	f000 80e7 	beq.w	8003efa <arm_convolve_HWC_q7_fast_nonsquare+0x9e6>
    {
        const q7_t *pA = wt;
 8003d2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        int       i;
        for (i = 0; i < ch_im_out; i++)
 8003d34:	2300      	movs	r3, #0
 8003d36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d3a:	e0d7      	b.n	8003eec <arm_convolve_HWC_q7_fast_nonsquare+0x9d8>
        {
            q31_t     sum = ((q31_t)(bias[i]) << bias_shift) + NN_ROUND(out_shift);
 8003d3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003d44:	4413      	add	r3, r2
 8003d46:	f993 3000 	ldrsb.w	r3, [r3]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8003d50:	409a      	lsls	r2, r3
 8003d52:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8003d56:	3b01      	subs	r3, #1
 8003d58:	2101      	movs	r1, #1
 8003d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d5e:	4413      	add	r3, r2
 8003d60:	67fb      	str	r3, [r7, #124]	; 0x7c
            q15_t    *pB = bufferA;
 8003d62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d66:	61fb      	str	r3, [r7, #28]
            /* basically each time it process 4 entries */
            uint16_t  colCnt = ch_im_in * dim_kernel_x * dim_kernel_y >> 2;
 8003d68:	88fb      	ldrh	r3, [r7, #6]
 8003d6a:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 8003d6e:	fb02 f303 	mul.w	r3, r2, r3
 8003d72:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8003d76:	fb02 f303 	mul.w	r3, r2, r3
 8003d7a:	109b      	asrs	r3, r3, #2
 8003d7c:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

            while (colCnt)
 8003d80:	e067      	b.n	8003e52 <arm_convolve_HWC_q7_fast_nonsquare+0x93e>
 8003d82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d86:	613b      	str	r3, [r7, #16]
 8003d88:	f107 0318 	add.w	r3, r7, #24
 8003d8c:	643b      	str	r3, [r7, #64]	; 0x40
 8003d8e:	f107 0314 	add.w	r3, r7, #20
 8003d92:	63fb      	str	r3, [r7, #60]	; 0x3c
        q31_t     inA = *__SIMD32(source)++;
 8003d94:	f107 0210 	add.w	r2, r7, #16
 8003d98:	6813      	ldr	r3, [r2, #0]
 8003d9a:	1d19      	adds	r1, r3, #4
 8003d9c:	6011      	str	r1, [r2, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	63bb      	str	r3, [r7, #56]	; 0x38
        *out2 = __SXTB16(__ROR(inA, 8));
 8003da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da4:	637b      	str	r3, [r7, #52]	; 0x34
 8003da6:	2308      	movs	r3, #8
 8003da8:	633b      	str	r3, [r7, #48]	; 0x30
  op2 %= 32U;
 8003daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dac:	f003 031f 	and.w	r3, r3, #31
 8003db0:	633b      	str	r3, [r7, #48]	; 0x30
  if (op2 == 0U)
 8003db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d101      	bne.n	8003dbc <arm_convolve_HWC_q7_fast_nonsquare+0x8a8>
    return op1;
 8003db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dba:	e003      	b.n	8003dc4 <arm_convolve_HWC_q7_fast_nonsquare+0x8b0>
  return (op1 >> op2) | (op1 << (32U - op2));
 8003dbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc0:	fa62 f303 	ror.w	r3, r2, r3
 8003dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc8:	fa2f f383 	sxtb16	r3, r3
 8003dcc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dd4:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 8003dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	fa2f f383 	sxtb16	r3, r3
 8003de0:	623b      	str	r3, [r7, #32]
  return(result);
 8003de2:	6a3b      	ldr	r3, [r7, #32]
 8003de4:	461a      	mov	r2, r3
 8003de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003de8:	601a      	str	r2, [r3, #0]
        return source;
 8003dea:	693b      	ldr	r3, [r7, #16]
            {

                q31_t     inA1, inA2;
                q31_t     inB1, inB2;

                pA = (const q7_t *)read_and_pad_reordered((void *)pA, &inA1, &inA2);
 8003dec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                inB1 = *__SIMD32(pB)++;
 8003df0:	f107 021c 	add.w	r2, r7, #28
 8003df4:	6813      	ldr	r3, [r2, #0]
 8003df6:	1d19      	adds	r1, r3, #4
 8003df8:	6011      	str	r1, [r2, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	66bb      	str	r3, [r7, #104]	; 0x68
                sum = __SMLAD(inA1, inB1, sum);
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	4619      	mov	r1, r3
 8003e02:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e06:	6539      	str	r1, [r7, #80]	; 0x50
 8003e08:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003e0a:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8003e0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e10:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003e12:	fb23 1302 	smlad	r3, r3, r2, r1
 8003e16:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 8003e18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e1a:	67fb      	str	r3, [r7, #124]	; 0x7c
                inB2 = *__SIMD32(pB)++;
 8003e1c:	f107 021c 	add.w	r2, r7, #28
 8003e20:	6813      	ldr	r3, [r2, #0]
 8003e22:	1d19      	adds	r1, r3, #4
 8003e24:	6011      	str	r1, [r2, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	667b      	str	r3, [r7, #100]	; 0x64
                sum = __SMLAD(inA2, inB2, sum);
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003e30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e32:	6639      	str	r1, [r7, #96]	; 0x60
 8003e34:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003e36:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8003e38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e3a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e3c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003e3e:	fb23 1302 	smlad	r3, r3, r2, r1
 8003e42:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003e44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e46:	67fb      	str	r3, [r7, #124]	; 0x7c

                colCnt--;
 8003e48:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
            while (colCnt)
 8003e52:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d193      	bne.n	8003d82 <arm_convolve_HWC_q7_fast_nonsquare+0x86e>
            }
            colCnt = (ch_im_in * dim_kernel_y * dim_kernel_x) & 0x3;
 8003e5a:	88fa      	ldrh	r2, [r7, #6]
 8003e5c:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8003e60:	fb12 f303 	smulbb	r3, r2, r3
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 8003e6a:	fb12 f303 	smulbb	r3, r2, r3
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	f003 0303 	and.w	r3, r3, #3
 8003e74:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
            while (colCnt)
 8003e78:	e01b      	b.n	8003eb2 <arm_convolve_HWC_q7_fast_nonsquare+0x99e>
            {
                q7_t      inA1 = *pA++;
 8003e7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e7e:	1c5a      	adds	r2, r3, #1
 8003e80:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                q15_t     inB1 = *pB++;
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	1c9a      	adds	r2, r3, #2
 8003e8e:	61fa      	str	r2, [r7, #28]
 8003e90:	881b      	ldrh	r3, [r3, #0]
 8003e92:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
                sum += inA1 * inB1;
 8003e96:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003e9a:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 8003e9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ea2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003ea4:	4413      	add	r3, r2
 8003ea6:	67fb      	str	r3, [r7, #124]	; 0x7c
                colCnt--;
 8003ea8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8003eac:	3b01      	subs	r3, #1
 8003eae:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
            while (colCnt)
 8003eb2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1df      	bne.n	8003e7a <arm_convolve_HWC_q7_fast_nonsquare+0x966>
            }
            *pOut = (q7_t) __SSAT((sum >> out_shift), 8);
 8003eba:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8003ebe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003ec0:	fa42 f303 	asr.w	r3, r2, r3
 8003ec4:	677b      	str	r3, [r7, #116]	; 0x74
 8003ec6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ec8:	f303 0307 	ssat	r3, #8, r3
 8003ecc:	673b      	str	r3, [r7, #112]	; 0x70
 8003ece:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ed0:	b25a      	sxtb	r2, r3
 8003ed2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ed6:	701a      	strb	r2, [r3, #0]
            pOut++;
 8003ed8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003edc:	3301      	adds	r3, #1
 8003ede:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (i = 0; i < ch_im_out; i++)
 8003ee2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003eec:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8003ef0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	f6ff af21 	blt.w	8003d3c <arm_convolve_HWC_q7_fast_nonsquare+0x828>


#endif                          /* ARM_MATH_DSP */

    /* Return to application */
    return ARM_MATH_SUCCESS;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3798      	adds	r7, #152	; 0x98
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <arm_nn_mat_mult_kernel_q7_q15>:
                                        const uint16_t numCol_A,
                                        const uint16_t bias_shift,
                                        const uint16_t out_shift, 
                                        const q7_t * bias, 
                                        q7_t * pOut)
{
 8003f04:	b490      	push	{r4, r7}
 8003f06:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	f107 040c 	add.w	r4, r7, #12
 8003f10:	6020      	str	r0, [r4, #0]
 8003f12:	f107 0008 	add.w	r0, r7, #8
 8003f16:	6001      	str	r1, [r0, #0]
 8003f18:	4619      	mov	r1, r3
 8003f1a:	1dbb      	adds	r3, r7, #6
 8003f1c:	801a      	strh	r2, [r3, #0]
 8003f1e:	1d3b      	adds	r3, r7, #4
 8003f20:	460a      	mov	r2, r1
 8003f22:	801a      	strh	r2, [r3, #0]
#if defined (ARM_MATH_DSP)
    /* set up the second output pointers */
    q7_t     *pOut2 = pOut + ch_im_out;
 8003f24:	1dbb      	adds	r3, r7, #6
 8003f26:	881b      	ldrh	r3, [r3, #0]
 8003f28:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8003f2c:	4413      	add	r3, r2
 8003f2e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
    const q7_t *pBias = bias;
 8003f32:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003f36:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200

    uint16_t  rowCnt = ch_im_out >> 1;
 8003f3a:	1dbb      	adds	r3, r7, #6
 8003f3c:	881b      	ldrh	r3, [r3, #0]
 8003f3e:	085b      	lsrs	r3, r3, #1
 8003f40:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
    /* this loop over rows in A */
    while (rowCnt)
 8003f44:	e345      	b.n	80045d2 <arm_nn_mat_mult_kernel_q7_q15+0x6ce>
    {
        /* setup pointers for B */
        const q15_t *pB = pInBuffer;
 8003f46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003f4a:	f107 0208 	add.w	r2, r7, #8
 8003f4e:	6812      	ldr	r2, [r2, #0]
 8003f50:	601a      	str	r2, [r3, #0]
        const q15_t *pB2 = pB + numCol_A;
 8003f52:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	1d3b      	adds	r3, r7, #4
 8003f5a:	881b      	ldrh	r3, [r3, #0]
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	441a      	add	r2, r3
 8003f60:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003f64:	601a      	str	r2, [r3, #0]

        /* align the second pointer for A */
        const q7_t *pA2 = pA + numCol_A;
 8003f66:	1d3b      	adds	r3, r7, #4
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	f107 020c 	add.w	r2, r7, #12
 8003f6e:	6812      	ldr	r2, [r2, #0]
 8003f70:	4413      	add	r3, r2
 8003f72:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8

        /* init the sum with bias */
        q31_t     sum =  ((q31_t)(*pBias) << bias_shift) + NN_ROUND(out_shift);
 8003f76:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f7a:	f993 3000 	ldrsb.w	r3, [r3]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 8003f84:	409a      	lsls	r2, r3
 8003f86:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	2101      	movs	r1, #1
 8003f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f92:	4413      	add	r3, r2
 8003f94:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        q31_t     sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8003f98:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f9c:	1c5a      	adds	r2, r3, #1
 8003f9e:	f8c7 2200 	str.w	r2, [r7, #512]	; 0x200
 8003fa2:	f993 3000 	ldrsb.w	r3, [r3]
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 8003fac:	409a      	lsls	r2, r3
 8003fae:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fba:	4413      	add	r3, r2
 8003fbc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        q31_t     sum3 = ((q31_t)(*pBias) << bias_shift) + NN_ROUND(out_shift);
 8003fc0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003fc4:	f993 3000 	ldrsb.w	r3, [r3]
 8003fc8:	461a      	mov	r2, r3
 8003fca:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 8003fce:	409a      	lsls	r2, r3
 8003fd0:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fdc:	4413      	add	r3, r2
 8003fde:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
        q31_t     sum4 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8003fe2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003fe6:	1c5a      	adds	r2, r3, #1
 8003fe8:	f8c7 2200 	str.w	r2, [r7, #512]	; 0x200
 8003fec:	f993 3000 	ldrsb.w	r3, [r3]
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 8003ff6:	409a      	lsls	r2, r3
 8003ff8:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	2101      	movs	r1, #1
 8004000:	fa01 f303 	lsl.w	r3, r1, r3
 8004004:	4413      	add	r3, r2
 8004006:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

        uint16_t  colCnt = numCol_A >> 2;
 800400a:	1d3b      	adds	r3, r7, #4
 800400c:	881b      	ldrh	r3, [r3, #0]
 800400e:	089b      	lsrs	r3, r3, #2
 8004010:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
        /* accumulate over the vector */
        while (colCnt)
 8004014:	e20c      	b.n	8004430 <arm_nn_mat_mult_kernel_q7_q15+0x52c>
        {
            q31_t     inA11, inA12, inA21, inA22;
            q31_t     inB1 = *__SIMD32(pB)++;
 8004016:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800401a:	6813      	ldr	r3, [r2, #0]
 800401c:	1d19      	adds	r1, r3, #4
 800401e:	6011      	str	r1, [r2, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
            q31_t     inB2 = *__SIMD32(pB2)++;
 8004026:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800402a:	6813      	ldr	r3, [r2, #0]
 800402c:	1d19      	adds	r1, r3, #4
 800402e:	6011      	str	r1, [r2, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004036:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800403a:	f107 020c 	add.w	r2, r7, #12
 800403e:	6812      	ldr	r2, [r2, #0]
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004046:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004050:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004054:	601a      	str	r2, [r3, #0]
        q31_t     inA = *__SIMD32(source)++;
 8004056:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800405a:	6813      	ldr	r3, [r2, #0]
 800405c:	1d19      	adds	r1, r3, #4
 800405e:	6011      	str	r1, [r2, #0]
 8004060:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6013      	str	r3, [r2, #0]
        q31_t     inAbuf1 = __SXTB16(__ROR(inA, 8));
 8004068:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004078:	2208      	movs	r2, #8
 800407a:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800407c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004080:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8004084:	6812      	ldr	r2, [r2, #0]
 8004086:	f002 021f 	and.w	r2, r2, #31
 800408a:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800408c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d103      	bne.n	800409e <arm_nn_mat_mult_kernel_q7_q15+0x19a>
    return op1;
 8004096:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	e007      	b.n	80040ae <arm_nn_mat_mult_kernel_q7_q15+0x1aa>
  return (op1 >> op2) | (op1 << (32U - op2));
 800409e:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80040a2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80040a6:	6812      	ldr	r2, [r2, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	fa62 f303 	ror.w	r3, r2, r3
 80040ae:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80040b2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80040b4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	fa2f f283 	sxtb16	r2, r3
 80040be:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80040c2:	601a      	str	r2, [r3, #0]
  return(result);
 80040c4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80040ce:	601a      	str	r2, [r3, #0]
        q31_t     inAbuf2 = __SXTB16(inA);
 80040d0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80040da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80040dc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	fa2f f283 	sxtb16	r2, r3
 80040e6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80040ea:	601a      	str	r2, [r3, #0]
  return(result);
 80040ec:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80040f6:	601a      	str	r2, [r3, #0]
        *out2 = __PKHTB(inAbuf1, inAbuf2, 16);
 80040f8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	0c1b      	lsrs	r3, r3, #16
 8004100:	041b      	lsls	r3, r3, #16
 8004102:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8004106:	6812      	ldr	r2, [r2, #0]
 8004108:	0c12      	lsrs	r2, r2, #16
 800410a:	4313      	orrs	r3, r2
 800410c:	461a      	mov	r2, r3
 800410e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	601a      	str	r2, [r3, #0]
        *out1 = __PKHBT(inAbuf2, inAbuf1, 16);
 8004116:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	b29a      	uxth	r2, r3
 800411e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	041b      	lsls	r3, r3, #16
 8004126:	4313      	orrs	r3, r2
 8004128:	461a      	mov	r2, r3
 800412a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	601a      	str	r2, [r3, #0]
        return source;
 8004132:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004136:	681a      	ldr	r2, [r3, #0]

            pA = (q7_t *) read_and_pad((void *)pA, &inA11, &inA12);
 8004138:	f107 030c 	add.w	r3, r7, #12
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004142:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800414c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004150:	601a      	str	r2, [r3, #0]
 8004152:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004156:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800415a:	601a      	str	r2, [r3, #0]
        q31_t     inA = *__SIMD32(source)++;
 800415c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004160:	6813      	ldr	r3, [r2, #0]
 8004162:	1d19      	adds	r1, r3, #4
 8004164:	6011      	str	r1, [r2, #0]
 8004166:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6013      	str	r3, [r2, #0]
        q31_t     inAbuf1 = __SXTB16(__ROR(inA, 8));
 800416e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800417e:	2208      	movs	r2, #8
 8004180:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8004182:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004186:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 800418a:	6812      	ldr	r2, [r2, #0]
 800418c:	f002 021f 	and.w	r2, r2, #31
 8004190:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8004192:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d103      	bne.n	80041a4 <arm_nn_mat_mult_kernel_q7_q15+0x2a0>
    return op1;
 800419c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	e007      	b.n	80041b4 <arm_nn_mat_mult_kernel_q7_q15+0x2b0>
  return (op1 >> op2) | (op1 << (32U - op2));
 80041a4:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80041a8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80041ac:	6812      	ldr	r2, [r2, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	fa62 f303 	ror.w	r3, r2, r3
 80041b4:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80041b8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80041ba:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	fa2f f283 	sxtb16	r2, r3
 80041c4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80041c8:	601a      	str	r2, [r3, #0]
  return(result);
 80041ca:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80041d4:	601a      	str	r2, [r3, #0]
        q31_t     inAbuf2 = __SXTB16(inA);
 80041d6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80041e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80041e2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	fa2f f283 	sxtb16	r2, r3
 80041ec:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80041f0:	601a      	str	r2, [r3, #0]
  return(result);
 80041f2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80041fc:	601a      	str	r2, [r3, #0]
        *out2 = __PKHTB(inAbuf1, inAbuf2, 16);
 80041fe:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	0c1b      	lsrs	r3, r3, #16
 8004206:	041b      	lsls	r3, r3, #16
 8004208:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 800420c:	6812      	ldr	r2, [r2, #0]
 800420e:	0c12      	lsrs	r2, r2, #16
 8004210:	4313      	orrs	r3, r2
 8004212:	461a      	mov	r2, r3
 8004214:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	601a      	str	r2, [r3, #0]
        *out1 = __PKHBT(inAbuf2, inAbuf1, 16);
 800421c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	b29a      	uxth	r2, r3
 8004224:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	041b      	lsls	r3, r3, #16
 800422c:	4313      	orrs	r3, r2
 800422e:	461a      	mov	r2, r3
 8004230:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	601a      	str	r2, [r3, #0]
        return source;
 8004238:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800423c:	681b      	ldr	r3, [r3, #0]
            pA2 = (q7_t *) read_and_pad((void *)pA2, &inA21, &inA22);
 800423e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8

            sum = __SMLAD(inA11, inB1, sum);
 8004242:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4619      	mov	r1, r3
 800424a:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800424e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004252:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 8004256:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 800425a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800425e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004262:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8004266:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800426a:	fb23 1202 	smlad	r2, r3, r2, r1
 800426e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004272:	601a      	str	r2, [r3, #0]
  return(result);
 8004274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
            sum2 = __SMLAD(inA11, inB2, sum2);
 800427e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4619      	mov	r1, r3
 8004286:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 800428a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800428e:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
 8004292:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 8004296:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800429a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800429e:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80042a2:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80042a6:	fb23 1302 	smlad	r3, r3, r2, r1
 80042aa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  return(result);
 80042ae:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80042b2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
            sum3 = __SMLAD(inA21, inB1, sum3);
 80042b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4619      	mov	r1, r3
 80042be:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80042c2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80042c6:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 80042ca:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 80042ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80042d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80042d6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80042da:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 80042de:	fb23 1302 	smlad	r3, r3, r2, r1
 80042e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  return(result);
 80042e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80042ea:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
            sum4 = __SMLAD(inA21, inB2, sum4);
 80042ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4619      	mov	r1, r3
 80042f6:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 80042fa:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80042fe:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
 8004302:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8004306:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800430a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800430e:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8004312:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004316:	fb23 1302 	smlad	r3, r3, r2, r1
 800431a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 800431e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004322:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

            inB1 = *__SIMD32(pB)++;
 8004326:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800432a:	6813      	ldr	r3, [r2, #0]
 800432c:	1d19      	adds	r1, r3, #4
 800432e:	6011      	str	r1, [r2, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
            inB2 = *__SIMD32(pB2)++;
 8004336:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800433a:	6813      	ldr	r3, [r2, #0]
 800433c:	1d19      	adds	r1, r3, #4
 800433e:	6011      	str	r1, [r2, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188

            sum = __SMLAD(inA12, inB1, sum);
 8004346:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4619      	mov	r1, r3
 800434e:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8004352:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004356:	f8c7 1154 	str.w	r1, [r7, #340]	; 0x154
 800435a:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 800435e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8004362:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004366:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800436a:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 800436e:	fb23 1302 	smlad	r3, r3, r2, r1
 8004372:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
  return(result);
 8004376:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800437a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
            sum2 = __SMLAD(inA12, inB2, sum2);
 800437e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4619      	mov	r1, r3
 8004386:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 800438a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800438e:	f8c7 1164 	str.w	r1, [r7, #356]	; 0x164
 8004392:	f8c7 2160 	str.w	r2, [r7, #352]	; 0x160
 8004396:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800439a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800439e:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 80043a2:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 80043a6:	fb23 1302 	smlad	r3, r3, r2, r1
 80043aa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
  return(result);
 80043ae:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80043b2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
            sum3 = __SMLAD(inA22, inB1, sum3);
 80043b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4619      	mov	r1, r3
 80043be:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80043c2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80043c6:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
 80043ca:	f8c7 2170 	str.w	r2, [r7, #368]	; 0x170
 80043ce:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80043d2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80043d6:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 80043da:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80043de:	fb23 1302 	smlad	r3, r3, r2, r1
 80043e2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 80043e6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80043ea:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
            sum4 = __SMLAD(inA22, inB2, sum4);
 80043ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4619      	mov	r1, r3
 80043f6:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 80043fa:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80043fe:	f8c7 1184 	str.w	r1, [r7, #388]	; 0x184
 8004402:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
 8004406:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800440a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800440e:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8004412:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 8004416:	fb23 1302 	smlad	r3, r3, r2, r1
 800441a:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  return(result);
 800441e:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8004422:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

            colCnt--;
 8004426:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 800442a:	3b01      	subs	r3, #1
 800442c:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
        while (colCnt)
 8004430:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 8004434:	2b00      	cmp	r3, #0
 8004436:	f47f adee 	bne.w	8004016 <arm_nn_mat_mult_kernel_q7_q15+0x112>
        }                       /* while over colCnt */
        colCnt = numCol_A & 0x3;
 800443a:	1d3b      	adds	r3, r7, #4
 800443c:	881b      	ldrh	r3, [r3, #0]
 800443e:	f003 0303 	and.w	r3, r3, #3
 8004442:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
        while (colCnt)
 8004446:	e056      	b.n	80044f6 <arm_nn_mat_mult_kernel_q7_q15+0x5f2>
        {
            q7_t      inA1 = *pA++;
 8004448:	f107 030c 	add.w	r3, r7, #12
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f107 020c 	add.w	r2, r7, #12
 8004452:	1c59      	adds	r1, r3, #1
 8004454:	6011      	str	r1, [r2, #0]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
            q15_t     inB1 = *pB++;
 800445c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	1c99      	adds	r1, r3, #2
 8004464:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004468:	6011      	str	r1, [r2, #0]
 800446a:	881b      	ldrh	r3, [r3, #0]
 800446c:	f8a7 3194 	strh.w	r3, [r7, #404]	; 0x194
            q7_t      inA2 = *pA2++;
 8004470:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004474:	1c5a      	adds	r2, r3, #1
 8004476:	f8c7 21f8 	str.w	r2, [r7, #504]	; 0x1f8
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	f887 3193 	strb.w	r3, [r7, #403]	; 0x193
            q15_t     inB2 = *pB2++;
 8004480:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	1c99      	adds	r1, r3, #2
 8004488:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800448c:	6011      	str	r1, [r2, #0]
 800448e:	881b      	ldrh	r3, [r3, #0]
 8004490:	f8a7 3190 	strh.w	r3, [r7, #400]	; 0x190

            sum += inA1 * inB1;
 8004494:	f997 3197 	ldrsb.w	r3, [r7, #407]	; 0x197
 8004498:	f9b7 2194 	ldrsh.w	r2, [r7, #404]	; 0x194
 800449c:	fb02 f303 	mul.w	r3, r2, r3
 80044a0:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 80044a4:	4413      	add	r3, r2
 80044a6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
            sum2 += inA1 * inB2;
 80044aa:	f997 3197 	ldrsb.w	r3, [r7, #407]	; 0x197
 80044ae:	f9b7 2190 	ldrsh.w	r2, [r7, #400]	; 0x190
 80044b2:	fb02 f303 	mul.w	r3, r2, r3
 80044b6:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 80044ba:	4413      	add	r3, r2
 80044bc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
            sum3 += inA2 * inB1;
 80044c0:	f997 3193 	ldrsb.w	r3, [r7, #403]	; 0x193
 80044c4:	f9b7 2194 	ldrsh.w	r2, [r7, #404]	; 0x194
 80044c8:	fb02 f303 	mul.w	r3, r2, r3
 80044cc:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 80044d0:	4413      	add	r3, r2
 80044d2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
            sum4 += inA2 * inB2;
 80044d6:	f997 3193 	ldrsb.w	r3, [r7, #403]	; 0x193
 80044da:	f9b7 2190 	ldrsh.w	r2, [r7, #400]	; 0x190
 80044de:	fb02 f303 	mul.w	r3, r2, r3
 80044e2:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 80044e6:	4413      	add	r3, r2
 80044e8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
            colCnt--;
 80044ec:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 80044f0:	3b01      	subs	r3, #1
 80044f2:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
        while (colCnt)
 80044f6:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1a4      	bne.n	8004448 <arm_nn_mat_mult_kernel_q7_q15+0x544>
        }                       /* while over colCnt */
        *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 80044fe:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8004502:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8004506:	fa42 f303 	asr.w	r3, r2, r3
 800450a:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 800450e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8004512:	f303 0307 	ssat	r3, #8, r3
 8004516:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 800451a:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800451e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8004522:	1c5a      	adds	r2, r3, #1
 8004524:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 8004528:	b24a      	sxtb	r2, r1
 800452a:	701a      	strb	r2, [r3, #0]
        *pOut++ = (q7_t) __SSAT((sum3 >> out_shift), 8);
 800452c:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8004530:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8004534:	fa42 f303 	asr.w	r3, r2, r3
 8004538:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800453c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004540:	f303 0307 	ssat	r3, #8, r3
 8004544:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8004548:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 800454c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8004550:	1c5a      	adds	r2, r3, #1
 8004552:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 8004556:	b24a      	sxtb	r2, r1
 8004558:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t) __SSAT((sum2 >> out_shift), 8);
 800455a:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 800455e:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8004562:	fa42 f303 	asr.w	r3, r2, r3
 8004566:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800456a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800456e:	f303 0307 	ssat	r3, #8, r3
 8004572:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004576:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 800457a:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800457e:	1c5a      	adds	r2, r3, #1
 8004580:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 8004584:	b24a      	sxtb	r2, r1
 8004586:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t) __SSAT((sum4 >> out_shift), 8);
 8004588:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 800458c:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8004590:	fa42 f303 	asr.w	r3, r2, r3
 8004594:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004598:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800459c:	f303 0307 	ssat	r3, #8, r3
 80045a0:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 80045a4:	f8d7 1198 	ldr.w	r1, [r7, #408]	; 0x198
 80045a8:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80045ac:	1c5a      	adds	r2, r3, #1
 80045ae:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 80045b2:	b24a      	sxtb	r2, r1
 80045b4:	701a      	strb	r2, [r3, #0]

        /* skip the row computed with A2 */
        pA += numCol_A;
 80045b6:	1d3b      	adds	r3, r7, #4
 80045b8:	881a      	ldrh	r2, [r3, #0]
 80045ba:	f107 030c 	add.w	r3, r7, #12
 80045be:	f107 010c 	add.w	r1, r7, #12
 80045c2:	6809      	ldr	r1, [r1, #0]
 80045c4:	440a      	add	r2, r1
 80045c6:	601a      	str	r2, [r3, #0]
        rowCnt--;
 80045c8:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	; 0x1fe
 80045cc:	3b01      	subs	r3, #1
 80045ce:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
    while (rowCnt)
 80045d2:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	; 0x1fe
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f47f acb5 	bne.w	8003f46 <arm_nn_mat_mult_kernel_q7_q15+0x42>
    }                           /* for over ch_im_out */

    /* compute left-over row if any */
    if (ch_im_out & 0x1)
 80045dc:	1dbb      	adds	r3, r7, #6
 80045de:	881b      	ldrh	r3, [r3, #0]
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f000 81eb 	beq.w	80049c0 <arm_nn_mat_mult_kernel_q7_q15+0xabc>
    {
        /* setup pointers for B */
        const q15_t *pB = pInBuffer;
 80045ea:	f107 0320 	add.w	r3, r7, #32
 80045ee:	f107 0208 	add.w	r2, r7, #8
 80045f2:	6812      	ldr	r2, [r2, #0]
 80045f4:	601a      	str	r2, [r3, #0]
        const q15_t *pB2 = pB + numCol_A;
 80045f6:	f107 0320 	add.w	r3, r7, #32
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	1d3b      	adds	r3, r7, #4
 80045fe:	881b      	ldrh	r3, [r3, #0]
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	441a      	add	r2, r3
 8004604:	f107 031c 	add.w	r3, r7, #28
 8004608:	601a      	str	r2, [r3, #0]

        /* load the bias */
        q31_t     sum = ((q31_t)(*pBias) << bias_shift) + NN_ROUND(out_shift);
 800460a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800460e:	f993 3000 	ldrsb.w	r3, [r3]
 8004612:	461a      	mov	r2, r3
 8004614:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 8004618:	409a      	lsls	r2, r3
 800461a:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 800461e:	3b01      	subs	r3, #1
 8004620:	2101      	movs	r1, #1
 8004622:	fa01 f303 	lsl.w	r3, r1, r3
 8004626:	4413      	add	r3, r2
 8004628:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
        q31_t     sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 800462c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004630:	1c5a      	adds	r2, r3, #1
 8004632:	f8c7 2200 	str.w	r2, [r7, #512]	; 0x200
 8004636:	f993 3000 	ldrsb.w	r3, [r3]
 800463a:	461a      	mov	r2, r3
 800463c:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 8004640:	409a      	lsls	r2, r3
 8004642:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8004646:	3b01      	subs	r3, #1
 8004648:	2101      	movs	r1, #1
 800464a:	fa01 f303 	lsl.w	r3, r1, r3
 800464e:	4413      	add	r3, r2
 8004650:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

        uint16_t  colCnt = numCol_A >> 2;
 8004654:	1d3b      	adds	r3, r7, #4
 8004656:	881b      	ldrh	r3, [r3, #0]
 8004658:	089b      	lsrs	r3, r3, #2
 800465a:	f8a7 31da 	strh.w	r3, [r7, #474]	; 0x1da
        while (colCnt)
 800465e:	e138      	b.n	80048d2 <arm_nn_mat_mult_kernel_q7_q15+0x9ce>
        {
            q31_t     inA11, inA12;
            q31_t     inB1 = *__SIMD32(pB)++;
 8004660:	f107 0220 	add.w	r2, r7, #32
 8004664:	6813      	ldr	r3, [r2, #0]
 8004666:	1d19      	adds	r1, r3, #4
 8004668:	6011      	str	r1, [r2, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
            q31_t     inB2 = *__SIMD32(pB2)++;
 8004670:	f107 021c 	add.w	r2, r7, #28
 8004674:	6813      	ldr	r3, [r2, #0]
 8004676:	1d19      	adds	r1, r3, #4
 8004678:	6011      	str	r1, [r2, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8004680:	f107 0310 	add.w	r3, r7, #16
 8004684:	f107 020c 	add.w	r2, r7, #12
 8004688:	6812      	ldr	r2, [r2, #0]
 800468a:	601a      	str	r2, [r3, #0]
 800468c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004690:	f107 0218 	add.w	r2, r7, #24
 8004694:	601a      	str	r2, [r3, #0]
 8004696:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800469a:	f107 0214 	add.w	r2, r7, #20
 800469e:	601a      	str	r2, [r3, #0]
        q31_t     inA = *__SIMD32(source)++;
 80046a0:	f107 0210 	add.w	r2, r7, #16
 80046a4:	6813      	ldr	r3, [r2, #0]
 80046a6:	1d19      	adds	r1, r3, #4
 80046a8:	6011      	str	r1, [r2, #0]
 80046aa:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6013      	str	r3, [r2, #0]
        q31_t     inAbuf1 = __SXTB16(__ROR(inA, 8));
 80046b2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80046bc:	601a      	str	r2, [r3, #0]
 80046be:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80046c2:	2208      	movs	r2, #8
 80046c4:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 80046c6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80046ca:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80046ce:	6812      	ldr	r2, [r2, #0]
 80046d0:	f002 021f 	and.w	r2, r2, #31
 80046d4:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 80046d6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d103      	bne.n	80046e8 <arm_nn_mat_mult_kernel_q7_q15+0x7e4>
    return op1;
 80046e0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	e007      	b.n	80046f8 <arm_nn_mat_mult_kernel_q7_q15+0x7f4>
  return (op1 >> op2) | (op1 << (32U - op2));
 80046e8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80046ec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80046f0:	6812      	ldr	r2, [r2, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	fa62 f303 	ror.w	r3, r2, r3
 80046f8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80046fc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80046fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	fa2f f283 	sxtb16	r2, r3
 8004708:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800470c:	601a      	str	r2, [r3, #0]
  return(result);
 800470e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004718:	601a      	str	r2, [r3, #0]
        q31_t     inAbuf2 = __SXTB16(inA);
 800471a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004724:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8004726:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	fa2f f283 	sxtb16	r2, r3
 8004730:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004734:	601a      	str	r2, [r3, #0]
  return(result);
 8004736:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004740:	601a      	str	r2, [r3, #0]
        *out2 = __PKHTB(inAbuf1, inAbuf2, 16);
 8004742:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	0c1b      	lsrs	r3, r3, #16
 800474a:	041b      	lsls	r3, r3, #16
 800474c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8004750:	6812      	ldr	r2, [r2, #0]
 8004752:	0c12      	lsrs	r2, r2, #16
 8004754:	4313      	orrs	r3, r2
 8004756:	461a      	mov	r2, r3
 8004758:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	601a      	str	r2, [r3, #0]
        *out1 = __PKHBT(inAbuf2, inAbuf1, 16);
 8004760:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	b29a      	uxth	r2, r3
 8004768:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	041b      	lsls	r3, r3, #16
 8004770:	4313      	orrs	r3, r2
 8004772:	461a      	mov	r2, r3
 8004774:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	601a      	str	r2, [r3, #0]
        return source;
 800477c:	f107 0310 	add.w	r3, r7, #16
 8004780:	681a      	ldr	r2, [r3, #0]

            pA = (q7_t *) read_and_pad((void *)pA, &inA11, &inA12);
 8004782:	f107 030c 	add.w	r3, r7, #12
 8004786:	601a      	str	r2, [r3, #0]

            sum = __SMLAD(inA11, inB1, sum);
 8004788:	f107 0318 	add.w	r3, r7, #24
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4618      	mov	r0, r3
 8004790:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8004794:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8004798:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800479c:	6018      	str	r0, [r3, #0]
 800479e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80047a2:	6019      	str	r1, [r3, #0]
 80047a4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80047a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80047aa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80047b4:	6812      	ldr	r2, [r2, #0]
 80047b6:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80047ba:	6809      	ldr	r1, [r1, #0]
 80047bc:	fb23 1202 	smlad	r2, r3, r2, r1
 80047c0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80047c4:	601a      	str	r2, [r3, #0]
  return(result);
 80047c6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
            sum2 = __SMLAD(inA11, inB2, sum2);
 80047d0:	f107 0318 	add.w	r3, r7, #24
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 80047dc:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80047e0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80047e4:	6018      	str	r0, [r3, #0]
 80047e6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80047ea:	6019      	str	r1, [r3, #0]
 80047ec:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80047f0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80047f2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80047fc:	6812      	ldr	r2, [r2, #0]
 80047fe:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8004802:	6809      	ldr	r1, [r1, #0]
 8004804:	fb23 1202 	smlad	r2, r3, r2, r1
 8004808:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800480c:	601a      	str	r2, [r3, #0]
  return(result);
 800480e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

            inB1 = *__SIMD32(pB)++;
 8004818:	f107 0220 	add.w	r2, r7, #32
 800481c:	6813      	ldr	r3, [r2, #0]
 800481e:	1d19      	adds	r1, r3, #4
 8004820:	6011      	str	r1, [r2, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
            inB2 = *__SIMD32(pB2)++;
 8004828:	f107 021c 	add.w	r2, r7, #28
 800482c:	6813      	ldr	r3, [r2, #0]
 800482e:	1d19      	adds	r1, r3, #4
 8004830:	6011      	str	r1, [r2, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
            sum = __SMLAD(inA12, inB1, sum);
 8004838:	f107 0314 	add.w	r3, r7, #20
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4618      	mov	r0, r3
 8004840:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8004844:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8004848:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800484c:	6018      	str	r0, [r3, #0]
 800484e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004852:	6019      	str	r1, [r3, #0]
 8004854:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004858:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800485a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8004864:	6812      	ldr	r2, [r2, #0]
 8004866:	f107 0194 	add.w	r1, r7, #148	; 0x94
 800486a:	6809      	ldr	r1, [r1, #0]
 800486c:	fb23 1202 	smlad	r2, r3, r2, r1
 8004870:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004874:	601a      	str	r2, [r3, #0]
  return(result);
 8004876:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
            sum2 = __SMLAD(inA12, inB2, sum2);
 8004880:	f107 0314 	add.w	r3, r7, #20
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4618      	mov	r0, r3
 8004888:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 800488c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8004890:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004894:	6018      	str	r0, [r3, #0]
 8004896:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800489a:	6019      	str	r1, [r3, #0]
 800489c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80048a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80048a2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80048ac:	6812      	ldr	r2, [r2, #0]
 80048ae:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80048b2:	6809      	ldr	r1, [r1, #0]
 80048b4:	fb23 1202 	smlad	r2, r3, r2, r1
 80048b8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80048bc:	601a      	str	r2, [r3, #0]
  return(result);
 80048be:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

            colCnt--;
 80048c8:	f8b7 31da 	ldrh.w	r3, [r7, #474]	; 0x1da
 80048cc:	3b01      	subs	r3, #1
 80048ce:	f8a7 31da 	strh.w	r3, [r7, #474]	; 0x1da
        while (colCnt)
 80048d2:	f8b7 31da 	ldrh.w	r3, [r7, #474]	; 0x1da
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f47f aec2 	bne.w	8004660 <arm_nn_mat_mult_kernel_q7_q15+0x75c>
        }
        colCnt = numCol_A & 0x3;
 80048dc:	1d3b      	adds	r3, r7, #4
 80048de:	881b      	ldrh	r3, [r3, #0]
 80048e0:	f003 0303 	and.w	r3, r3, #3
 80048e4:	f8a7 31da 	strh.w	r3, [r7, #474]	; 0x1da
        while (colCnt)
 80048e8:	e038      	b.n	800495c <arm_nn_mat_mult_kernel_q7_q15+0xa58>
        {
            q7_t      inA1 = *pA++;
 80048ea:	f107 030c 	add.w	r3, r7, #12
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f107 020c 	add.w	r2, r7, #12
 80048f4:	1c59      	adds	r1, r3, #1
 80048f6:	6011      	str	r1, [r2, #0]
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	f887 31c7 	strb.w	r3, [r7, #455]	; 0x1c7
            q15_t     inB1 = *pB++;
 80048fe:	f107 0320 	add.w	r3, r7, #32
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	1c99      	adds	r1, r3, #2
 8004906:	f107 0220 	add.w	r2, r7, #32
 800490a:	6011      	str	r1, [r2, #0]
 800490c:	881b      	ldrh	r3, [r3, #0]
 800490e:	f8a7 31c4 	strh.w	r3, [r7, #452]	; 0x1c4
            q15_t     inB2 = *pB2++;
 8004912:	f107 031c 	add.w	r3, r7, #28
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	1c99      	adds	r1, r3, #2
 800491a:	f107 021c 	add.w	r2, r7, #28
 800491e:	6011      	str	r1, [r2, #0]
 8004920:	881b      	ldrh	r3, [r3, #0]
 8004922:	f8a7 31c2 	strh.w	r3, [r7, #450]	; 0x1c2

            sum += inA1 * inB1;
 8004926:	f997 31c7 	ldrsb.w	r3, [r7, #455]	; 0x1c7
 800492a:	f9b7 21c4 	ldrsh.w	r2, [r7, #452]	; 0x1c4
 800492e:	fb02 f303 	mul.w	r3, r2, r3
 8004932:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8004936:	4413      	add	r3, r2
 8004938:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
            sum2 += inA1 * inB2;
 800493c:	f997 31c7 	ldrsb.w	r3, [r7, #455]	; 0x1c7
 8004940:	f9b7 21c2 	ldrsh.w	r2, [r7, #450]	; 0x1c2
 8004944:	fb02 f303 	mul.w	r3, r2, r3
 8004948:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800494c:	4413      	add	r3, r2
 800494e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
            colCnt--;
 8004952:	f8b7 31da 	ldrh.w	r3, [r7, #474]	; 0x1da
 8004956:	3b01      	subs	r3, #1
 8004958:	f8a7 31da 	strh.w	r3, [r7, #474]	; 0x1da
        while (colCnt)
 800495c:	f8b7 31da 	ldrh.w	r3, [r7, #474]	; 0x1da
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1c2      	bne.n	80048ea <arm_nn_mat_mult_kernel_q7_q15+0x9e6>
        }

        *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 8004964:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8004968:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 800496c:	fa42 f303 	asr.w	r3, r2, r3
 8004970:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8004974:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8004978:	f303 0307 	ssat	r3, #8, r3
 800497c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8004980:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8004984:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8004988:	1c5a      	adds	r2, r3, #1
 800498a:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 800498e:	b24a      	sxtb	r2, r1
 8004990:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t) __SSAT((sum2 >> out_shift), 8);
 8004992:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8004996:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800499a:	fa42 f303 	asr.w	r3, r2, r3
 800499e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 80049a2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80049a6:	f303 0307 	ssat	r3, #8, r3
 80049aa:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80049ae:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 80049b2:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80049b6:	1c5a      	adds	r2, r3, #1
 80049b8:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 80049bc:	b24a      	sxtb	r2, r1
 80049be:	701a      	strb	r2, [r3, #0]
    }

    pOut += ch_im_out;
 80049c0:	1dbb      	adds	r3, r7, #6
 80049c2:	881b      	ldrh	r3, [r3, #0]
 80049c4:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 80049c8:	4413      	add	r3, r2
 80049ca:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c

    /* return the new output pointer with offset */
    return pOut;
 80049ce:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
#else
    /* To be completed */
    return NULL;
#endif                          /* ARM_MATH_DSP */

}
 80049d2:	4618      	mov	r0, r3
 80049d4:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80049d8:	46bd      	mov	sp, r7
 80049da:	bc90      	pop	{r4, r7}
 80049dc:	4770      	bx	lr

080049de <arm_nn_mat_mult_kernel_q7_q15_reordered>:
                                                  const uint16_t numCol_A,
                                                  const uint16_t bias_shift,
                                                  const uint16_t out_shift, 
                                                  const q7_t * bias, 
                                                  q7_t * pOut)
{
 80049de:	b490      	push	{r4, r7}
 80049e0:	b0d2      	sub	sp, #328	; 0x148
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	f107 040c 	add.w	r4, r7, #12
 80049e8:	6020      	str	r0, [r4, #0]
 80049ea:	f107 0008 	add.w	r0, r7, #8
 80049ee:	6001      	str	r1, [r0, #0]
 80049f0:	4619      	mov	r1, r3
 80049f2:	1dbb      	adds	r3, r7, #6
 80049f4:	801a      	strh	r2, [r3, #0]
 80049f6:	1d3b      	adds	r3, r7, #4
 80049f8:	460a      	mov	r2, r1
 80049fa:	801a      	strh	r2, [r3, #0]

#if defined (ARM_MATH_DSP)
    /* set up the second output pointers */
    q7_t     *pOut2 = pOut + ch_im_out;
 80049fc:	1dbb      	adds	r3, r7, #6
 80049fe:	881b      	ldrh	r3, [r3, #0]
 8004a00:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8004a04:	4413      	add	r3, r2
 8004a06:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    int       i;

    /* this loop over rows in A */
    for (i = 0; i < ch_im_out; i += 2)
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8004a10:	e2df      	b.n	8004fd2 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x5f4>
    {
        /* setup pointers for B */
        const q15_t *pB = pInBuffer;
 8004a12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a16:	f107 0208 	add.w	r2, r7, #8
 8004a1a:	6812      	ldr	r2, [r2, #0]
 8004a1c:	601a      	str	r2, [r3, #0]
        const q15_t *pB2 = pB + numCol_A;
 8004a1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	1d3b      	adds	r3, r7, #4
 8004a26:	881b      	ldrh	r3, [r3, #0]
 8004a28:	005b      	lsls	r3, r3, #1
 8004a2a:	441a      	add	r2, r3
 8004a2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a30:	601a      	str	r2, [r3, #0]

        /* align the second pointer for A */
        const q7_t *pA2 = pA + numCol_A;
 8004a32:	1d3b      	adds	r3, r7, #4
 8004a34:	881b      	ldrh	r3, [r3, #0]
 8004a36:	f107 020c 	add.w	r2, r7, #12
 8004a3a:	6812      	ldr	r2, [r2, #0]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

        /* init the sum with bias */
        q31_t     sum =  ((q31_t)(bias[i]) << bias_shift) + NN_ROUND(out_shift);
 8004a42:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004a46:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8004a4a:	4413      	add	r3, r2
 8004a4c:	f993 3000 	ldrsb.w	r3, [r3]
 8004a50:	461a      	mov	r2, r3
 8004a52:	f8b7 3150 	ldrh.w	r3, [r7, #336]	; 0x150
 8004a56:	409a      	lsls	r2, r3
 8004a58:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	2101      	movs	r1, #1
 8004a60:	fa01 f303 	lsl.w	r3, r1, r3
 8004a64:	4413      	add	r3, r2
 8004a66:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        q31_t     sum2 = ((q31_t)(bias[i]) << bias_shift) + NN_ROUND(out_shift);
 8004a6a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004a6e:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8004a72:	4413      	add	r3, r2
 8004a74:	f993 3000 	ldrsb.w	r3, [r3]
 8004a78:	461a      	mov	r2, r3
 8004a7a:	f8b7 3150 	ldrh.w	r3, [r7, #336]	; 0x150
 8004a7e:	409a      	lsls	r2, r3
 8004a80:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 8004a84:	3b01      	subs	r3, #1
 8004a86:	2101      	movs	r1, #1
 8004a88:	fa01 f303 	lsl.w	r3, r1, r3
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
        q31_t     sum3 = ((q31_t)(bias[i + 1]) << bias_shift) + NN_ROUND(out_shift);
 8004a92:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004a96:	3301      	adds	r3, #1
 8004a98:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f993 3000 	ldrsb.w	r3, [r3]
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	f8b7 3150 	ldrh.w	r3, [r7, #336]	; 0x150
 8004aa8:	409a      	lsls	r2, r3
 8004aaa:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	2101      	movs	r1, #1
 8004ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
        q31_t     sum4 = ((q31_t)(bias[i + 1]) << bias_shift) + NN_ROUND(out_shift);
 8004abc:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f993 3000 	ldrsb.w	r3, [r3]
 8004acc:	461a      	mov	r2, r3
 8004ace:	f8b7 3150 	ldrh.w	r3, [r7, #336]	; 0x150
 8004ad2:	409a      	lsls	r2, r3
 8004ad4:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	2101      	movs	r1, #1
 8004adc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

        uint16_t  colCnt = numCol_A >> 2;
 8004ae6:	1d3b      	adds	r3, r7, #4
 8004ae8:	881b      	ldrh	r3, [r3, #0]
 8004aea:	089b      	lsrs	r3, r3, #2
 8004aec:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
        /* accumulate over the vector */
        while (colCnt)
 8004af0:	e19e      	b.n	8004e30 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x452>
        {
            q31_t     inA11, inA12, inA21, inA22;
            q31_t     inB1 = *__SIMD32(pB)++;
 8004af2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004af6:	6813      	ldr	r3, [r2, #0]
 8004af8:	1d19      	adds	r1, r3, #4
 8004afa:	6011      	str	r1, [r2, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
            q31_t     inB2 = *__SIMD32(pB2)++;
 8004b02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004b06:	6813      	ldr	r3, [r2, #0]
 8004b08:	1d19      	adds	r1, r3, #4
 8004b0a:	6011      	str	r1, [r2, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004b12:	f107 0314 	add.w	r3, r7, #20
 8004b16:	f107 020c 	add.w	r2, r7, #12
 8004b1a:	6812      	ldr	r2, [r2, #0]
 8004b1c:	601a      	str	r2, [r3, #0]
 8004b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b22:	653b      	str	r3, [r7, #80]	; 0x50
 8004b24:	f107 0320 	add.w	r3, r7, #32
 8004b28:	64fb      	str	r3, [r7, #76]	; 0x4c
        q31_t     inA = *__SIMD32(source)++;
 8004b2a:	f107 0214 	add.w	r2, r7, #20
 8004b2e:	6813      	ldr	r3, [r2, #0]
 8004b30:	1d19      	adds	r1, r3, #4
 8004b32:	6011      	str	r1, [r2, #0]
 8004b34:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	6013      	str	r3, [r2, #0]
        *out2 = __SXTB16(__ROR(inA, 8));
 8004b3c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004b4c:	2208      	movs	r2, #8
 8004b4e:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8004b50:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004b54:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004b58:	6812      	ldr	r2, [r2, #0]
 8004b5a:	f002 021f 	and.w	r2, r2, #31
 8004b5e:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8004b60:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d103      	bne.n	8004b72 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x194>
    return op1;
 8004b6a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	e007      	b.n	8004b82 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x1a4>
  return (op1 >> op2) | (op1 << (32U - op2));
 8004b72:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8004b76:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004b7a:	6812      	ldr	r2, [r2, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	fa62 f303 	ror.w	r3, r2, r3
 8004b82:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004b86:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8004b88:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	fa2f f283 	sxtb16	r2, r3
 8004b92:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004b96:	601a      	str	r2, [r3, #0]
  return(result);
 8004b98:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ba2:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 8004ba4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004bae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8004bb0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	fa2f f283 	sxtb16	r2, r3
 8004bba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004bbe:	601a      	str	r2, [r3, #0]
  return(result);
 8004bc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bca:	601a      	str	r2, [r3, #0]
        return source;
 8004bcc:	f107 0314 	add.w	r3, r7, #20
 8004bd0:	681a      	ldr	r2, [r3, #0]

            pA = (q7_t *) read_and_pad_reordered((void *)pA, &inA11, &inA12);
 8004bd2:	f107 030c 	add.w	r3, r7, #12
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	f107 0310 	add.w	r3, r7, #16
 8004bdc:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8004be0:	601a      	str	r2, [r3, #0]
 8004be2:	f107 031c 	add.w	r3, r7, #28
 8004be6:	677b      	str	r3, [r7, #116]	; 0x74
 8004be8:	f107 0318 	add.w	r3, r7, #24
 8004bec:	673b      	str	r3, [r7, #112]	; 0x70
        q31_t     inA = *__SIMD32(source)++;
 8004bee:	f107 0210 	add.w	r2, r7, #16
 8004bf2:	6813      	ldr	r3, [r2, #0]
 8004bf4:	1d19      	adds	r1, r3, #4
 8004bf6:	6011      	str	r1, [r2, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	66fb      	str	r3, [r7, #108]	; 0x6c
        *out2 = __SXTB16(__ROR(inA, 8));
 8004bfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bfe:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c00:	2308      	movs	r3, #8
 8004c02:	667b      	str	r3, [r7, #100]	; 0x64
  op2 %= 32U;
 8004c04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c06:	f003 031f 	and.w	r3, r3, #31
 8004c0a:	667b      	str	r3, [r7, #100]	; 0x64
  if (op2 == 0U)
 8004c0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x238>
    return op1;
 8004c12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c14:	e003      	b.n	8004c1e <arm_nn_mat_mult_kernel_q7_q15_reordered+0x240>
  return (op1 >> op2) | (op1 << (32U - op2));
 8004c16:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004c18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c1a:	fa62 f303 	ror.w	r3, r2, r3
 8004c1e:	663b      	str	r3, [r7, #96]	; 0x60
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8004c20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c22:	fa2f f383 	sxtb16	r3, r3
 8004c26:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 8004c28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c2e:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 8004c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c32:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8004c34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c36:	fa2f f383 	sxtb16	r3, r3
 8004c3a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004c3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c3e:	461a      	mov	r2, r3
 8004c40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c42:	601a      	str	r2, [r3, #0]
        return source;
 8004c44:	f107 0310 	add.w	r3, r7, #16
 8004c48:	681b      	ldr	r3, [r3, #0]
            pA2 = (q7_t *) read_and_pad_reordered((void *)pA2, &inA21, &inA22);
 8004c4a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

            sum = __SMLAD(inA11, inB1, sum);
 8004c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4619      	mov	r1, r3
 8004c56:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8004c5a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004c5e:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 8004c62:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004c66:	67fb      	str	r3, [r7, #124]	; 0x7c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8004c68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c6c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c70:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c72:	fb23 1302 	smlad	r3, r3, r2, r1
 8004c76:	67bb      	str	r3, [r7, #120]	; 0x78
  return(result);
 8004c78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c7a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            sum2 = __SMLAD(inA11, inB2, sum2);
 8004c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4619      	mov	r1, r3
 8004c86:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8004c8a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004c8e:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8004c92:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8004c96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8004c9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004c9e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004ca2:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8004ca6:	fb23 1302 	smlad	r3, r3, r2, r1
 8004caa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return(result);
 8004cae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cb2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            sum3 = __SMLAD(inA21, inB1, sum3);
 8004cb6:	f107 031c 	add.w	r3, r7, #28
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8004cc2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004cc6:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
 8004cca:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8004cce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8004cd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004cd6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8004cda:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8004cde:	fb23 1302 	smlad	r3, r3, r2, r1
 8004ce2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  return(result);
 8004ce6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004cea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            sum4 = __SMLAD(inA21, inB2, sum4);
 8004cee:	f107 031c 	add.w	r3, r7, #28
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8004cfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cfe:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 8004d02:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8004d06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8004d0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004d0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d12:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8004d16:	fb23 1302 	smlad	r3, r3, r2, r1
 8004d1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return(result);
 8004d1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d22:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

            inB1 = *__SIMD32(pB)++;
 8004d26:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004d2a:	6813      	ldr	r3, [r2, #0]
 8004d2c:	1d19      	adds	r1, r3, #4
 8004d2e:	6011      	str	r1, [r2, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
            inB2 = *__SIMD32(pB2)++;
 8004d36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004d3a:	6813      	ldr	r3, [r2, #0]
 8004d3c:	1d19      	adds	r1, r3, #4
 8004d3e:	6011      	str	r1, [r2, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

            sum = __SMLAD(inA12, inB1, sum);
 8004d46:	f107 0320 	add.w	r3, r7, #32
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8004d52:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004d56:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8004d5a:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8004d5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8004d62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d66:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004d6a:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8004d6e:	fb23 1302 	smlad	r3, r3, r2, r1
 8004d72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return(result);
 8004d76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d7a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            sum2 = __SMLAD(inA12, inB2, sum2);
 8004d7e:	f107 0320 	add.w	r3, r7, #32
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4619      	mov	r1, r3
 8004d86:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8004d8a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d8e:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 8004d92:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8004d96:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8004d9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004da2:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8004da6:	fb23 1302 	smlad	r3, r3, r2, r1
 8004daa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  return(result);
 8004dae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004db2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            sum3 = __SMLAD(inA22, inB1, sum3);
 8004db6:	f107 0318 	add.w	r3, r7, #24
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8004dc2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004dc6:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8004dca:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8004dce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8004dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dd6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004dda:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8004dde:	fb23 1302 	smlad	r3, r3, r2, r1
 8004de2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  return(result);
 8004de6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004dea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            sum4 = __SMLAD(inA22, inB2, sum4);
 8004dee:	f107 0318 	add.w	r3, r7, #24
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4619      	mov	r1, r3
 8004df6:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8004dfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dfe:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8004e02:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8004e06:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8004e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e0e:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8004e12:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8004e16:	fb23 1302 	smlad	r3, r3, r2, r1
 8004e1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  return(result);
 8004e1e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004e22:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

            colCnt--;
 8004e26:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
        while (colCnt)
 8004e30:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f47f ae5c 	bne.w	8004af2 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x114>
        }                       /* while over colCnt */
        colCnt = numCol_A & 0x3;
 8004e3a:	1d3b      	adds	r3, r7, #4
 8004e3c:	881b      	ldrh	r3, [r3, #0]
 8004e3e:	f003 0303 	and.w	r3, r3, #3
 8004e42:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
        while (colCnt)
 8004e46:	e056      	b.n	8004ef6 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x518>
        {
            q7_t      inA1 = *pA++;
 8004e48:	f107 030c 	add.w	r3, r7, #12
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f107 020c 	add.w	r2, r7, #12
 8004e52:	1c59      	adds	r1, r3, #1
 8004e54:	6011      	str	r1, [r2, #0]
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            q15_t     inB1 = *pB++;
 8004e5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	1c99      	adds	r1, r3, #2
 8004e64:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004e68:	6011      	str	r1, [r2, #0]
 8004e6a:	881b      	ldrh	r3, [r3, #0]
 8004e6c:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
            q7_t      inA2 = *pA2++;
 8004e70:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004e74:	1c5a      	adds	r2, r3, #1
 8004e76:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
            q15_t     inB2 = *pB2++;
 8004e80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	1c99      	adds	r1, r3, #2
 8004e88:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004e8c:	6011      	str	r1, [r2, #0]
 8004e8e:	881b      	ldrh	r3, [r3, #0]
 8004e90:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100

            sum += inA1 * inB1;
 8004e94:	f997 3107 	ldrsb.w	r3, [r7, #263]	; 0x107
 8004e98:	f9b7 2104 	ldrsh.w	r2, [r7, #260]	; 0x104
 8004e9c:	fb02 f303 	mul.w	r3, r2, r3
 8004ea0:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            sum2 += inA1 * inB2;
 8004eaa:	f997 3107 	ldrsb.w	r3, [r7, #263]	; 0x107
 8004eae:	f9b7 2100 	ldrsh.w	r2, [r7, #256]	; 0x100
 8004eb2:	fb02 f303 	mul.w	r3, r2, r3
 8004eb6:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8004eba:	4413      	add	r3, r2
 8004ebc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            sum3 += inA2 * inB1;
 8004ec0:	f997 3103 	ldrsb.w	r3, [r7, #259]	; 0x103
 8004ec4:	f9b7 2104 	ldrsh.w	r2, [r7, #260]	; 0x104
 8004ec8:	fb02 f303 	mul.w	r3, r2, r3
 8004ecc:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            sum4 += inA2 * inB2;
 8004ed6:	f997 3103 	ldrsb.w	r3, [r7, #259]	; 0x103
 8004eda:	f9b7 2100 	ldrsh.w	r2, [r7, #256]	; 0x100
 8004ede:	fb02 f303 	mul.w	r3, r2, r3
 8004ee2:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8004ee6:	4413      	add	r3, r2
 8004ee8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            colCnt--;
 8004eec:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
        while (colCnt)
 8004ef6:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1a4      	bne.n	8004e48 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x46a>
        }                       /* while over colCnt */
        *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 8004efe:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 8004f02:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8004f06:	fa42 f303 	asr.w	r3, r2, r3
 8004f0a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004f0e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004f12:	f303 0307 	ssat	r3, #8, r3
 8004f16:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004f1a:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8004f1e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004f22:	1c5a      	adds	r2, r3, #1
 8004f24:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 8004f28:	b24a      	sxtb	r2, r1
 8004f2a:	701a      	strb	r2, [r3, #0]
        *pOut++ = (q7_t) __SSAT((sum3 >> out_shift), 8);
 8004f2c:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 8004f30:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8004f34:	fa42 f303 	asr.w	r3, r2, r3
 8004f38:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004f3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f40:	f303 0307 	ssat	r3, #8, r3
 8004f44:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004f48:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8004f4c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004f50:	1c5a      	adds	r2, r3, #1
 8004f52:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 8004f56:	b24a      	sxtb	r2, r1
 8004f58:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t) __SSAT((sum2 >> out_shift), 8);
 8004f5a:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 8004f5e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8004f62:	fa42 f303 	asr.w	r3, r2, r3
 8004f66:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f6e:	f303 0307 	ssat	r3, #8, r3
 8004f72:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004f76:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8004f7a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004f7e:	1c5a      	adds	r2, r3, #1
 8004f80:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 8004f84:	b24a      	sxtb	r2, r1
 8004f86:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t) __SSAT((sum4 >> out_shift), 8);
 8004f88:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 8004f8c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8004f90:	fa42 f303 	asr.w	r3, r2, r3
 8004f94:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004f98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f9c:	f303 0307 	ssat	r3, #8, r3
 8004fa0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004fa4:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8004fa8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004fac:	1c5a      	adds	r2, r3, #1
 8004fae:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 8004fb2:	b24a      	sxtb	r2, r1
 8004fb4:	701a      	strb	r2, [r3, #0]

        /* skip the row computed with A2 */
        pA += numCol_A;
 8004fb6:	1d3b      	adds	r3, r7, #4
 8004fb8:	881a      	ldrh	r2, [r3, #0]
 8004fba:	f107 030c 	add.w	r3, r7, #12
 8004fbe:	f107 010c 	add.w	r1, r7, #12
 8004fc2:	6809      	ldr	r1, [r1, #0]
 8004fc4:	440a      	add	r2, r1
 8004fc6:	601a      	str	r2, [r3, #0]
    for (i = 0; i < ch_im_out; i += 2)
 8004fc8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004fcc:	3302      	adds	r3, #2
 8004fce:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8004fd2:	1dbb      	adds	r3, r7, #6
 8004fd4:	881b      	ldrh	r3, [r3, #0]
 8004fd6:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	f6ff ad19 	blt.w	8004a12 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x34>
    }                           /* for over ch_im_out */

    pOut += ch_im_out;
 8004fe0:	1dbb      	adds	r3, r7, #6
 8004fe2:	881b      	ldrh	r3, [r3, #0]
 8004fe4:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8004fe8:	4413      	add	r3, r2
 8004fea:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

    /* return the new output pointer with offset */
    return pOut;
 8004fee:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
#else
    /* To be completed */
    return NULL;
#endif                          /* ARM_MATH_DSP */
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bc90      	pop	{r4, r7}
 8004ffc:	4770      	bx	lr

08004ffe <arm_fully_connected_q7_opt>:
                           const uint16_t bias_shift,
                           const uint16_t out_shift, 
                           const q7_t * bias, 
                           q7_t * pOut, 
                           q15_t * vec_buffer)
{
 8004ffe:	b590      	push	{r4, r7, lr}
 8005000:	b0f1      	sub	sp, #452	; 0x1c4
 8005002:	af00      	add	r7, sp, #0
 8005004:	f107 040c 	add.w	r4, r7, #12
 8005008:	6020      	str	r0, [r4, #0]
 800500a:	f107 0008 	add.w	r0, r7, #8
 800500e:	6001      	str	r1, [r0, #0]
 8005010:	4619      	mov	r1, r3
 8005012:	1dbb      	adds	r3, r7, #6
 8005014:	801a      	strh	r2, [r3, #0]
 8005016:	1d3b      	adds	r3, r7, #4
 8005018:	460a      	mov	r2, r1
 800501a:	801a      	strh	r2, [r3, #0]

#if defined (ARM_MATH_DSP)
    /* Run the following code for Cortex-M4 and Cortex-M7 */

    const q7_t *pB = pM;
 800501c:	f107 0320 	add.w	r3, r7, #32
 8005020:	f107 0208 	add.w	r2, r7, #8
 8005024:	6812      	ldr	r2, [r2, #0]
 8005026:	601a      	str	r2, [r3, #0]
    q7_t     *pO = pOut;
 8005028:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800502c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    const q7_t *pBias = bias;
 8005030:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8005034:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    q15_t    *pA;
    uint16_t  rowCnt = num_of_rows >> 2;
 8005038:	1d3b      	adds	r3, r7, #4
 800503a:	881b      	ldrh	r3, [r3, #0]
 800503c:	089b      	lsrs	r3, r3, #2
 800503e:	f8a7 31b6 	strh.w	r3, [r7, #438]	; 0x1b6

    arm_q7_to_q15_reordered_no_shift(pV, vec_buffer, dim_vec);
 8005042:	1dbb      	adds	r3, r7, #6
 8005044:	881a      	ldrh	r2, [r3, #0]
 8005046:	f107 030c 	add.w	r3, r7, #12
 800504a:	f8d7 11e0 	ldr.w	r1, [r7, #480]	; 0x1e0
 800504e:	6818      	ldr	r0, [r3, #0]
 8005050:	f000 fcf8 	bl	8005a44 <arm_q7_to_q15_reordered_no_shift>

    while (rowCnt)
 8005054:	e339      	b.n	80056ca <arm_fully_connected_q7_opt+0x6cc>
    {

        q31_t     sum =  ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8005056:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800505a:	1c5a      	adds	r2, r3, #1
 800505c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8005060:	f993 3000 	ldrsb.w	r3, [r3]
 8005064:	461a      	mov	r2, r3
 8005066:	f8b7 31d0 	ldrh.w	r3, [r7, #464]	; 0x1d0
 800506a:	409a      	lsls	r2, r3
 800506c:	f8b7 31d4 	ldrh.w	r3, [r7, #468]	; 0x1d4
 8005070:	3b01      	subs	r3, #1
 8005072:	2101      	movs	r1, #1
 8005074:	fa01 f303 	lsl.w	r3, r1, r3
 8005078:	4413      	add	r3, r2
 800507a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
        q31_t     sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 800507e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8005082:	1c5a      	adds	r2, r3, #1
 8005084:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8005088:	f993 3000 	ldrsb.w	r3, [r3]
 800508c:	461a      	mov	r2, r3
 800508e:	f8b7 31d0 	ldrh.w	r3, [r7, #464]	; 0x1d0
 8005092:	409a      	lsls	r2, r3
 8005094:	f8b7 31d4 	ldrh.w	r3, [r7, #468]	; 0x1d4
 8005098:	3b01      	subs	r3, #1
 800509a:	2101      	movs	r1, #1
 800509c:	fa01 f303 	lsl.w	r3, r1, r3
 80050a0:	4413      	add	r3, r2
 80050a2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
        q31_t     sum3 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 80050a6:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80050aa:	1c5a      	adds	r2, r3, #1
 80050ac:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80050b0:	f993 3000 	ldrsb.w	r3, [r3]
 80050b4:	461a      	mov	r2, r3
 80050b6:	f8b7 31d0 	ldrh.w	r3, [r7, #464]	; 0x1d0
 80050ba:	409a      	lsls	r2, r3
 80050bc:	f8b7 31d4 	ldrh.w	r3, [r7, #468]	; 0x1d4
 80050c0:	3b01      	subs	r3, #1
 80050c2:	2101      	movs	r1, #1
 80050c4:	fa01 f303 	lsl.w	r3, r1, r3
 80050c8:	4413      	add	r3, r2
 80050ca:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
        q31_t     sum4 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 80050ce:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80050d2:	1c5a      	adds	r2, r3, #1
 80050d4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80050d8:	f993 3000 	ldrsb.w	r3, [r3]
 80050dc:	461a      	mov	r2, r3
 80050de:	f8b7 31d0 	ldrh.w	r3, [r7, #464]	; 0x1d0
 80050e2:	409a      	lsls	r2, r3
 80050e4:	f8b7 31d4 	ldrh.w	r3, [r7, #468]	; 0x1d4
 80050e8:	3b01      	subs	r3, #1
 80050ea:	2101      	movs	r1, #1
 80050ec:	fa01 f303 	lsl.w	r3, r1, r3
 80050f0:	4413      	add	r3, r2
 80050f2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4

        uint16_t  colCnt = dim_vec >> 2;
 80050f6:	1dbb      	adds	r3, r7, #6
 80050f8:	881b      	ldrh	r3, [r3, #0]
 80050fa:	089b      	lsrs	r3, r3, #2
 80050fc:	f8a7 31a2 	strh.w	r3, [r7, #418]	; 0x1a2

        pA = vec_buffer;
 8005100:	f107 031c 	add.w	r3, r7, #28
 8005104:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8005108:	601a      	str	r2, [r3, #0]

#ifdef USE_INTRINSIC

#ifndef ARM_MATH_BIG_ENDIAN
        while (colCnt)
 800510a:	e20a      	b.n	8005522 <arm_fully_connected_q7_opt+0x524>
        {
            q31_t     inM11, inM12, inM13, inM14;
            q31_t     inV;

            inV = *__SIMD32(pA)++;
 800510c:	f107 021c 	add.w	r2, r7, #28
 8005110:	6813      	ldr	r3, [r2, #0]
 8005112:	1d19      	adds	r1, r3, #4
 8005114:	6011      	str	r1, [r2, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
            inM11 = *__SIMD32(pB)++;
 800511c:	f107 0220 	add.w	r2, r7, #32
 8005120:	6813      	ldr	r3, [r2, #0]
 8005122:	1d19      	adds	r1, r3, #4
 8005124:	6011      	str	r1, [r2, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
            inM12 = __SXTB16(__ROR(inM11, 8));
 800512c:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8005130:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005134:	601a      	str	r2, [r3, #0]
 8005136:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800513a:	2208      	movs	r2, #8
 800513c:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800513e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005142:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8005146:	6812      	ldr	r2, [r2, #0]
 8005148:	f002 021f 	and.w	r2, r2, #31
 800514c:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800514e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d103      	bne.n	8005160 <arm_fully_connected_q7_opt+0x162>
    return op1;
 8005158:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	e007      	b.n	8005170 <arm_fully_connected_q7_opt+0x172>
  return (op1 >> op2) | (op1 << (32U - op2));
 8005160:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8005164:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005168:	6812      	ldr	r2, [r2, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	fa62 f303 	ror.w	r3, r2, r3
 8005170:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8005174:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8005176:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	fa2f f283 	sxtb16	r2, r3
 8005180:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005184:	601a      	str	r2, [r3, #0]
  return(result);
 8005186:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
            inM11 = __SXTB16(inM11);
 8005190:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8005194:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005198:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800519a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	fa2f f283 	sxtb16	r2, r3
 80051a4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80051a8:	601a      	str	r2, [r3, #0]
  return(result);
 80051aa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
            sum = __SMLAD(inM11, inV, sum);
 80051b4:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 80051b8:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80051bc:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 80051c0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80051c4:	6018      	str	r0, [r3, #0]
 80051c6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80051ca:	6019      	str	r1, [r3, #0]
 80051cc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80051d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80051d2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80051dc:	6812      	ldr	r2, [r2, #0]
 80051de:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80051e2:	6809      	ldr	r1, [r1, #0]
 80051e4:	fb23 1202 	smlad	r2, r3, r2, r1
 80051e8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80051ec:	601a      	str	r2, [r3, #0]
  return(result);
 80051ee:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
            sum2 = __SMLAD(inM12, inV, sum2);
 80051f8:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 80051fc:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8005200:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8005204:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005208:	6018      	str	r0, [r3, #0]
 800520a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800520e:	6019      	str	r1, [r3, #0]
 8005210:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005214:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8005216:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8005220:	6812      	ldr	r2, [r2, #0]
 8005222:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8005226:	6809      	ldr	r1, [r1, #0]
 8005228:	fb23 1202 	smlad	r2, r3, r2, r1
 800522c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005230:	601a      	str	r2, [r3, #0]
  return(result);
 8005232:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
            inM13 = *__SIMD32(pB)++;
 800523c:	f107 0220 	add.w	r2, r7, #32
 8005240:	6813      	ldr	r3, [r2, #0]
 8005242:	1d19      	adds	r1, r3, #4
 8005244:	6011      	str	r1, [r2, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
            inM14 = __SXTB16(__ROR(inM13, 8));
 800524c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8005250:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005254:	601a      	str	r2, [r3, #0]
 8005256:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800525a:	2208      	movs	r2, #8
 800525c:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800525e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005262:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8005266:	6812      	ldr	r2, [r2, #0]
 8005268:	f002 021f 	and.w	r2, r2, #31
 800526c:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800526e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d103      	bne.n	8005280 <arm_fully_connected_q7_opt+0x282>
    return op1;
 8005278:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	e007      	b.n	8005290 <arm_fully_connected_q7_opt+0x292>
  return (op1 >> op2) | (op1 << (32U - op2));
 8005280:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005284:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005288:	6812      	ldr	r2, [r2, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	fa62 f303 	ror.w	r3, r2, r3
 8005290:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8005294:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8005296:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	fa2f f283 	sxtb16	r2, r3
 80052a0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80052a4:	601a      	str	r2, [r3, #0]
  return(result);
 80052a6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
            inM13 = __SXTB16(inM13);
 80052b0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80052b4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80052b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80052ba:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	fa2f f283 	sxtb16	r2, r3
 80052c4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80052c8:	601a      	str	r2, [r3, #0]
  return(result);
 80052ca:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
            sum3 = __SMLAD(inM13, inV, sum3);
 80052d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80052d8:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80052dc:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 80052e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80052e4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80052e8:	6019      	str	r1, [r3, #0]
 80052ea:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80052ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80052f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80052f4:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80052f8:	6812      	ldr	r2, [r2, #0]
 80052fa:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 80052fe:	6809      	ldr	r1, [r1, #0]
 8005300:	fb23 1202 	smlad	r2, r3, r2, r1
 8005304:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005308:	601a      	str	r2, [r3, #0]
  return(result);
 800530a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
            sum4 = __SMLAD(inM14, inV, sum4);
 8005314:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8005318:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800531c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005320:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 8005324:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8005328:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800532c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005330:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005334:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8005338:	fb23 1302 	smlad	r3, r3, r2, r1
 800533c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  return(result);
 8005340:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005344:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4

            inV = *__SIMD32(pA)++;
 8005348:	f107 021c 	add.w	r2, r7, #28
 800534c:	6813      	ldr	r3, [r2, #0]
 800534e:	1d19      	adds	r1, r3, #4
 8005350:	6011      	str	r1, [r2, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
            inM11 = *__SIMD32(pB)++;
 8005358:	f107 0220 	add.w	r2, r7, #32
 800535c:	6813      	ldr	r3, [r2, #0]
 800535e:	1d19      	adds	r1, r3, #4
 8005360:	6011      	str	r1, [r2, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
            inM12 = __SXTB16(__ROR(inM11, 8));
 8005368:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800536c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005370:	2308      	movs	r3, #8
 8005372:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  op2 %= 32U;
 8005376:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800537a:	f003 031f 	and.w	r3, r3, #31
 800537e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (op2 == 0U)
 8005382:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005386:	2b00      	cmp	r3, #0
 8005388:	d102      	bne.n	8005390 <arm_fully_connected_q7_opt+0x392>
    return op1;
 800538a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800538e:	e005      	b.n	800539c <arm_fully_connected_q7_opt+0x39e>
  return (op1 >> op2) | (op1 << (32U - op2));
 8005390:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005394:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005398:	fa62 f303 	ror.w	r3, r2, r3
 800539c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80053a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053a4:	fa2f f383 	sxtb16	r3, r3
 80053a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  return(result);
 80053ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053b0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
            inM11 = __SXTB16(inM11);
 80053b4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80053b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80053bc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80053c0:	fa2f f383 	sxtb16	r3, r3
 80053c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  return(result);
 80053c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80053cc:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
            sum = __SMLAD(inM11, inV, sum);
 80053d0:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 80053d4:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80053d8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80053dc:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 80053e0:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 80053e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80053e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053ec:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80053f0:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 80053f4:	fb23 1302 	smlad	r3, r3, r2, r1
 80053f8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  return(result);
 80053fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005400:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
            sum2 = __SMLAD(inM12, inV, sum2);
 8005404:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8005408:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800540c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005410:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8005414:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8005418:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800541c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005420:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8005424:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8005428:	fb23 1302 	smlad	r3, r3, r2, r1
 800542c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  return(result);
 8005430:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005434:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
            inM13 = *__SIMD32(pB)++;
 8005438:	f107 0220 	add.w	r2, r7, #32
 800543c:	6813      	ldr	r3, [r2, #0]
 800543e:	1d19      	adds	r1, r3, #4
 8005440:	6011      	str	r1, [r2, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
            inM14 = __SXTB16(__ROR(inM13, 8));
 8005448:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800544c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005450:	2308      	movs	r3, #8
 8005452:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  op2 %= 32U;
 8005456:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800545a:	f003 031f 	and.w	r3, r3, #31
 800545e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  if (op2 == 0U)
 8005462:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005466:	2b00      	cmp	r3, #0
 8005468:	d102      	bne.n	8005470 <arm_fully_connected_q7_opt+0x472>
    return op1;
 800546a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800546e:	e005      	b.n	800547c <arm_fully_connected_q7_opt+0x47e>
  return (op1 >> op2) | (op1 << (32U - op2));
 8005470:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005474:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005478:	fa62 f303 	ror.w	r3, r2, r3
 800547c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8005480:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005484:	fa2f f383 	sxtb16	r3, r3
 8005488:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  return(result);
 800548c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005490:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
            inM13 = __SXTB16(inM13);
 8005494:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005498:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800549c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80054a0:	fa2f f383 	sxtb16	r3, r3
 80054a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  return(result);
 80054a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80054ac:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
            sum3 = __SMLAD(inM13, inV, sum3);
 80054b0:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 80054b4:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80054b8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80054bc:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 80054c0:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 80054c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80054c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80054cc:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80054d0:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 80054d4:	fb23 1302 	smlad	r3, r3, r2, r1
 80054d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  return(result);
 80054dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80054e0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
            sum4 = __SMLAD(inM14, inV, sum4);
 80054e4:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 80054e8:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80054ec:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80054f0:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
 80054f4:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 80054f8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80054fc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8005500:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8005504:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8005508:	fb23 1302 	smlad	r3, r3, r2, r1
 800550c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8005510:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005514:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
            colCnt--;
 8005518:	f8b7 31a2 	ldrh.w	r3, [r7, #418]	; 0x1a2
 800551c:	3b01      	subs	r3, #1
 800551e:	f8a7 31a2 	strh.w	r3, [r7, #418]	; 0x1a2
        while (colCnt)
 8005522:	f8b7 31a2 	ldrh.w	r3, [r7, #418]	; 0x1a2
 8005526:	2b00      	cmp	r3, #0
 8005528:	f47f adf0 	bne.w	800510c <arm_fully_connected_q7_opt+0x10e>
                      [sum4] "+r"(sum4),[pB] "+r"(pB),[pA] "+r"(pA):[colCnt] "r"(colCnt):"r0", "r1", "r2", "r3", "r4");
#endif                          /* ARM_MATH_BIG_ENDIAN */

#endif                          /* USE_INTRINSIC */

        colCnt = dim_vec & 0x3;
 800552c:	1dbb      	adds	r3, r7, #6
 800552e:	881b      	ldrh	r3, [r3, #0]
 8005530:	f003 0303 	and.w	r3, r3, #3
 8005534:	f8a7 31a2 	strh.w	r3, [r7, #418]	; 0x1a2
        while (colCnt)
 8005538:	e062      	b.n	8005600 <arm_fully_connected_q7_opt+0x602>
        {
            q15_t     inV = *pA++;
 800553a:	f107 031c 	add.w	r3, r7, #28
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	1c99      	adds	r1, r3, #2
 8005542:	f107 021c 	add.w	r2, r7, #28
 8005546:	6011      	str	r1, [r2, #0]
 8005548:	881b      	ldrh	r3, [r3, #0]
 800554a:	f8a7 3162 	strh.w	r3, [r7, #354]	; 0x162
            q7_t      inM = *pB++;
 800554e:	f107 0320 	add.w	r3, r7, #32
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	1c59      	adds	r1, r3, #1
 8005556:	f107 0220 	add.w	r2, r7, #32
 800555a:	6011      	str	r1, [r2, #0]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	f887 3161 	strb.w	r3, [r7, #353]	; 0x161
            q7_t      inM2 = *pB++;
 8005562:	f107 0320 	add.w	r3, r7, #32
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	1c59      	adds	r1, r3, #1
 800556a:	f107 0220 	add.w	r2, r7, #32
 800556e:	6011      	str	r1, [r2, #0]
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	f887 3160 	strb.w	r3, [r7, #352]	; 0x160
            q7_t      inM3 = *pB++;
 8005576:	f107 0320 	add.w	r3, r7, #32
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	1c59      	adds	r1, r3, #1
 800557e:	f107 0220 	add.w	r2, r7, #32
 8005582:	6011      	str	r1, [r2, #0]
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
            q7_t      inM4 = *pB++;
 800558a:	f107 0320 	add.w	r3, r7, #32
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	1c59      	adds	r1, r3, #1
 8005592:	f107 0220 	add.w	r2, r7, #32
 8005596:	6011      	str	r1, [r2, #0]
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e

            sum += inV * inM;
 800559e:	f9b7 3162 	ldrsh.w	r3, [r7, #354]	; 0x162
 80055a2:	f997 2161 	ldrsb.w	r2, [r7, #353]	; 0x161
 80055a6:	fb02 f303 	mul.w	r3, r2, r3
 80055aa:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 80055ae:	4413      	add	r3, r2
 80055b0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
            sum2 += inV * inM2;
 80055b4:	f9b7 3162 	ldrsh.w	r3, [r7, #354]	; 0x162
 80055b8:	f997 2160 	ldrsb.w	r2, [r7, #352]	; 0x160
 80055bc:	fb02 f303 	mul.w	r3, r2, r3
 80055c0:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 80055c4:	4413      	add	r3, r2
 80055c6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
            sum3 += inV * inM3;
 80055ca:	f9b7 3162 	ldrsh.w	r3, [r7, #354]	; 0x162
 80055ce:	f997 215f 	ldrsb.w	r2, [r7, #351]	; 0x15f
 80055d2:	fb02 f303 	mul.w	r3, r2, r3
 80055d6:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 80055da:	4413      	add	r3, r2
 80055dc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
            sum4 += inV * inM4;
 80055e0:	f9b7 3162 	ldrsh.w	r3, [r7, #354]	; 0x162
 80055e4:	f997 215e 	ldrsb.w	r2, [r7, #350]	; 0x15e
 80055e8:	fb02 f303 	mul.w	r3, r2, r3
 80055ec:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80055f0:	4413      	add	r3, r2
 80055f2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
            colCnt--;
 80055f6:	f8b7 31a2 	ldrh.w	r3, [r7, #418]	; 0x1a2
 80055fa:	3b01      	subs	r3, #1
 80055fc:	f8a7 31a2 	strh.w	r3, [r7, #418]	; 0x1a2
        while (colCnt)
 8005600:	f8b7 31a2 	ldrh.w	r3, [r7, #418]	; 0x1a2
 8005604:	2b00      	cmp	r3, #0
 8005606:	d198      	bne.n	800553a <arm_fully_connected_q7_opt+0x53c>
        }                       /* while over colCnt */
        *pO++ = (q7_t) (__SSAT((sum >> out_shift), 8));
 8005608:	f8b7 31d4 	ldrh.w	r3, [r7, #468]	; 0x1d4
 800560c:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8005610:	fa42 f303 	asr.w	r3, r2, r3
 8005614:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005618:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800561c:	f303 0307 	ssat	r3, #8, r3
 8005620:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8005624:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 8005628:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800562c:	1c5a      	adds	r2, r3, #1
 800562e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8005632:	b24a      	sxtb	r2, r1
 8005634:	701a      	strb	r2, [r3, #0]
        *pO++ = (q7_t) (__SSAT((sum2 >> out_shift), 8));
 8005636:	f8b7 31d4 	ldrh.w	r3, [r7, #468]	; 0x1d4
 800563a:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800563e:	fa42 f303 	asr.w	r3, r2, r3
 8005642:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8005646:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800564a:	f303 0307 	ssat	r3, #8, r3
 800564e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8005652:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8005656:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800565a:	1c5a      	adds	r2, r3, #1
 800565c:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8005660:	b24a      	sxtb	r2, r1
 8005662:	701a      	strb	r2, [r3, #0]
        *pO++ = (q7_t) (__SSAT((sum3 >> out_shift), 8));
 8005664:	f8b7 31d4 	ldrh.w	r3, [r7, #468]	; 0x1d4
 8005668:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 800566c:	fa42 f303 	asr.w	r3, r2, r3
 8005670:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8005674:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8005678:	f303 0307 	ssat	r3, #8, r3
 800567c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005680:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005684:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8005688:	1c5a      	adds	r2, r3, #1
 800568a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800568e:	b24a      	sxtb	r2, r1
 8005690:	701a      	strb	r2, [r3, #0]
        *pO++ = (q7_t) (__SSAT((sum4 >> out_shift), 8));
 8005692:	f8b7 31d4 	ldrh.w	r3, [r7, #468]	; 0x1d4
 8005696:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800569a:	fa42 f303 	asr.w	r3, r2, r3
 800569e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80056a2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80056a6:	f303 0307 	ssat	r3, #8, r3
 80056aa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80056ae:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 80056b2:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80056b6:	1c5a      	adds	r2, r3, #1
 80056b8:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80056bc:	b24a      	sxtb	r2, r1
 80056be:	701a      	strb	r2, [r3, #0]

        /* adjust the pointers and counters */
        rowCnt--;
 80056c0:	f8b7 31b6 	ldrh.w	r3, [r7, #438]	; 0x1b6
 80056c4:	3b01      	subs	r3, #1
 80056c6:	f8a7 31b6 	strh.w	r3, [r7, #438]	; 0x1b6
    while (rowCnt)
 80056ca:	f8b7 31b6 	ldrh.w	r3, [r7, #438]	; 0x1b6
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f47f acc1 	bne.w	8005056 <arm_fully_connected_q7_opt+0x58>
    }

    /* left-over part of the rows */
    rowCnt = num_of_rows & 0x3;
 80056d4:	1d3b      	adds	r3, r7, #4
 80056d6:	881b      	ldrh	r3, [r3, #0]
 80056d8:	f003 0303 	and.w	r3, r3, #3
 80056dc:	f8a7 31b6 	strh.w	r3, [r7, #438]	; 0x1b6

    while (rowCnt)
 80056e0:	e136      	b.n	8005950 <arm_fully_connected_q7_opt+0x952>
    {
        q31_t     sum = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 80056e2:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80056e6:	1c5a      	adds	r2, r3, #1
 80056e8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80056ec:	f993 3000 	ldrsb.w	r3, [r3]
 80056f0:	461a      	mov	r2, r3
 80056f2:	f8b7 31d0 	ldrh.w	r3, [r7, #464]	; 0x1d0
 80056f6:	409a      	lsls	r2, r3
 80056f8:	f8b7 31d4 	ldrh.w	r3, [r7, #468]	; 0x1d4
 80056fc:	3b01      	subs	r3, #1
 80056fe:	2101      	movs	r1, #1
 8005700:	fa01 f303 	lsl.w	r3, r1, r3
 8005704:	4413      	add	r3, r2
 8005706:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
        uint16_t  colCnt = dim_vec >> 2;
 800570a:	1dbb      	adds	r3, r7, #6
 800570c:	881b      	ldrh	r3, [r3, #0]
 800570e:	089b      	lsrs	r3, r3, #2
 8005710:	f8a7 319a 	strh.w	r3, [r7, #410]	; 0x19a

        pA = vec_buffer;
 8005714:	f107 031c 	add.w	r3, r7, #28
 8005718:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 800571c:	601a      	str	r2, [r3, #0]

        while (colCnt)
 800571e:	e0c7      	b.n	80058b0 <arm_fully_connected_q7_opt+0x8b2>
        {
            q31_t     inV1, inV2, inM11, inM12;

            pB = (q7_t *) read_and_pad_reordered((void *)pB, &inM11, &inM12);
 8005720:	f107 0320 	add.w	r3, r7, #32
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	f107 0310 	add.w	r3, r7, #16
 800572a:	601a      	str	r2, [r3, #0]
 800572c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005730:	f107 0218 	add.w	r2, r7, #24
 8005734:	601a      	str	r2, [r3, #0]
 8005736:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800573a:	f107 0214 	add.w	r2, r7, #20
 800573e:	601a      	str	r2, [r3, #0]
        q31_t     inA = *__SIMD32(source)++;
 8005740:	f107 0210 	add.w	r2, r7, #16
 8005744:	6813      	ldr	r3, [r2, #0]
 8005746:	1d19      	adds	r1, r3, #4
 8005748:	6011      	str	r1, [r2, #0]
 800574a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6013      	str	r3, [r2, #0]
        *out2 = __SXTB16(__ROR(inA, 8));
 8005752:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800575c:	601a      	str	r2, [r3, #0]
 800575e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005762:	2208      	movs	r2, #8
 8005764:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8005766:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800576a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800576e:	6812      	ldr	r2, [r2, #0]
 8005770:	f002 021f 	and.w	r2, r2, #31
 8005774:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8005776:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d103      	bne.n	8005788 <arm_fully_connected_q7_opt+0x78a>
    return op1;
 8005780:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	e007      	b.n	8005798 <arm_fully_connected_q7_opt+0x79a>
  return (op1 >> op2) | (op1 << (32U - op2));
 8005788:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800578c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005790:	6812      	ldr	r2, [r2, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	fa62 f303 	ror.w	r3, r2, r3
 8005798:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800579c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800579e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	fa2f f283 	sxtb16	r2, r3
 80057a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80057ac:	601a      	str	r2, [r3, #0]
  return(result);
 80057ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	461a      	mov	r2, r3
 80057b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 80057be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80057ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	fa2f f283 	sxtb16	r2, r3
 80057d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057d8:	601a      	str	r2, [r3, #0]
  return(result);
 80057da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	461a      	mov	r2, r3
 80057e2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	601a      	str	r2, [r3, #0]
        return source;
 80057ea:	f107 0310 	add.w	r3, r7, #16
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	f107 0320 	add.w	r3, r7, #32
 80057f4:	601a      	str	r2, [r3, #0]

            inV1 = *__SIMD32(pA)++;
 80057f6:	f107 021c 	add.w	r2, r7, #28
 80057fa:	6813      	ldr	r3, [r2, #0]
 80057fc:	1d19      	adds	r1, r3, #4
 80057fe:	6011      	str	r1, [r2, #0]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
            sum = __SMLAD(inV1, inM11, sum);
 8005806:	f8d7 1188 	ldr.w	r1, [r7, #392]	; 0x188
 800580a:	f107 0318 	add.w	r3, r7, #24
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4618      	mov	r0, r3
 8005812:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8005816:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800581a:	6019      	str	r1, [r3, #0]
 800581c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005820:	6018      	str	r0, [r3, #0]
 8005822:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005826:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8005828:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005832:	6812      	ldr	r2, [r2, #0]
 8005834:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8005838:	6809      	ldr	r1, [r1, #0]
 800583a:	fb23 1202 	smlad	r2, r3, r2, r1
 800583e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005842:	601a      	str	r2, [r3, #0]
  return(result);
 8005844:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

            inV2 = *__SIMD32(pA)++;
 800584e:	f107 021c 	add.w	r2, r7, #28
 8005852:	6813      	ldr	r3, [r2, #0]
 8005854:	1d19      	adds	r1, r3, #4
 8005856:	6011      	str	r1, [r2, #0]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
            sum = __SMLAD(inV2, inM12, sum);
 800585e:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8005862:	f107 0314 	add.w	r3, r7, #20
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4618      	mov	r0, r3
 800586a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800586e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005872:	6019      	str	r1, [r3, #0]
 8005874:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005878:	6018      	str	r0, [r3, #0]
 800587a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800587e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8005880:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800588a:	6812      	ldr	r2, [r2, #0]
 800588c:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8005890:	6809      	ldr	r1, [r1, #0]
 8005892:	fb23 1202 	smlad	r2, r3, r2, r1
 8005896:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800589a:	601a      	str	r2, [r3, #0]
  return(result);
 800589c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

            colCnt--;
 80058a6:	f8b7 319a 	ldrh.w	r3, [r7, #410]	; 0x19a
 80058aa:	3b01      	subs	r3, #1
 80058ac:	f8a7 319a 	strh.w	r3, [r7, #410]	; 0x19a
        while (colCnt)
 80058b0:	f8b7 319a 	ldrh.w	r3, [r7, #410]	; 0x19a
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f47f af33 	bne.w	8005720 <arm_fully_connected_q7_opt+0x722>
        }

        /* left-over of the vector */
        colCnt = dim_vec & 0x3;
 80058ba:	1dbb      	adds	r3, r7, #6
 80058bc:	881b      	ldrh	r3, [r3, #0]
 80058be:	f003 0303 	and.w	r3, r3, #3
 80058c2:	f8a7 319a 	strh.w	r3, [r7, #410]	; 0x19a
        while (colCnt)
 80058c6:	e023      	b.n	8005910 <arm_fully_connected_q7_opt+0x912>
        {
            q15_t     inV = *pA++;
 80058c8:	f107 031c 	add.w	r3, r7, #28
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	1c99      	adds	r1, r3, #2
 80058d0:	f107 021c 	add.w	r2, r7, #28
 80058d4:	6011      	str	r1, [r2, #0]
 80058d6:	881b      	ldrh	r3, [r3, #0]
 80058d8:	f8a7 318e 	strh.w	r3, [r7, #398]	; 0x18e
            q7_t      inM = *pB++;
 80058dc:	f107 0320 	add.w	r3, r7, #32
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	1c59      	adds	r1, r3, #1
 80058e4:	f107 0220 	add.w	r2, r7, #32
 80058e8:	6011      	str	r1, [r2, #0]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	f887 318d 	strb.w	r3, [r7, #397]	; 0x18d
            sum += inV * inM;
 80058f0:	f9b7 318e 	ldrsh.w	r3, [r7, #398]	; 0x18e
 80058f4:	f997 218d 	ldrsb.w	r2, [r7, #397]	; 0x18d
 80058f8:	fb02 f303 	mul.w	r3, r2, r3
 80058fc:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8005900:	4413      	add	r3, r2
 8005902:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
            colCnt--;
 8005906:	f8b7 319a 	ldrh.w	r3, [r7, #410]	; 0x19a
 800590a:	3b01      	subs	r3, #1
 800590c:	f8a7 319a 	strh.w	r3, [r7, #410]	; 0x19a
        while (colCnt)
 8005910:	f8b7 319a 	ldrh.w	r3, [r7, #410]	; 0x19a
 8005914:	2b00      	cmp	r3, #0
 8005916:	d1d7      	bne.n	80058c8 <arm_fully_connected_q7_opt+0x8ca>
        }

        *pO++ = (q7_t) (__SSAT((sum >> out_shift), 8));
 8005918:	f8b7 31d4 	ldrh.w	r3, [r7, #468]	; 0x1d4
 800591c:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8005920:	fa42 f303 	asr.w	r3, r2, r3
 8005924:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8005928:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800592c:	f303 0307 	ssat	r3, #8, r3
 8005930:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8005934:	f8d7 1190 	ldr.w	r1, [r7, #400]	; 0x190
 8005938:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800593c:	1c5a      	adds	r2, r3, #1
 800593e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8005942:	b24a      	sxtb	r2, r1
 8005944:	701a      	strb	r2, [r3, #0]

        rowCnt--;
 8005946:	f8b7 31b6 	ldrh.w	r3, [r7, #438]	; 0x1b6
 800594a:	3b01      	subs	r3, #1
 800594c:	f8a7 31b6 	strh.w	r3, [r7, #438]	; 0x1b6
    while (rowCnt)
 8005950:	f8b7 31b6 	ldrh.w	r3, [r7, #438]	; 0x1b6
 8005954:	2b00      	cmp	r3, #0
 8005956:	f47f aec4 	bne.w	80056e2 <arm_fully_connected_q7_opt+0x6e4>
    }

#endif                          /* ARM_MATH_DSP */

    /* Return to ARM_MATH_SUCCESS */
    return (ARM_MATH_SUCCESS);
 800595a:	2300      	movs	r3, #0

}
 800595c:	4618      	mov	r0, r3
 800595e:	f507 77e2 	add.w	r7, r7, #452	; 0x1c4
 8005962:	46bd      	mov	sp, r7
 8005964:	bd90      	pop	{r4, r7, pc}

08005966 <arm_q7_to_q15_no_shift>:
 * </pre>    
 *   
 */

void arm_q7_to_q15_no_shift(const q7_t * pSrc, q15_t * pDst, uint32_t blockSize)
{
 8005966:	b480      	push	{r7}
 8005968:	b093      	sub	sp, #76	; 0x4c
 800596a:	af00      	add	r7, sp, #0
 800596c:	60f8      	str	r0, [r7, #12]
 800596e:	60b9      	str	r1, [r7, #8]
 8005970:	607a      	str	r2, [r7, #4]
    const q7_t *pIn = pSrc;     /* Src pointer */
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	617b      	str	r3, [r7, #20]
    q31_t     out1, out2;

    /* Run the below code for Cortex-M4 and Cortex-M3 */

    /*loop Unrolling */
    blkCnt = blockSize >> 2u;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	089b      	lsrs	r3, r3, #2
 800597a:	647b      	str	r3, [r7, #68]	; 0x44

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0u)
 800597c:	e044      	b.n	8005a08 <arm_q7_to_q15_no_shift+0xa2>
    {
        /* C = (q15_t) A << 8 */
        /* convert from q7 to q15 and then store the results in the destination buffer */
        in = *__SIMD32(pIn)++;
 800597e:	f107 0214 	add.w	r2, r7, #20
 8005982:	6813      	ldr	r3, [r2, #0]
 8005984:	1d19      	adds	r1, r3, #4
 8005986:	6011      	str	r1, [r2, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	643b      	str	r3, [r7, #64]	; 0x40

        /* rotatate in by 8 and extend two q7_t values to q15_t values */
        in1 = __SXTB16(__ROR(in, 8));
 800598c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800598e:	61fb      	str	r3, [r7, #28]
 8005990:	2308      	movs	r3, #8
 8005992:	61bb      	str	r3, [r7, #24]
  op2 %= 32U;
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	f003 031f 	and.w	r3, r3, #31
 800599a:	61bb      	str	r3, [r7, #24]
  if (op2 == 0U)
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d101      	bne.n	80059a6 <arm_q7_to_q15_no_shift+0x40>
    return op1;
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	e003      	b.n	80059ae <arm_q7_to_q15_no_shift+0x48>
  return (op1 >> op2) | (op1 << (32U - op2));
 80059a6:	69fa      	ldr	r2, [r7, #28]
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	fa62 f303 	ror.w	r3, r2, r3
 80059ae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80059b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b2:	fa2f f383 	sxtb16	r3, r3
 80059b6:	623b      	str	r3, [r7, #32]
  return(result);
 80059b8:	6a3b      	ldr	r3, [r7, #32]
 80059ba:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* extend remainig two q7_t values to q15_t values */
        in2 = __SXTB16(in);
 80059bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059be:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80059c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c2:	fa2f f383 	sxtb16	r3, r3
 80059c6:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80059c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ca:	63bb      	str	r3, [r7, #56]	; 0x38

#ifndef ARM_MATH_BIG_ENDIAN

        out2 = __PKHTB(in1, in2, 16);
 80059cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ce:	0c1b      	lsrs	r3, r3, #16
 80059d0:	041b      	lsls	r3, r3, #16
 80059d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059d4:	0c12      	lsrs	r2, r2, #16
 80059d6:	4313      	orrs	r3, r2
 80059d8:	637b      	str	r3, [r7, #52]	; 0x34
        out1 = __PKHBT(in2, in1, 16);
 80059da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059dc:	b29a      	uxth	r2, r3
 80059de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059e0:	041b      	lsls	r3, r3, #16
 80059e2:	4313      	orrs	r3, r2
 80059e4:	633b      	str	r3, [r7, #48]	; 0x30
        out1 = __PKHTB(in1, in2, 16);
        out2 = __PKHBT(in2, in1, 16);

#endif

        *__SIMD32(pDst)++ = out1;
 80059e6:	f107 0208 	add.w	r2, r7, #8
 80059ea:	6813      	ldr	r3, [r2, #0]
 80059ec:	1d19      	adds	r1, r3, #4
 80059ee:	6011      	str	r1, [r2, #0]
 80059f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059f2:	601a      	str	r2, [r3, #0]
        *__SIMD32(pDst)++ = out2;
 80059f4:	f107 0208 	add.w	r2, r7, #8
 80059f8:	6813      	ldr	r3, [r2, #0]
 80059fa:	1d19      	adds	r1, r3, #4
 80059fc:	6011      	str	r1, [r2, #0]
 80059fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a00:	601a      	str	r2, [r3, #0]

        /* Decrement the loop counter */
        blkCnt--;
 8005a02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a04:	3b01      	subs	r3, #1
 8005a06:	647b      	str	r3, [r7, #68]	; 0x44
    while (blkCnt > 0u)
 8005a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1b7      	bne.n	800597e <arm_q7_to_q15_no_shift+0x18>
    }

    /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
     ** No loop unrolling is used. */
    blkCnt = blockSize % 0x4u;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f003 0303 	and.w	r3, r3, #3
 8005a14:	647b      	str	r3, [r7, #68]	; 0x44
    /* Loop over blockSize number of values */
    blkCnt = blockSize;

#endif                          /* #ifndef ARM_MATH_CM0_FAMILY */

    while (blkCnt > 0u)
 8005a16:	e00c      	b.n	8005a32 <arm_q7_to_q15_no_shift+0xcc>
    {
        /* C = (q15_t) A << 8 */
        /* convert from q7 to q15 and then store the results in the destination buffer */
        *pDst++ = (q15_t) * pIn++;
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	1c5a      	adds	r2, r3, #1
 8005a1c:	617a      	str	r2, [r7, #20]
 8005a1e:	f993 1000 	ldrsb.w	r1, [r3]
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	1c9a      	adds	r2, r3, #2
 8005a26:	60ba      	str	r2, [r7, #8]
 8005a28:	b20a      	sxth	r2, r1
 8005a2a:	801a      	strh	r2, [r3, #0]

        /* Decrement the loop counter */
        blkCnt--;
 8005a2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	647b      	str	r3, [r7, #68]	; 0x44
    while (blkCnt > 0u)
 8005a32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d1ef      	bne.n	8005a18 <arm_q7_to_q15_no_shift+0xb2>
    }

}
 8005a38:	bf00      	nop
 8005a3a:	374c      	adds	r7, #76	; 0x4c
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <arm_q7_to_q15_reordered_no_shift>:
 * The tail (i.e., last (N % 4) elements) will still be in original order.
 *   
 */

void arm_q7_to_q15_reordered_no_shift(const q7_t * pSrc, q15_t * pDst, uint32_t blockSize)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b091      	sub	sp, #68	; 0x44
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
    const q7_t *pIn = pSrc;     /* Src pointer */
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	617b      	str	r3, [r7, #20]
    q31_t     in1, in2;

    /* Run the below code for Cortex-M4 and Cortex-M3 */

    /*loop Unrolling */
    blkCnt = blockSize >> 2u;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	089b      	lsrs	r3, r3, #2
 8005a58:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0u)
 8005a5a:	e037      	b.n	8005acc <arm_q7_to_q15_reordered_no_shift+0x88>
    {
        /* C = (q15_t) A << 8 */
        /* convert from q7 to q15 and then store the results in the destination buffer */
        in = *__SIMD32(pIn)++;
 8005a5c:	f107 0214 	add.w	r2, r7, #20
 8005a60:	6813      	ldr	r3, [r2, #0]
 8005a62:	1d19      	adds	r1, r3, #4
 8005a64:	6011      	str	r1, [r2, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	63bb      	str	r3, [r7, #56]	; 0x38

        /* rotatate in by 8 and extend two q7_t values to q15_t values */
        in1 = __SXTB16(__ROR(in, 8));
 8005a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6c:	61fb      	str	r3, [r7, #28]
 8005a6e:	2308      	movs	r3, #8
 8005a70:	61bb      	str	r3, [r7, #24]
  op2 %= 32U;
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	f003 031f 	and.w	r3, r3, #31
 8005a78:	61bb      	str	r3, [r7, #24]
  if (op2 == 0U)
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d101      	bne.n	8005a84 <arm_q7_to_q15_reordered_no_shift+0x40>
    return op1;
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	e003      	b.n	8005a8c <arm_q7_to_q15_reordered_no_shift+0x48>
  return (op1 >> op2) | (op1 << (32U - op2));
 8005a84:	69fa      	ldr	r2, [r7, #28]
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	fa62 f303 	ror.w	r3, r2, r3
 8005a8c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a90:	fa2f f383 	sxtb16	r3, r3
 8005a94:	623b      	str	r3, [r7, #32]
  return(result);
 8005a96:	6a3b      	ldr	r3, [r7, #32]
 8005a98:	637b      	str	r3, [r7, #52]	; 0x34

        /* extend remainig two q7_t values to q15_t values */
        in2 = __SXTB16(in);
 8005a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8005a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa0:	fa2f f383 	sxtb16	r3, r3
 8005aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa8:	633b      	str	r3, [r7, #48]	; 0x30

#ifndef ARM_MATH_BIG_ENDIAN
        *__SIMD32(pDst)++ = in2;
 8005aaa:	f107 0208 	add.w	r2, r7, #8
 8005aae:	6813      	ldr	r3, [r2, #0]
 8005ab0:	1d19      	adds	r1, r3, #4
 8005ab2:	6011      	str	r1, [r2, #0]
 8005ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ab6:	601a      	str	r2, [r3, #0]
        *__SIMD32(pDst)++ = in1;
 8005ab8:	f107 0208 	add.w	r2, r7, #8
 8005abc:	6813      	ldr	r3, [r2, #0]
 8005abe:	1d19      	adds	r1, r3, #4
 8005ac0:	6011      	str	r1, [r2, #0]
 8005ac2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ac4:	601a      	str	r2, [r3, #0]
        *__SIMD32(pDst)++ = in1;
        *__SIMD32(pDst)++ = in2;
#endif

        /* Decrement the loop counter */
        blkCnt--;
 8005ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (blkCnt > 0u)
 8005acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1c4      	bne.n	8005a5c <arm_q7_to_q15_reordered_no_shift+0x18>
    }

    /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
     ** No loop unrolling is used. */
    blkCnt = blockSize % 0x4u;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f003 0303 	and.w	r3, r3, #3
 8005ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Loop over blockSize number of values */
    blkCnt = blockSize;

#endif                          /* #ifndef ARM_MATH_CM0_FAMILY */

    while (blkCnt > 0u)
 8005ada:	e00c      	b.n	8005af6 <arm_q7_to_q15_reordered_no_shift+0xb2>
    {
        /* C = (q15_t) A << 8 */
        /* convert from q7 to q15 and then store the results in the destination buffer */
        *pDst++ = (q15_t) * pIn++;
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	1c5a      	adds	r2, r3, #1
 8005ae0:	617a      	str	r2, [r7, #20]
 8005ae2:	f993 1000 	ldrsb.w	r1, [r3]
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	1c9a      	adds	r2, r3, #2
 8005aea:	60ba      	str	r2, [r7, #8]
 8005aec:	b20a      	sxth	r2, r1
 8005aee:	801a      	strh	r2, [r3, #0]

        /* Decrement the loop counter */
        blkCnt--;
 8005af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005af2:	3b01      	subs	r3, #1
 8005af4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (blkCnt > 0u)
 8005af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1ef      	bne.n	8005adc <arm_q7_to_q15_reordered_no_shift+0x98>
    }

}
 8005afc:	bf00      	nop
 8005afe:	3744      	adds	r7, #68	; 0x44
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <compare_and_replace_if_larger_q7>:

static void compare_and_replace_if_larger_q7(q7_t * base,   // base data
                                             q7_t * target, // compare target
                                             const uint16_t length  // data length
    )
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b08b      	sub	sp, #44	; 0x2c
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	4613      	mov	r3, r2
 8005b14:	80fb      	strh	r3, [r7, #6]
    q7_t     *pIn = base;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	623b      	str	r3, [r7, #32]
    q7_t     *pCom = target;
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	61fb      	str	r3, [r7, #28]
    union arm_nnword in;
    union arm_nnword com;
    uint16_t  cnt = length >> 2;
 8005b1e:	88fb      	ldrh	r3, [r7, #6]
 8005b20:	089b      	lsrs	r3, r3, #2
 8005b22:	84fb      	strh	r3, [r7, #38]	; 0x26

    while (cnt > 0u)
 8005b24:	e039      	b.n	8005b9a <compare_and_replace_if_larger_q7+0x92>
    {
        in.word = *__SIMD32(pIn);
 8005b26:	f107 0320 	add.w	r3, r7, #32
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	61bb      	str	r3, [r7, #24]
        com.word = *__SIMD32(pCom)++;
 8005b30:	f107 021c 	add.w	r2, r7, #28
 8005b34:	6813      	ldr	r3, [r2, #0]
 8005b36:	1d19      	adds	r1, r3, #4
 8005b38:	6011      	str	r1, [r2, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	617b      	str	r3, [r7, #20]

        // if version
        if (com.bytes[0] > in.bytes[0])
 8005b3e:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8005b42:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	dd02      	ble.n	8005b50 <compare_and_replace_if_larger_q7+0x48>
            in.bytes[0] = com.bytes[0];
 8005b4a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8005b4e:	763b      	strb	r3, [r7, #24]
        if (com.bytes[1] > in.bytes[1])
 8005b50:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8005b54:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	dd02      	ble.n	8005b62 <compare_and_replace_if_larger_q7+0x5a>
            in.bytes[1] = com.bytes[1];
 8005b5c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8005b60:	767b      	strb	r3, [r7, #25]
        if (com.bytes[2] > in.bytes[2])
 8005b62:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8005b66:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	dd02      	ble.n	8005b74 <compare_and_replace_if_larger_q7+0x6c>
            in.bytes[2] = com.bytes[2];
 8005b6e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8005b72:	76bb      	strb	r3, [r7, #26]
        if (com.bytes[3] > in.bytes[3])
 8005b74:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8005b78:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	dd02      	ble.n	8005b86 <compare_and_replace_if_larger_q7+0x7e>
            in.bytes[3] = com.bytes[3];
 8005b80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b84:	76fb      	strb	r3, [r7, #27]

        *__SIMD32(pIn)++ = in.word;
 8005b86:	f107 0220 	add.w	r2, r7, #32
 8005b8a:	6813      	ldr	r3, [r2, #0]
 8005b8c:	1d19      	adds	r1, r3, #4
 8005b8e:	6011      	str	r1, [r2, #0]
 8005b90:	69ba      	ldr	r2, [r7, #24]
 8005b92:	601a      	str	r2, [r3, #0]

        cnt--;
 8005b94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005b96:	3b01      	subs	r3, #1
 8005b98:	84fb      	strh	r3, [r7, #38]	; 0x26
    while (cnt > 0u)
 8005b9a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1c2      	bne.n	8005b26 <compare_and_replace_if_larger_q7+0x1e>
    }
}
 8005ba0:	bf00      	nop
 8005ba2:	372c      	adds	r7, #44	; 0x2c
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <arm_maxpool_q7_HWC>:
                   const uint16_t dim_im_in,
                   const uint16_t ch_im_in,
                   const uint16_t dim_kernel,
                   const uint16_t padding,
                   const uint16_t stride, const uint16_t dim_im_out, q7_t * bufferA, q7_t * Im_out)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b08c      	sub	sp, #48	; 0x30
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	4608      	mov	r0, r1
 8005bb6:	4611      	mov	r1, r2
 8005bb8:	461a      	mov	r2, r3
 8005bba:	4603      	mov	r3, r0
 8005bbc:	817b      	strh	r3, [r7, #10]
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	813b      	strh	r3, [r7, #8]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	80fb      	strh	r3, [r7, #6]
    /* Run the following code for Cortex-M4 and Cortex-M7 */

    int16_t   i_x, i_y;

    /* first does the pooling along x axis */
    for (i_y = 0; i_y < dim_im_in; i_y++)
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005bca:	e08d      	b.n	8005ce8 <arm_maxpool_q7_HWC+0x13c>
    {

        for (i_x = 0; i_x < dim_im_out; i_x++)
 8005bcc:	2300      	movs	r3, #0
 8005bce:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005bd0:	e07d      	b.n	8005cce <arm_maxpool_q7_HWC+0x122>
        {
            /* for each output pixel */
            q7_t     *target = Im_in + (i_y * dim_im_in + i_x) * ch_im_in;
 8005bd2:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8005bd6:	897a      	ldrh	r2, [r7, #10]
 8005bd8:	fb02 f203 	mul.w	r2, r2, r3
 8005bdc:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8005be0:	4413      	add	r3, r2
 8005be2:	893a      	ldrh	r2, [r7, #8]
 8005be4:	fb02 f303 	mul.w	r3, r2, r3
 8005be8:	461a      	mov	r2, r3
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	4413      	add	r3, r2
 8005bee:	617b      	str	r3, [r7, #20]
            q7_t     *win_start;
            q7_t     *win_stop;
            if (i_x * stride - padding < 0)
 8005bf0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8005bf4:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8005bf6:	fb02 f203 	mul.w	r2, r2, r3
 8005bfa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	da02      	bge.n	8005c08 <arm_maxpool_q7_HWC+0x5c>
            {
                win_start = target;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c06:	e013      	b.n	8005c30 <arm_maxpool_q7_HWC+0x84>
            } else
            {
                win_start = Im_in + (i_y * dim_im_in + i_x * stride - padding) * ch_im_in;
 8005c08:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8005c0c:	897a      	ldrh	r2, [r7, #10]
 8005c0e:	fb02 f203 	mul.w	r2, r2, r3
 8005c12:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8005c16:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 8005c18:	fb01 f303 	mul.w	r3, r1, r3
 8005c1c:	441a      	add	r2, r3
 8005c1e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	893a      	ldrh	r2, [r7, #8]
 8005c24:	fb02 f303 	mul.w	r3, r2, r3
 8005c28:	461a      	mov	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            if (i_x * stride - padding + dim_kernel >= dim_im_in)
 8005c30:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8005c34:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8005c36:	fb02 f203 	mul.w	r2, r2, r3
 8005c3a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005c3c:	1ad2      	subs	r2, r2, r3
 8005c3e:	88fb      	ldrh	r3, [r7, #6]
 8005c40:	441a      	add	r2, r3
 8005c42:	897b      	ldrh	r3, [r7, #10]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	db0d      	blt.n	8005c64 <arm_maxpool_q7_HWC+0xb8>
            {
                win_stop = Im_in + (i_y * dim_im_in + dim_im_in) * ch_im_in;
 8005c48:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	897a      	ldrh	r2, [r7, #10]
 8005c50:	fb02 f303 	mul.w	r3, r2, r3
 8005c54:	893a      	ldrh	r2, [r7, #8]
 8005c56:	fb02 f303 	mul.w	r3, r2, r3
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	4413      	add	r3, r2
 8005c60:	627b      	str	r3, [r7, #36]	; 0x24
 8005c62:	e015      	b.n	8005c90 <arm_maxpool_q7_HWC+0xe4>
            } else
            {
                win_stop = Im_in + (i_y * dim_im_in + i_x * stride - padding + dim_kernel) * ch_im_in;
 8005c64:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8005c68:	897a      	ldrh	r2, [r7, #10]
 8005c6a:	fb02 f203 	mul.w	r2, r2, r3
 8005c6e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8005c72:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 8005c74:	fb01 f303 	mul.w	r3, r1, r3
 8005c78:	441a      	add	r2, r3
 8005c7a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005c7c:	1ad2      	subs	r2, r2, r3
 8005c7e:	88fb      	ldrh	r3, [r7, #6]
 8005c80:	4413      	add	r3, r2
 8005c82:	893a      	ldrh	r2, [r7, #8]
 8005c84:	fb02 f303 	mul.w	r3, r2, r3
 8005c88:	461a      	mov	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* first step is to copy over initial data */
            /* arm_copy_q7(win_start, target, ch_im_in); */
            memmove(target, win_start, ch_im_in);
 8005c90:	893b      	ldrh	r3, [r7, #8]
 8005c92:	461a      	mov	r2, r3
 8005c94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c96:	6978      	ldr	r0, [r7, #20]
 8005c98:	f004 fc7b 	bl	800a592 <memmove>

            /* start the max operation from the second part */
            win_start += ch_im_in;
 8005c9c:	893b      	ldrh	r3, [r7, #8]
 8005c9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ca0:	4413      	add	r3, r2
 8005ca2:	62bb      	str	r3, [r7, #40]	; 0x28
            for (; win_start < win_stop; win_start += ch_im_in)
 8005ca4:	e009      	b.n	8005cba <arm_maxpool_q7_HWC+0x10e>
            {
                compare_and_replace_if_larger_q7(target, win_start, ch_im_in);
 8005ca6:	893b      	ldrh	r3, [r7, #8]
 8005ca8:	461a      	mov	r2, r3
 8005caa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cac:	6978      	ldr	r0, [r7, #20]
 8005cae:	f7ff ff2b 	bl	8005b08 <compare_and_replace_if_larger_q7>
            for (; win_start < win_stop; win_start += ch_im_in)
 8005cb2:	893b      	ldrh	r3, [r7, #8]
 8005cb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cb6:	4413      	add	r3, r2
 8005cb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d3f1      	bcc.n	8005ca6 <arm_maxpool_q7_HWC+0xfa>
        for (i_x = 0; i_x < dim_im_out; i_x++)
 8005cc2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	3301      	adds	r3, #1
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005cce:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8005cd2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	f6ff af7b 	blt.w	8005bd2 <arm_maxpool_q7_HWC+0x26>
    for (i_y = 0; i_y < dim_im_in; i_y++)
 8005cdc:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005ce8:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8005cec:	897b      	ldrh	r3, [r7, #10]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	f6ff af6c 	blt.w	8005bcc <arm_maxpool_q7_HWC+0x20>
            }
        }
    }

    /* then does the pooling along y axis */
    for (i_y = 0; i_y < dim_im_out; i_y++)
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005cf8:	e084      	b.n	8005e04 <arm_maxpool_q7_HWC+0x258>
    {

        /* for each output row */
        q7_t     *target = Im_out + i_y * dim_im_out * ch_im_in;
 8005cfa:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8005cfe:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005d02:	fb02 f303 	mul.w	r3, r2, r3
 8005d06:	893a      	ldrh	r2, [r7, #8]
 8005d08:	fb02 f303 	mul.w	r3, r2, r3
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d10:	4413      	add	r3, r2
 8005d12:	61bb      	str	r3, [r7, #24]
        q7_t     *row_start;
        q7_t     *row_end;
        /* setting the starting row */
        if (i_y * stride - padding < 0)
 8005d14:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8005d18:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8005d1a:	fb02 f203 	mul.w	r2, r2, r3
 8005d1e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	da02      	bge.n	8005d2c <arm_maxpool_q7_HWC+0x180>
        {
            row_start = Im_in;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	623b      	str	r3, [r7, #32]
 8005d2a:	e010      	b.n	8005d4e <arm_maxpool_q7_HWC+0x1a2>
        } else
        {
            row_start = Im_in + (i_y * stride - padding) * dim_im_in * ch_im_in;
 8005d2c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8005d30:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8005d32:	fb02 f203 	mul.w	r2, r2, r3
 8005d36:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	897a      	ldrh	r2, [r7, #10]
 8005d3c:	fb02 f303 	mul.w	r3, r2, r3
 8005d40:	893a      	ldrh	r2, [r7, #8]
 8005d42:	fb02 f303 	mul.w	r3, r2, r3
 8005d46:	461a      	mov	r2, r3
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	623b      	str	r3, [r7, #32]
        }
        /* setting the stopping row */
        if (i_y * stride - padding + dim_kernel >= dim_im_in)
 8005d4e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8005d52:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8005d54:	fb02 f203 	mul.w	r2, r2, r3
 8005d58:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005d5a:	1ad2      	subs	r2, r2, r3
 8005d5c:	88fb      	ldrh	r3, [r7, #6]
 8005d5e:	441a      	add	r2, r3
 8005d60:	897b      	ldrh	r3, [r7, #10]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	db0b      	blt.n	8005d7e <arm_maxpool_q7_HWC+0x1d2>
        {
            row_end = Im_in + dim_im_in * dim_im_in * ch_im_in;
 8005d66:	897b      	ldrh	r3, [r7, #10]
 8005d68:	897a      	ldrh	r2, [r7, #10]
 8005d6a:	fb02 f303 	mul.w	r3, r2, r3
 8005d6e:	893a      	ldrh	r2, [r7, #8]
 8005d70:	fb02 f303 	mul.w	r3, r2, r3
 8005d74:	461a      	mov	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	4413      	add	r3, r2
 8005d7a:	61fb      	str	r3, [r7, #28]
 8005d7c:	e012      	b.n	8005da4 <arm_maxpool_q7_HWC+0x1f8>
        } else
        {
            row_end = Im_in + (i_y * stride - padding + dim_kernel) * dim_im_in * ch_im_in;
 8005d7e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8005d82:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8005d84:	fb02 f203 	mul.w	r2, r2, r3
 8005d88:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005d8a:	1ad2      	subs	r2, r2, r3
 8005d8c:	88fb      	ldrh	r3, [r7, #6]
 8005d8e:	4413      	add	r3, r2
 8005d90:	897a      	ldrh	r2, [r7, #10]
 8005d92:	fb02 f303 	mul.w	r3, r2, r3
 8005d96:	893a      	ldrh	r2, [r7, #8]
 8005d98:	fb02 f303 	mul.w	r3, r2, r3
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	4413      	add	r3, r2
 8005da2:	61fb      	str	r3, [r7, #28]
        }

        /* copy over the first row */
        /* arm_copy_q7(row_start, target, dim_im_out * ch_im_in); */
        memmove(target, row_start, dim_im_out * ch_im_in);
 8005da4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005da8:	893a      	ldrh	r2, [r7, #8]
 8005daa:	fb02 f303 	mul.w	r3, r2, r3
 8005dae:	461a      	mov	r2, r3
 8005db0:	6a39      	ldr	r1, [r7, #32]
 8005db2:	69b8      	ldr	r0, [r7, #24]
 8005db4:	f004 fbed 	bl	800a592 <memmove>

        /* move over to next row */
        row_start += ch_im_in * dim_im_in;
 8005db8:	893b      	ldrh	r3, [r7, #8]
 8005dba:	897a      	ldrh	r2, [r7, #10]
 8005dbc:	fb02 f303 	mul.w	r3, r2, r3
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	6a3b      	ldr	r3, [r7, #32]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	623b      	str	r3, [r7, #32]

        for (; row_start < row_end; row_start += dim_im_in * ch_im_in)
 8005dc8:	e012      	b.n	8005df0 <arm_maxpool_q7_HWC+0x244>
        {
            compare_and_replace_if_larger_q7(target, row_start, dim_im_out * ch_im_in);
 8005dca:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005dce:	893b      	ldrh	r3, [r7, #8]
 8005dd0:	fb12 f303 	smulbb	r3, r2, r3
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	6a39      	ldr	r1, [r7, #32]
 8005dda:	69b8      	ldr	r0, [r7, #24]
 8005ddc:	f7ff fe94 	bl	8005b08 <compare_and_replace_if_larger_q7>
        for (; row_start < row_end; row_start += dim_im_in * ch_im_in)
 8005de0:	897b      	ldrh	r3, [r7, #10]
 8005de2:	893a      	ldrh	r2, [r7, #8]
 8005de4:	fb02 f303 	mul.w	r3, r2, r3
 8005de8:	461a      	mov	r2, r3
 8005dea:	6a3b      	ldr	r3, [r7, #32]
 8005dec:	4413      	add	r3, r2
 8005dee:	623b      	str	r3, [r7, #32]
 8005df0:	6a3a      	ldr	r2, [r7, #32]
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d3e8      	bcc.n	8005dca <arm_maxpool_q7_HWC+0x21e>
    for (i_y = 0; i_y < dim_im_out; i_y++)
 8005df8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	3301      	adds	r3, #1
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005e04:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8005e08:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	f6ff af74 	blt.w	8005cfa <arm_maxpool_q7_HWC+0x14e>
        }
    }

#endif                          /* ARM_MATH_DSP */

}
 8005e12:	bf00      	nop
 8005e14:	3730      	adds	r7, #48	; 0x30
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
	...

08005e1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005e20:	4b0e      	ldr	r3, [pc, #56]	; (8005e5c <HAL_Init+0x40>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a0d      	ldr	r2, [pc, #52]	; (8005e5c <HAL_Init+0x40>)
 8005e26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005e2c:	4b0b      	ldr	r3, [pc, #44]	; (8005e5c <HAL_Init+0x40>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a0a      	ldr	r2, [pc, #40]	; (8005e5c <HAL_Init+0x40>)
 8005e32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005e38:	4b08      	ldr	r3, [pc, #32]	; (8005e5c <HAL_Init+0x40>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a07      	ldr	r2, [pc, #28]	; (8005e5c <HAL_Init+0x40>)
 8005e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e44:	2003      	movs	r0, #3
 8005e46:	f000 f90d 	bl	8006064 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005e4a:	2000      	movs	r0, #0
 8005e4c:	f000 f808 	bl	8005e60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005e50:	f7fb fce0 	bl	8001814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	40023c00 	.word	0x40023c00

08005e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005e68:	4b12      	ldr	r3, [pc, #72]	; (8005eb4 <HAL_InitTick+0x54>)
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	4b12      	ldr	r3, [pc, #72]	; (8005eb8 <HAL_InitTick+0x58>)
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	4619      	mov	r1, r3
 8005e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e76:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f000 f917 	bl	80060b2 <HAL_SYSTICK_Config>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d001      	beq.n	8005e8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e00e      	b.n	8005eac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2b0f      	cmp	r3, #15
 8005e92:	d80a      	bhi.n	8005eaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005e94:	2200      	movs	r2, #0
 8005e96:	6879      	ldr	r1, [r7, #4]
 8005e98:	f04f 30ff 	mov.w	r0, #4294967295
 8005e9c:	f000 f8ed 	bl	800607a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005ea0:	4a06      	ldr	r2, [pc, #24]	; (8005ebc <HAL_InitTick+0x5c>)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	e000      	b.n	8005eac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3708      	adds	r7, #8
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	20000000 	.word	0x20000000
 8005eb8:	20000008 	.word	0x20000008
 8005ebc:	20000004 	.word	0x20000004

08005ec0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005ec4:	4b06      	ldr	r3, [pc, #24]	; (8005ee0 <HAL_IncTick+0x20>)
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	461a      	mov	r2, r3
 8005eca:	4b06      	ldr	r3, [pc, #24]	; (8005ee4 <HAL_IncTick+0x24>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4413      	add	r3, r2
 8005ed0:	4a04      	ldr	r2, [pc, #16]	; (8005ee4 <HAL_IncTick+0x24>)
 8005ed2:	6013      	str	r3, [r2, #0]
}
 8005ed4:	bf00      	nop
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	20000008 	.word	0x20000008
 8005ee4:	20000efc 	.word	0x20000efc

08005ee8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	af00      	add	r7, sp, #0
  return uwTick;
 8005eec:	4b03      	ldr	r3, [pc, #12]	; (8005efc <HAL_GetTick+0x14>)
 8005eee:	681b      	ldr	r3, [r3, #0]
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	20000efc 	.word	0x20000efc

08005f00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b085      	sub	sp, #20
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f003 0307 	and.w	r3, r3, #7
 8005f0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f10:	4b0c      	ldr	r3, [pc, #48]	; (8005f44 <__NVIC_SetPriorityGrouping+0x44>)
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f32:	4a04      	ldr	r2, [pc, #16]	; (8005f44 <__NVIC_SetPriorityGrouping+0x44>)
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	60d3      	str	r3, [r2, #12]
}
 8005f38:	bf00      	nop
 8005f3a:	3714      	adds	r7, #20
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr
 8005f44:	e000ed00 	.word	0xe000ed00

08005f48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f4c:	4b04      	ldr	r3, [pc, #16]	; (8005f60 <__NVIC_GetPriorityGrouping+0x18>)
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	0a1b      	lsrs	r3, r3, #8
 8005f52:	f003 0307 	and.w	r3, r3, #7
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr
 8005f60:	e000ed00 	.word	0xe000ed00

08005f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	6039      	str	r1, [r7, #0]
 8005f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	db0a      	blt.n	8005f8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	b2da      	uxtb	r2, r3
 8005f7c:	490c      	ldr	r1, [pc, #48]	; (8005fb0 <__NVIC_SetPriority+0x4c>)
 8005f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f82:	0112      	lsls	r2, r2, #4
 8005f84:	b2d2      	uxtb	r2, r2
 8005f86:	440b      	add	r3, r1
 8005f88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f8c:	e00a      	b.n	8005fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	b2da      	uxtb	r2, r3
 8005f92:	4908      	ldr	r1, [pc, #32]	; (8005fb4 <__NVIC_SetPriority+0x50>)
 8005f94:	79fb      	ldrb	r3, [r7, #7]
 8005f96:	f003 030f 	and.w	r3, r3, #15
 8005f9a:	3b04      	subs	r3, #4
 8005f9c:	0112      	lsls	r2, r2, #4
 8005f9e:	b2d2      	uxtb	r2, r2
 8005fa0:	440b      	add	r3, r1
 8005fa2:	761a      	strb	r2, [r3, #24]
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr
 8005fb0:	e000e100 	.word	0xe000e100
 8005fb4:	e000ed00 	.word	0xe000ed00

08005fb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b089      	sub	sp, #36	; 0x24
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f003 0307 	and.w	r3, r3, #7
 8005fca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	f1c3 0307 	rsb	r3, r3, #7
 8005fd2:	2b04      	cmp	r3, #4
 8005fd4:	bf28      	it	cs
 8005fd6:	2304      	movcs	r3, #4
 8005fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	3304      	adds	r3, #4
 8005fde:	2b06      	cmp	r3, #6
 8005fe0:	d902      	bls.n	8005fe8 <NVIC_EncodePriority+0x30>
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	3b03      	subs	r3, #3
 8005fe6:	e000      	b.n	8005fea <NVIC_EncodePriority+0x32>
 8005fe8:	2300      	movs	r3, #0
 8005fea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fec:	f04f 32ff 	mov.w	r2, #4294967295
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff6:	43da      	mvns	r2, r3
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	401a      	ands	r2, r3
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006000:	f04f 31ff 	mov.w	r1, #4294967295
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	fa01 f303 	lsl.w	r3, r1, r3
 800600a:	43d9      	mvns	r1, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006010:	4313      	orrs	r3, r2
         );
}
 8006012:	4618      	mov	r0, r3
 8006014:	3724      	adds	r7, #36	; 0x24
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
	...

08006020 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	3b01      	subs	r3, #1
 800602c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006030:	d301      	bcc.n	8006036 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006032:	2301      	movs	r3, #1
 8006034:	e00f      	b.n	8006056 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006036:	4a0a      	ldr	r2, [pc, #40]	; (8006060 <SysTick_Config+0x40>)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	3b01      	subs	r3, #1
 800603c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800603e:	210f      	movs	r1, #15
 8006040:	f04f 30ff 	mov.w	r0, #4294967295
 8006044:	f7ff ff8e 	bl	8005f64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006048:	4b05      	ldr	r3, [pc, #20]	; (8006060 <SysTick_Config+0x40>)
 800604a:	2200      	movs	r2, #0
 800604c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800604e:	4b04      	ldr	r3, [pc, #16]	; (8006060 <SysTick_Config+0x40>)
 8006050:	2207      	movs	r2, #7
 8006052:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3708      	adds	r7, #8
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	e000e010 	.word	0xe000e010

08006064 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f7ff ff47 	bl	8005f00 <__NVIC_SetPriorityGrouping>
}
 8006072:	bf00      	nop
 8006074:	3708      	adds	r7, #8
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800607a:	b580      	push	{r7, lr}
 800607c:	b086      	sub	sp, #24
 800607e:	af00      	add	r7, sp, #0
 8006080:	4603      	mov	r3, r0
 8006082:	60b9      	str	r1, [r7, #8]
 8006084:	607a      	str	r2, [r7, #4]
 8006086:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006088:	2300      	movs	r3, #0
 800608a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800608c:	f7ff ff5c 	bl	8005f48 <__NVIC_GetPriorityGrouping>
 8006090:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	68b9      	ldr	r1, [r7, #8]
 8006096:	6978      	ldr	r0, [r7, #20]
 8006098:	f7ff ff8e 	bl	8005fb8 <NVIC_EncodePriority>
 800609c:	4602      	mov	r2, r0
 800609e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060a2:	4611      	mov	r1, r2
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7ff ff5d 	bl	8005f64 <__NVIC_SetPriority>
}
 80060aa:	bf00      	nop
 80060ac:	3718      	adds	r7, #24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b082      	sub	sp, #8
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7ff ffb0 	bl	8006020 <SysTick_Config>
 80060c0:	4603      	mov	r3, r0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3708      	adds	r7, #8
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
	...

080060cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b089      	sub	sp, #36	; 0x24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80060d6:	2300      	movs	r3, #0
 80060d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80060da:	2300      	movs	r3, #0
 80060dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80060de:	2300      	movs	r3, #0
 80060e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80060e2:	2300      	movs	r3, #0
 80060e4:	61fb      	str	r3, [r7, #28]
 80060e6:	e159      	b.n	800639c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80060e8:	2201      	movs	r2, #1
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	fa02 f303 	lsl.w	r3, r2, r3
 80060f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	4013      	ands	r3, r2
 80060fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80060fc:	693a      	ldr	r2, [r7, #16]
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	429a      	cmp	r2, r3
 8006102:	f040 8148 	bne.w	8006396 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	2b01      	cmp	r3, #1
 800610c:	d00b      	beq.n	8006126 <HAL_GPIO_Init+0x5a>
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	2b02      	cmp	r3, #2
 8006114:	d007      	beq.n	8006126 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800611a:	2b11      	cmp	r3, #17
 800611c:	d003      	beq.n	8006126 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	2b12      	cmp	r3, #18
 8006124:	d130      	bne.n	8006188 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	005b      	lsls	r3, r3, #1
 8006130:	2203      	movs	r2, #3
 8006132:	fa02 f303 	lsl.w	r3, r2, r3
 8006136:	43db      	mvns	r3, r3
 8006138:	69ba      	ldr	r2, [r7, #24]
 800613a:	4013      	ands	r3, r2
 800613c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	68da      	ldr	r2, [r3, #12]
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	005b      	lsls	r3, r3, #1
 8006146:	fa02 f303 	lsl.w	r3, r2, r3
 800614a:	69ba      	ldr	r2, [r7, #24]
 800614c:	4313      	orrs	r3, r2
 800614e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	69ba      	ldr	r2, [r7, #24]
 8006154:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800615c:	2201      	movs	r2, #1
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	fa02 f303 	lsl.w	r3, r2, r3
 8006164:	43db      	mvns	r3, r3
 8006166:	69ba      	ldr	r2, [r7, #24]
 8006168:	4013      	ands	r3, r2
 800616a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	091b      	lsrs	r3, r3, #4
 8006172:	f003 0201 	and.w	r2, r3, #1
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	fa02 f303 	lsl.w	r3, r2, r3
 800617c:	69ba      	ldr	r2, [r7, #24]
 800617e:	4313      	orrs	r3, r2
 8006180:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	69ba      	ldr	r2, [r7, #24]
 8006186:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	005b      	lsls	r3, r3, #1
 8006192:	2203      	movs	r2, #3
 8006194:	fa02 f303 	lsl.w	r3, r2, r3
 8006198:	43db      	mvns	r3, r3
 800619a:	69ba      	ldr	r2, [r7, #24]
 800619c:	4013      	ands	r3, r2
 800619e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	689a      	ldr	r2, [r3, #8]
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	005b      	lsls	r3, r3, #1
 80061a8:	fa02 f303 	lsl.w	r3, r2, r3
 80061ac:	69ba      	ldr	r2, [r7, #24]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	69ba      	ldr	r2, [r7, #24]
 80061b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d003      	beq.n	80061c8 <HAL_GPIO_Init+0xfc>
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	2b12      	cmp	r3, #18
 80061c6:	d123      	bne.n	8006210 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	08da      	lsrs	r2, r3, #3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	3208      	adds	r2, #8
 80061d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	f003 0307 	and.w	r3, r3, #7
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	220f      	movs	r2, #15
 80061e0:	fa02 f303 	lsl.w	r3, r2, r3
 80061e4:	43db      	mvns	r3, r3
 80061e6:	69ba      	ldr	r2, [r7, #24]
 80061e8:	4013      	ands	r3, r2
 80061ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	691a      	ldr	r2, [r3, #16]
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	f003 0307 	and.w	r3, r3, #7
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	fa02 f303 	lsl.w	r3, r2, r3
 80061fc:	69ba      	ldr	r2, [r7, #24]
 80061fe:	4313      	orrs	r3, r2
 8006200:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	08da      	lsrs	r2, r3, #3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	3208      	adds	r2, #8
 800620a:	69b9      	ldr	r1, [r7, #24]
 800620c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	005b      	lsls	r3, r3, #1
 800621a:	2203      	movs	r2, #3
 800621c:	fa02 f303 	lsl.w	r3, r2, r3
 8006220:	43db      	mvns	r3, r3
 8006222:	69ba      	ldr	r2, [r7, #24]
 8006224:	4013      	ands	r3, r2
 8006226:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	f003 0203 	and.w	r2, r3, #3
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	005b      	lsls	r3, r3, #1
 8006234:	fa02 f303 	lsl.w	r3, r2, r3
 8006238:	69ba      	ldr	r2, [r7, #24]
 800623a:	4313      	orrs	r3, r2
 800623c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	69ba      	ldr	r2, [r7, #24]
 8006242:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800624c:	2b00      	cmp	r3, #0
 800624e:	f000 80a2 	beq.w	8006396 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006252:	2300      	movs	r3, #0
 8006254:	60fb      	str	r3, [r7, #12]
 8006256:	4b56      	ldr	r3, [pc, #344]	; (80063b0 <HAL_GPIO_Init+0x2e4>)
 8006258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800625a:	4a55      	ldr	r2, [pc, #340]	; (80063b0 <HAL_GPIO_Init+0x2e4>)
 800625c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006260:	6453      	str	r3, [r2, #68]	; 0x44
 8006262:	4b53      	ldr	r3, [pc, #332]	; (80063b0 <HAL_GPIO_Init+0x2e4>)
 8006264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800626a:	60fb      	str	r3, [r7, #12]
 800626c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800626e:	4a51      	ldr	r2, [pc, #324]	; (80063b4 <HAL_GPIO_Init+0x2e8>)
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	089b      	lsrs	r3, r3, #2
 8006274:	3302      	adds	r3, #2
 8006276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800627a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	f003 0303 	and.w	r3, r3, #3
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	220f      	movs	r2, #15
 8006286:	fa02 f303 	lsl.w	r3, r2, r3
 800628a:	43db      	mvns	r3, r3
 800628c:	69ba      	ldr	r2, [r7, #24]
 800628e:	4013      	ands	r3, r2
 8006290:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a48      	ldr	r2, [pc, #288]	; (80063b8 <HAL_GPIO_Init+0x2ec>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d019      	beq.n	80062ce <HAL_GPIO_Init+0x202>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a47      	ldr	r2, [pc, #284]	; (80063bc <HAL_GPIO_Init+0x2f0>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d013      	beq.n	80062ca <HAL_GPIO_Init+0x1fe>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a46      	ldr	r2, [pc, #280]	; (80063c0 <HAL_GPIO_Init+0x2f4>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d00d      	beq.n	80062c6 <HAL_GPIO_Init+0x1fa>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a45      	ldr	r2, [pc, #276]	; (80063c4 <HAL_GPIO_Init+0x2f8>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d007      	beq.n	80062c2 <HAL_GPIO_Init+0x1f6>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a44      	ldr	r2, [pc, #272]	; (80063c8 <HAL_GPIO_Init+0x2fc>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d101      	bne.n	80062be <HAL_GPIO_Init+0x1f2>
 80062ba:	2304      	movs	r3, #4
 80062bc:	e008      	b.n	80062d0 <HAL_GPIO_Init+0x204>
 80062be:	2307      	movs	r3, #7
 80062c0:	e006      	b.n	80062d0 <HAL_GPIO_Init+0x204>
 80062c2:	2303      	movs	r3, #3
 80062c4:	e004      	b.n	80062d0 <HAL_GPIO_Init+0x204>
 80062c6:	2302      	movs	r3, #2
 80062c8:	e002      	b.n	80062d0 <HAL_GPIO_Init+0x204>
 80062ca:	2301      	movs	r3, #1
 80062cc:	e000      	b.n	80062d0 <HAL_GPIO_Init+0x204>
 80062ce:	2300      	movs	r3, #0
 80062d0:	69fa      	ldr	r2, [r7, #28]
 80062d2:	f002 0203 	and.w	r2, r2, #3
 80062d6:	0092      	lsls	r2, r2, #2
 80062d8:	4093      	lsls	r3, r2
 80062da:	69ba      	ldr	r2, [r7, #24]
 80062dc:	4313      	orrs	r3, r2
 80062de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80062e0:	4934      	ldr	r1, [pc, #208]	; (80063b4 <HAL_GPIO_Init+0x2e8>)
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	089b      	lsrs	r3, r3, #2
 80062e6:	3302      	adds	r3, #2
 80062e8:	69ba      	ldr	r2, [r7, #24]
 80062ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80062ee:	4b37      	ldr	r3, [pc, #220]	; (80063cc <HAL_GPIO_Init+0x300>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	43db      	mvns	r3, r3
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	4013      	ands	r3, r2
 80062fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d003      	beq.n	8006312 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800630a:	69ba      	ldr	r2, [r7, #24]
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	4313      	orrs	r3, r2
 8006310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006312:	4a2e      	ldr	r2, [pc, #184]	; (80063cc <HAL_GPIO_Init+0x300>)
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006318:	4b2c      	ldr	r3, [pc, #176]	; (80063cc <HAL_GPIO_Init+0x300>)
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	43db      	mvns	r3, r3
 8006322:	69ba      	ldr	r2, [r7, #24]
 8006324:	4013      	ands	r3, r2
 8006326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006330:	2b00      	cmp	r3, #0
 8006332:	d003      	beq.n	800633c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006334:	69ba      	ldr	r2, [r7, #24]
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	4313      	orrs	r3, r2
 800633a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800633c:	4a23      	ldr	r2, [pc, #140]	; (80063cc <HAL_GPIO_Init+0x300>)
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006342:	4b22      	ldr	r3, [pc, #136]	; (80063cc <HAL_GPIO_Init+0x300>)
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	43db      	mvns	r3, r3
 800634c:	69ba      	ldr	r2, [r7, #24]
 800634e:	4013      	ands	r3, r2
 8006350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d003      	beq.n	8006366 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800635e:	69ba      	ldr	r2, [r7, #24]
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	4313      	orrs	r3, r2
 8006364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006366:	4a19      	ldr	r2, [pc, #100]	; (80063cc <HAL_GPIO_Init+0x300>)
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800636c:	4b17      	ldr	r3, [pc, #92]	; (80063cc <HAL_GPIO_Init+0x300>)
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	43db      	mvns	r3, r3
 8006376:	69ba      	ldr	r2, [r7, #24]
 8006378:	4013      	ands	r3, r2
 800637a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006384:	2b00      	cmp	r3, #0
 8006386:	d003      	beq.n	8006390 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006388:	69ba      	ldr	r2, [r7, #24]
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	4313      	orrs	r3, r2
 800638e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006390:	4a0e      	ldr	r2, [pc, #56]	; (80063cc <HAL_GPIO_Init+0x300>)
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	3301      	adds	r3, #1
 800639a:	61fb      	str	r3, [r7, #28]
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	2b0f      	cmp	r3, #15
 80063a0:	f67f aea2 	bls.w	80060e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80063a4:	bf00      	nop
 80063a6:	3724      	adds	r7, #36	; 0x24
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr
 80063b0:	40023800 	.word	0x40023800
 80063b4:	40013800 	.word	0x40013800
 80063b8:	40020000 	.word	0x40020000
 80063bc:	40020400 	.word	0x40020400
 80063c0:	40020800 	.word	0x40020800
 80063c4:	40020c00 	.word	0x40020c00
 80063c8:	40021000 	.word	0x40021000
 80063cc:	40013c00 	.word	0x40013c00

080063d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	460b      	mov	r3, r1
 80063da:	807b      	strh	r3, [r7, #2]
 80063dc:	4613      	mov	r3, r2
 80063de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80063e0:	787b      	ldrb	r3, [r7, #1]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d003      	beq.n	80063ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80063e6:	887a      	ldrh	r2, [r7, #2]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80063ec:	e003      	b.n	80063f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80063ee:	887b      	ldrh	r3, [r7, #2]
 80063f0:	041a      	lsls	r2, r3, #16
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	619a      	str	r2, [r3, #24]
}
 80063f6:	bf00      	nop
 80063f8:	370c      	adds	r7, #12
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr
	...

08006404 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b086      	sub	sp, #24
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d101      	bne.n	8006416 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e25b      	b.n	80068ce <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 0301 	and.w	r3, r3, #1
 800641e:	2b00      	cmp	r3, #0
 8006420:	d075      	beq.n	800650e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006422:	4ba3      	ldr	r3, [pc, #652]	; (80066b0 <HAL_RCC_OscConfig+0x2ac>)
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	f003 030c 	and.w	r3, r3, #12
 800642a:	2b04      	cmp	r3, #4
 800642c:	d00c      	beq.n	8006448 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800642e:	4ba0      	ldr	r3, [pc, #640]	; (80066b0 <HAL_RCC_OscConfig+0x2ac>)
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006436:	2b08      	cmp	r3, #8
 8006438:	d112      	bne.n	8006460 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800643a:	4b9d      	ldr	r3, [pc, #628]	; (80066b0 <HAL_RCC_OscConfig+0x2ac>)
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006442:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006446:	d10b      	bne.n	8006460 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006448:	4b99      	ldr	r3, [pc, #612]	; (80066b0 <HAL_RCC_OscConfig+0x2ac>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d05b      	beq.n	800650c <HAL_RCC_OscConfig+0x108>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d157      	bne.n	800650c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	e236      	b.n	80068ce <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006468:	d106      	bne.n	8006478 <HAL_RCC_OscConfig+0x74>
 800646a:	4b91      	ldr	r3, [pc, #580]	; (80066b0 <HAL_RCC_OscConfig+0x2ac>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a90      	ldr	r2, [pc, #576]	; (80066b0 <HAL_RCC_OscConfig+0x2ac>)
 8006470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006474:	6013      	str	r3, [r2, #0]
 8006476:	e01d      	b.n	80064b4 <HAL_RCC_OscConfig+0xb0>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006480:	d10c      	bne.n	800649c <HAL_RCC_OscConfig+0x98>
 8006482:	4b8b      	ldr	r3, [pc, #556]	; (80066b0 <HAL_RCC_OscConfig+0x2ac>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a8a      	ldr	r2, [pc, #552]	; (80066b0 <HAL_RCC_OscConfig+0x2ac>)
 8006488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800648c:	6013      	str	r3, [r2, #0]
 800648e:	4b88      	ldr	r3, [pc, #544]	; (80066b0 <HAL_RCC_OscConfig+0x2ac>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a87      	ldr	r2, [pc, #540]	; (80066b0 <HAL_RCC_OscConfig+0x2ac>)
 8006494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006498:	6013      	str	r3, [r2, #0]
 800649a:	e00b      	b.n	80064b4 <HAL_RCC_OscConfig+0xb0>
 800649c:	4b84      	ldr	r3, [pc, #528]	; (80066b0 <HAL_RCC_OscConfig+0x2ac>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a83      	ldr	r2, [pc, #524]	; (80066b0 <HAL_RCC_OscConfig+0x2ac>)
 80064a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064a6:	6013      	str	r3, [r2, #0]
 80064a8:	4b81      	ldr	r3, [pc, #516]	; (80066b0 <HAL_RCC_OscConfig+0x2ac>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a80      	ldr	r2, [pc, #512]	; (80066b0 <HAL_RCC_OscConfig+0x2ac>)
 80064ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d013      	beq.n	80064e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064bc:	f7ff fd14 	bl	8005ee8 <HAL_GetTick>
 80064c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064c2:	e008      	b.n	80064d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064c4:	f7ff fd10 	bl	8005ee8 <HAL_GetTick>
 80064c8:	4602      	mov	r2, r0
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	2b64      	cmp	r3, #100	; 0x64
 80064d0:	d901      	bls.n	80064d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e1fb      	b.n	80068ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064d6:	4b76      	ldr	r3, [pc, #472]	; (80066b0 <HAL_RCC_OscConfig+0x2ac>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d0f0      	beq.n	80064c4 <HAL_RCC_OscConfig+0xc0>
 80064e2:	e014      	b.n	800650e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064e4:	f7ff fd00 	bl	8005ee8 <HAL_GetTick>
 80064e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064ea:	e008      	b.n	80064fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064ec:	f7ff fcfc 	bl	8005ee8 <HAL_GetTick>
 80064f0:	4602      	mov	r2, r0
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	2b64      	cmp	r3, #100	; 0x64
 80064f8:	d901      	bls.n	80064fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80064fa:	2303      	movs	r3, #3
 80064fc:	e1e7      	b.n	80068ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064fe:	4b6c      	ldr	r3, [pc, #432]	; (80066b0 <HAL_RCC_OscConfig+0x2ac>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1f0      	bne.n	80064ec <HAL_RCC_OscConfig+0xe8>
 800650a:	e000      	b.n	800650e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800650c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0302 	and.w	r3, r3, #2
 8006516:	2b00      	cmp	r3, #0
 8006518:	d063      	beq.n	80065e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800651a:	4b65      	ldr	r3, [pc, #404]	; (80066b0 <HAL_RCC_OscConfig+0x2ac>)
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	f003 030c 	and.w	r3, r3, #12
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00b      	beq.n	800653e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006526:	4b62      	ldr	r3, [pc, #392]	; (80066b0 <HAL_RCC_OscConfig+0x2ac>)
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800652e:	2b08      	cmp	r3, #8
 8006530:	d11c      	bne.n	800656c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006532:	4b5f      	ldr	r3, [pc, #380]	; (80066b0 <HAL_RCC_OscConfig+0x2ac>)
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800653a:	2b00      	cmp	r3, #0
 800653c:	d116      	bne.n	800656c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800653e:	4b5c      	ldr	r3, [pc, #368]	; (80066b0 <HAL_RCC_OscConfig+0x2ac>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 0302 	and.w	r3, r3, #2
 8006546:	2b00      	cmp	r3, #0
 8006548:	d005      	beq.n	8006556 <HAL_RCC_OscConfig+0x152>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d001      	beq.n	8006556 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e1bb      	b.n	80068ce <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006556:	4b56      	ldr	r3, [pc, #344]	; (80066b0 <HAL_RCC_OscConfig+0x2ac>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	00db      	lsls	r3, r3, #3
 8006564:	4952      	ldr	r1, [pc, #328]	; (80066b0 <HAL_RCC_OscConfig+0x2ac>)
 8006566:	4313      	orrs	r3, r2
 8006568:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800656a:	e03a      	b.n	80065e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d020      	beq.n	80065b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006574:	4b4f      	ldr	r3, [pc, #316]	; (80066b4 <HAL_RCC_OscConfig+0x2b0>)
 8006576:	2201      	movs	r2, #1
 8006578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800657a:	f7ff fcb5 	bl	8005ee8 <HAL_GetTick>
 800657e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006580:	e008      	b.n	8006594 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006582:	f7ff fcb1 	bl	8005ee8 <HAL_GetTick>
 8006586:	4602      	mov	r2, r0
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	2b02      	cmp	r3, #2
 800658e:	d901      	bls.n	8006594 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	e19c      	b.n	80068ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006594:	4b46      	ldr	r3, [pc, #280]	; (80066b0 <HAL_RCC_OscConfig+0x2ac>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 0302 	and.w	r3, r3, #2
 800659c:	2b00      	cmp	r3, #0
 800659e:	d0f0      	beq.n	8006582 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065a0:	4b43      	ldr	r3, [pc, #268]	; (80066b0 <HAL_RCC_OscConfig+0x2ac>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	00db      	lsls	r3, r3, #3
 80065ae:	4940      	ldr	r1, [pc, #256]	; (80066b0 <HAL_RCC_OscConfig+0x2ac>)
 80065b0:	4313      	orrs	r3, r2
 80065b2:	600b      	str	r3, [r1, #0]
 80065b4:	e015      	b.n	80065e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065b6:	4b3f      	ldr	r3, [pc, #252]	; (80066b4 <HAL_RCC_OscConfig+0x2b0>)
 80065b8:	2200      	movs	r2, #0
 80065ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065bc:	f7ff fc94 	bl	8005ee8 <HAL_GetTick>
 80065c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065c2:	e008      	b.n	80065d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065c4:	f7ff fc90 	bl	8005ee8 <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d901      	bls.n	80065d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e17b      	b.n	80068ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065d6:	4b36      	ldr	r3, [pc, #216]	; (80066b0 <HAL_RCC_OscConfig+0x2ac>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 0302 	and.w	r3, r3, #2
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1f0      	bne.n	80065c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 0308 	and.w	r3, r3, #8
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d030      	beq.n	8006650 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d016      	beq.n	8006624 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065f6:	4b30      	ldr	r3, [pc, #192]	; (80066b8 <HAL_RCC_OscConfig+0x2b4>)
 80065f8:	2201      	movs	r2, #1
 80065fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065fc:	f7ff fc74 	bl	8005ee8 <HAL_GetTick>
 8006600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006602:	e008      	b.n	8006616 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006604:	f7ff fc70 	bl	8005ee8 <HAL_GetTick>
 8006608:	4602      	mov	r2, r0
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	2b02      	cmp	r3, #2
 8006610:	d901      	bls.n	8006616 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	e15b      	b.n	80068ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006616:	4b26      	ldr	r3, [pc, #152]	; (80066b0 <HAL_RCC_OscConfig+0x2ac>)
 8006618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800661a:	f003 0302 	and.w	r3, r3, #2
 800661e:	2b00      	cmp	r3, #0
 8006620:	d0f0      	beq.n	8006604 <HAL_RCC_OscConfig+0x200>
 8006622:	e015      	b.n	8006650 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006624:	4b24      	ldr	r3, [pc, #144]	; (80066b8 <HAL_RCC_OscConfig+0x2b4>)
 8006626:	2200      	movs	r2, #0
 8006628:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800662a:	f7ff fc5d 	bl	8005ee8 <HAL_GetTick>
 800662e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006630:	e008      	b.n	8006644 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006632:	f7ff fc59 	bl	8005ee8 <HAL_GetTick>
 8006636:	4602      	mov	r2, r0
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	2b02      	cmp	r3, #2
 800663e:	d901      	bls.n	8006644 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	e144      	b.n	80068ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006644:	4b1a      	ldr	r3, [pc, #104]	; (80066b0 <HAL_RCC_OscConfig+0x2ac>)
 8006646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006648:	f003 0302 	and.w	r3, r3, #2
 800664c:	2b00      	cmp	r3, #0
 800664e:	d1f0      	bne.n	8006632 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 0304 	and.w	r3, r3, #4
 8006658:	2b00      	cmp	r3, #0
 800665a:	f000 80a0 	beq.w	800679e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800665e:	2300      	movs	r3, #0
 8006660:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006662:	4b13      	ldr	r3, [pc, #76]	; (80066b0 <HAL_RCC_OscConfig+0x2ac>)
 8006664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10f      	bne.n	800668e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800666e:	2300      	movs	r3, #0
 8006670:	60bb      	str	r3, [r7, #8]
 8006672:	4b0f      	ldr	r3, [pc, #60]	; (80066b0 <HAL_RCC_OscConfig+0x2ac>)
 8006674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006676:	4a0e      	ldr	r2, [pc, #56]	; (80066b0 <HAL_RCC_OscConfig+0x2ac>)
 8006678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800667c:	6413      	str	r3, [r2, #64]	; 0x40
 800667e:	4b0c      	ldr	r3, [pc, #48]	; (80066b0 <HAL_RCC_OscConfig+0x2ac>)
 8006680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006686:	60bb      	str	r3, [r7, #8]
 8006688:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800668a:	2301      	movs	r3, #1
 800668c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800668e:	4b0b      	ldr	r3, [pc, #44]	; (80066bc <HAL_RCC_OscConfig+0x2b8>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006696:	2b00      	cmp	r3, #0
 8006698:	d121      	bne.n	80066de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800669a:	4b08      	ldr	r3, [pc, #32]	; (80066bc <HAL_RCC_OscConfig+0x2b8>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a07      	ldr	r2, [pc, #28]	; (80066bc <HAL_RCC_OscConfig+0x2b8>)
 80066a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066a6:	f7ff fc1f 	bl	8005ee8 <HAL_GetTick>
 80066aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066ac:	e011      	b.n	80066d2 <HAL_RCC_OscConfig+0x2ce>
 80066ae:	bf00      	nop
 80066b0:	40023800 	.word	0x40023800
 80066b4:	42470000 	.word	0x42470000
 80066b8:	42470e80 	.word	0x42470e80
 80066bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066c0:	f7ff fc12 	bl	8005ee8 <HAL_GetTick>
 80066c4:	4602      	mov	r2, r0
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	2b02      	cmp	r3, #2
 80066cc:	d901      	bls.n	80066d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e0fd      	b.n	80068ce <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066d2:	4b81      	ldr	r3, [pc, #516]	; (80068d8 <HAL_RCC_OscConfig+0x4d4>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d0f0      	beq.n	80066c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d106      	bne.n	80066f4 <HAL_RCC_OscConfig+0x2f0>
 80066e6:	4b7d      	ldr	r3, [pc, #500]	; (80068dc <HAL_RCC_OscConfig+0x4d8>)
 80066e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ea:	4a7c      	ldr	r2, [pc, #496]	; (80068dc <HAL_RCC_OscConfig+0x4d8>)
 80066ec:	f043 0301 	orr.w	r3, r3, #1
 80066f0:	6713      	str	r3, [r2, #112]	; 0x70
 80066f2:	e01c      	b.n	800672e <HAL_RCC_OscConfig+0x32a>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	2b05      	cmp	r3, #5
 80066fa:	d10c      	bne.n	8006716 <HAL_RCC_OscConfig+0x312>
 80066fc:	4b77      	ldr	r3, [pc, #476]	; (80068dc <HAL_RCC_OscConfig+0x4d8>)
 80066fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006700:	4a76      	ldr	r2, [pc, #472]	; (80068dc <HAL_RCC_OscConfig+0x4d8>)
 8006702:	f043 0304 	orr.w	r3, r3, #4
 8006706:	6713      	str	r3, [r2, #112]	; 0x70
 8006708:	4b74      	ldr	r3, [pc, #464]	; (80068dc <HAL_RCC_OscConfig+0x4d8>)
 800670a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800670c:	4a73      	ldr	r2, [pc, #460]	; (80068dc <HAL_RCC_OscConfig+0x4d8>)
 800670e:	f043 0301 	orr.w	r3, r3, #1
 8006712:	6713      	str	r3, [r2, #112]	; 0x70
 8006714:	e00b      	b.n	800672e <HAL_RCC_OscConfig+0x32a>
 8006716:	4b71      	ldr	r3, [pc, #452]	; (80068dc <HAL_RCC_OscConfig+0x4d8>)
 8006718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800671a:	4a70      	ldr	r2, [pc, #448]	; (80068dc <HAL_RCC_OscConfig+0x4d8>)
 800671c:	f023 0301 	bic.w	r3, r3, #1
 8006720:	6713      	str	r3, [r2, #112]	; 0x70
 8006722:	4b6e      	ldr	r3, [pc, #440]	; (80068dc <HAL_RCC_OscConfig+0x4d8>)
 8006724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006726:	4a6d      	ldr	r2, [pc, #436]	; (80068dc <HAL_RCC_OscConfig+0x4d8>)
 8006728:	f023 0304 	bic.w	r3, r3, #4
 800672c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d015      	beq.n	8006762 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006736:	f7ff fbd7 	bl	8005ee8 <HAL_GetTick>
 800673a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800673c:	e00a      	b.n	8006754 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800673e:	f7ff fbd3 	bl	8005ee8 <HAL_GetTick>
 8006742:	4602      	mov	r2, r0
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	f241 3288 	movw	r2, #5000	; 0x1388
 800674c:	4293      	cmp	r3, r2
 800674e:	d901      	bls.n	8006754 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006750:	2303      	movs	r3, #3
 8006752:	e0bc      	b.n	80068ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006754:	4b61      	ldr	r3, [pc, #388]	; (80068dc <HAL_RCC_OscConfig+0x4d8>)
 8006756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006758:	f003 0302 	and.w	r3, r3, #2
 800675c:	2b00      	cmp	r3, #0
 800675e:	d0ee      	beq.n	800673e <HAL_RCC_OscConfig+0x33a>
 8006760:	e014      	b.n	800678c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006762:	f7ff fbc1 	bl	8005ee8 <HAL_GetTick>
 8006766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006768:	e00a      	b.n	8006780 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800676a:	f7ff fbbd 	bl	8005ee8 <HAL_GetTick>
 800676e:	4602      	mov	r2, r0
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	f241 3288 	movw	r2, #5000	; 0x1388
 8006778:	4293      	cmp	r3, r2
 800677a:	d901      	bls.n	8006780 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800677c:	2303      	movs	r3, #3
 800677e:	e0a6      	b.n	80068ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006780:	4b56      	ldr	r3, [pc, #344]	; (80068dc <HAL_RCC_OscConfig+0x4d8>)
 8006782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006784:	f003 0302 	and.w	r3, r3, #2
 8006788:	2b00      	cmp	r3, #0
 800678a:	d1ee      	bne.n	800676a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800678c:	7dfb      	ldrb	r3, [r7, #23]
 800678e:	2b01      	cmp	r3, #1
 8006790:	d105      	bne.n	800679e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006792:	4b52      	ldr	r3, [pc, #328]	; (80068dc <HAL_RCC_OscConfig+0x4d8>)
 8006794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006796:	4a51      	ldr	r2, [pc, #324]	; (80068dc <HAL_RCC_OscConfig+0x4d8>)
 8006798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800679c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f000 8092 	beq.w	80068cc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80067a8:	4b4c      	ldr	r3, [pc, #304]	; (80068dc <HAL_RCC_OscConfig+0x4d8>)
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	f003 030c 	and.w	r3, r3, #12
 80067b0:	2b08      	cmp	r3, #8
 80067b2:	d05c      	beq.n	800686e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	d141      	bne.n	8006840 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067bc:	4b48      	ldr	r3, [pc, #288]	; (80068e0 <HAL_RCC_OscConfig+0x4dc>)
 80067be:	2200      	movs	r2, #0
 80067c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067c2:	f7ff fb91 	bl	8005ee8 <HAL_GetTick>
 80067c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067c8:	e008      	b.n	80067dc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067ca:	f7ff fb8d 	bl	8005ee8 <HAL_GetTick>
 80067ce:	4602      	mov	r2, r0
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d901      	bls.n	80067dc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80067d8:	2303      	movs	r3, #3
 80067da:	e078      	b.n	80068ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067dc:	4b3f      	ldr	r3, [pc, #252]	; (80068dc <HAL_RCC_OscConfig+0x4d8>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d1f0      	bne.n	80067ca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	69da      	ldr	r2, [r3, #28]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a1b      	ldr	r3, [r3, #32]
 80067f0:	431a      	orrs	r2, r3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f6:	019b      	lsls	r3, r3, #6
 80067f8:	431a      	orrs	r2, r3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067fe:	085b      	lsrs	r3, r3, #1
 8006800:	3b01      	subs	r3, #1
 8006802:	041b      	lsls	r3, r3, #16
 8006804:	431a      	orrs	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800680a:	061b      	lsls	r3, r3, #24
 800680c:	4933      	ldr	r1, [pc, #204]	; (80068dc <HAL_RCC_OscConfig+0x4d8>)
 800680e:	4313      	orrs	r3, r2
 8006810:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006812:	4b33      	ldr	r3, [pc, #204]	; (80068e0 <HAL_RCC_OscConfig+0x4dc>)
 8006814:	2201      	movs	r2, #1
 8006816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006818:	f7ff fb66 	bl	8005ee8 <HAL_GetTick>
 800681c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800681e:	e008      	b.n	8006832 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006820:	f7ff fb62 	bl	8005ee8 <HAL_GetTick>
 8006824:	4602      	mov	r2, r0
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	2b02      	cmp	r3, #2
 800682c:	d901      	bls.n	8006832 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800682e:	2303      	movs	r3, #3
 8006830:	e04d      	b.n	80068ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006832:	4b2a      	ldr	r3, [pc, #168]	; (80068dc <HAL_RCC_OscConfig+0x4d8>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d0f0      	beq.n	8006820 <HAL_RCC_OscConfig+0x41c>
 800683e:	e045      	b.n	80068cc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006840:	4b27      	ldr	r3, [pc, #156]	; (80068e0 <HAL_RCC_OscConfig+0x4dc>)
 8006842:	2200      	movs	r2, #0
 8006844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006846:	f7ff fb4f 	bl	8005ee8 <HAL_GetTick>
 800684a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800684c:	e008      	b.n	8006860 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800684e:	f7ff fb4b 	bl	8005ee8 <HAL_GetTick>
 8006852:	4602      	mov	r2, r0
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	2b02      	cmp	r3, #2
 800685a:	d901      	bls.n	8006860 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	e036      	b.n	80068ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006860:	4b1e      	ldr	r3, [pc, #120]	; (80068dc <HAL_RCC_OscConfig+0x4d8>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006868:	2b00      	cmp	r3, #0
 800686a:	d1f0      	bne.n	800684e <HAL_RCC_OscConfig+0x44a>
 800686c:	e02e      	b.n	80068cc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	2b01      	cmp	r3, #1
 8006874:	d101      	bne.n	800687a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e029      	b.n	80068ce <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800687a:	4b18      	ldr	r3, [pc, #96]	; (80068dc <HAL_RCC_OscConfig+0x4d8>)
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	69db      	ldr	r3, [r3, #28]
 800688a:	429a      	cmp	r2, r3
 800688c:	d11c      	bne.n	80068c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006898:	429a      	cmp	r2, r3
 800689a:	d115      	bne.n	80068c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80068a2:	4013      	ands	r3, r2
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d10d      	bne.n	80068c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d106      	bne.n	80068c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d001      	beq.n	80068cc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e000      	b.n	80068ce <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3718      	adds	r7, #24
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	40007000 	.word	0x40007000
 80068dc:	40023800 	.word	0x40023800
 80068e0:	42470060 	.word	0x42470060

080068e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d101      	bne.n	80068f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	e0cc      	b.n	8006a92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80068f8:	4b68      	ldr	r3, [pc, #416]	; (8006a9c <HAL_RCC_ClockConfig+0x1b8>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 030f 	and.w	r3, r3, #15
 8006900:	683a      	ldr	r2, [r7, #0]
 8006902:	429a      	cmp	r2, r3
 8006904:	d90c      	bls.n	8006920 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006906:	4b65      	ldr	r3, [pc, #404]	; (8006a9c <HAL_RCC_ClockConfig+0x1b8>)
 8006908:	683a      	ldr	r2, [r7, #0]
 800690a:	b2d2      	uxtb	r2, r2
 800690c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800690e:	4b63      	ldr	r3, [pc, #396]	; (8006a9c <HAL_RCC_ClockConfig+0x1b8>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 030f 	and.w	r3, r3, #15
 8006916:	683a      	ldr	r2, [r7, #0]
 8006918:	429a      	cmp	r2, r3
 800691a:	d001      	beq.n	8006920 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e0b8      	b.n	8006a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0302 	and.w	r3, r3, #2
 8006928:	2b00      	cmp	r3, #0
 800692a:	d020      	beq.n	800696e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0304 	and.w	r3, r3, #4
 8006934:	2b00      	cmp	r3, #0
 8006936:	d005      	beq.n	8006944 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006938:	4b59      	ldr	r3, [pc, #356]	; (8006aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	4a58      	ldr	r2, [pc, #352]	; (8006aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800693e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006942:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 0308 	and.w	r3, r3, #8
 800694c:	2b00      	cmp	r3, #0
 800694e:	d005      	beq.n	800695c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006950:	4b53      	ldr	r3, [pc, #332]	; (8006aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	4a52      	ldr	r2, [pc, #328]	; (8006aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8006956:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800695a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800695c:	4b50      	ldr	r3, [pc, #320]	; (8006aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	494d      	ldr	r1, [pc, #308]	; (8006aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800696a:	4313      	orrs	r3, r2
 800696c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 0301 	and.w	r3, r3, #1
 8006976:	2b00      	cmp	r3, #0
 8006978:	d044      	beq.n	8006a04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	2b01      	cmp	r3, #1
 8006980:	d107      	bne.n	8006992 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006982:	4b47      	ldr	r3, [pc, #284]	; (8006aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d119      	bne.n	80069c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e07f      	b.n	8006a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	2b02      	cmp	r3, #2
 8006998:	d003      	beq.n	80069a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800699e:	2b03      	cmp	r3, #3
 80069a0:	d107      	bne.n	80069b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069a2:	4b3f      	ldr	r3, [pc, #252]	; (8006aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d109      	bne.n	80069c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e06f      	b.n	8006a92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069b2:	4b3b      	ldr	r3, [pc, #236]	; (8006aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0302 	and.w	r3, r3, #2
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d101      	bne.n	80069c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e067      	b.n	8006a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80069c2:	4b37      	ldr	r3, [pc, #220]	; (8006aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f023 0203 	bic.w	r2, r3, #3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	4934      	ldr	r1, [pc, #208]	; (8006aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80069d0:	4313      	orrs	r3, r2
 80069d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80069d4:	f7ff fa88 	bl	8005ee8 <HAL_GetTick>
 80069d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069da:	e00a      	b.n	80069f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069dc:	f7ff fa84 	bl	8005ee8 <HAL_GetTick>
 80069e0:	4602      	mov	r2, r0
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d901      	bls.n	80069f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e04f      	b.n	8006a92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069f2:	4b2b      	ldr	r3, [pc, #172]	; (8006aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f003 020c 	and.w	r2, r3, #12
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d1eb      	bne.n	80069dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a04:	4b25      	ldr	r3, [pc, #148]	; (8006a9c <HAL_RCC_ClockConfig+0x1b8>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 030f 	and.w	r3, r3, #15
 8006a0c:	683a      	ldr	r2, [r7, #0]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d20c      	bcs.n	8006a2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a12:	4b22      	ldr	r3, [pc, #136]	; (8006a9c <HAL_RCC_ClockConfig+0x1b8>)
 8006a14:	683a      	ldr	r2, [r7, #0]
 8006a16:	b2d2      	uxtb	r2, r2
 8006a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a1a:	4b20      	ldr	r3, [pc, #128]	; (8006a9c <HAL_RCC_ClockConfig+0x1b8>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 030f 	and.w	r3, r3, #15
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d001      	beq.n	8006a2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e032      	b.n	8006a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0304 	and.w	r3, r3, #4
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d008      	beq.n	8006a4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a38:	4b19      	ldr	r3, [pc, #100]	; (8006aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	4916      	ldr	r1, [pc, #88]	; (8006aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a46:	4313      	orrs	r3, r2
 8006a48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0308 	and.w	r3, r3, #8
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d009      	beq.n	8006a6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a56:	4b12      	ldr	r3, [pc, #72]	; (8006aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	00db      	lsls	r3, r3, #3
 8006a64:	490e      	ldr	r1, [pc, #56]	; (8006aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a66:	4313      	orrs	r3, r2
 8006a68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006a6a:	f000 f821 	bl	8006ab0 <HAL_RCC_GetSysClockFreq>
 8006a6e:	4601      	mov	r1, r0
 8006a70:	4b0b      	ldr	r3, [pc, #44]	; (8006aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	091b      	lsrs	r3, r3, #4
 8006a76:	f003 030f 	and.w	r3, r3, #15
 8006a7a:	4a0a      	ldr	r2, [pc, #40]	; (8006aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8006a7c:	5cd3      	ldrb	r3, [r2, r3]
 8006a7e:	fa21 f303 	lsr.w	r3, r1, r3
 8006a82:	4a09      	ldr	r2, [pc, #36]	; (8006aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8006a84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006a86:	4b09      	ldr	r3, [pc, #36]	; (8006aac <HAL_RCC_ClockConfig+0x1c8>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7ff f9e8 	bl	8005e60 <HAL_InitTick>

  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	40023c00 	.word	0x40023c00
 8006aa0:	40023800 	.word	0x40023800
 8006aa4:	0801ec20 	.word	0x0801ec20
 8006aa8:	20000000 	.word	0x20000000
 8006aac:	20000004 	.word	0x20000004

08006ab0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ab2:	b085      	sub	sp, #20
 8006ab4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	607b      	str	r3, [r7, #4]
 8006aba:	2300      	movs	r3, #0
 8006abc:	60fb      	str	r3, [r7, #12]
 8006abe:	2300      	movs	r3, #0
 8006ac0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ac6:	4b63      	ldr	r3, [pc, #396]	; (8006c54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	f003 030c 	and.w	r3, r3, #12
 8006ace:	2b04      	cmp	r3, #4
 8006ad0:	d007      	beq.n	8006ae2 <HAL_RCC_GetSysClockFreq+0x32>
 8006ad2:	2b08      	cmp	r3, #8
 8006ad4:	d008      	beq.n	8006ae8 <HAL_RCC_GetSysClockFreq+0x38>
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	f040 80b4 	bne.w	8006c44 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006adc:	4b5e      	ldr	r3, [pc, #376]	; (8006c58 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006ade:	60bb      	str	r3, [r7, #8]
       break;
 8006ae0:	e0b3      	b.n	8006c4a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ae2:	4b5e      	ldr	r3, [pc, #376]	; (8006c5c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006ae4:	60bb      	str	r3, [r7, #8]
      break;
 8006ae6:	e0b0      	b.n	8006c4a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ae8:	4b5a      	ldr	r3, [pc, #360]	; (8006c54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006af0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006af2:	4b58      	ldr	r3, [pc, #352]	; (8006c54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d04a      	beq.n	8006b94 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006afe:	4b55      	ldr	r3, [pc, #340]	; (8006c54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	099b      	lsrs	r3, r3, #6
 8006b04:	f04f 0400 	mov.w	r4, #0
 8006b08:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006b0c:	f04f 0200 	mov.w	r2, #0
 8006b10:	ea03 0501 	and.w	r5, r3, r1
 8006b14:	ea04 0602 	and.w	r6, r4, r2
 8006b18:	4629      	mov	r1, r5
 8006b1a:	4632      	mov	r2, r6
 8006b1c:	f04f 0300 	mov.w	r3, #0
 8006b20:	f04f 0400 	mov.w	r4, #0
 8006b24:	0154      	lsls	r4, r2, #5
 8006b26:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006b2a:	014b      	lsls	r3, r1, #5
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	4622      	mov	r2, r4
 8006b30:	1b49      	subs	r1, r1, r5
 8006b32:	eb62 0206 	sbc.w	r2, r2, r6
 8006b36:	f04f 0300 	mov.w	r3, #0
 8006b3a:	f04f 0400 	mov.w	r4, #0
 8006b3e:	0194      	lsls	r4, r2, #6
 8006b40:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006b44:	018b      	lsls	r3, r1, #6
 8006b46:	1a5b      	subs	r3, r3, r1
 8006b48:	eb64 0402 	sbc.w	r4, r4, r2
 8006b4c:	f04f 0100 	mov.w	r1, #0
 8006b50:	f04f 0200 	mov.w	r2, #0
 8006b54:	00e2      	lsls	r2, r4, #3
 8006b56:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006b5a:	00d9      	lsls	r1, r3, #3
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	4614      	mov	r4, r2
 8006b60:	195b      	adds	r3, r3, r5
 8006b62:	eb44 0406 	adc.w	r4, r4, r6
 8006b66:	f04f 0100 	mov.w	r1, #0
 8006b6a:	f04f 0200 	mov.w	r2, #0
 8006b6e:	0262      	lsls	r2, r4, #9
 8006b70:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006b74:	0259      	lsls	r1, r3, #9
 8006b76:	460b      	mov	r3, r1
 8006b78:	4614      	mov	r4, r2
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	4621      	mov	r1, r4
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f04f 0400 	mov.w	r4, #0
 8006b84:	461a      	mov	r2, r3
 8006b86:	4623      	mov	r3, r4
 8006b88:	f7fa f886 	bl	8000c98 <__aeabi_uldivmod>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	460c      	mov	r4, r1
 8006b90:	60fb      	str	r3, [r7, #12]
 8006b92:	e049      	b.n	8006c28 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b94:	4b2f      	ldr	r3, [pc, #188]	; (8006c54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	099b      	lsrs	r3, r3, #6
 8006b9a:	f04f 0400 	mov.w	r4, #0
 8006b9e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006ba2:	f04f 0200 	mov.w	r2, #0
 8006ba6:	ea03 0501 	and.w	r5, r3, r1
 8006baa:	ea04 0602 	and.w	r6, r4, r2
 8006bae:	4629      	mov	r1, r5
 8006bb0:	4632      	mov	r2, r6
 8006bb2:	f04f 0300 	mov.w	r3, #0
 8006bb6:	f04f 0400 	mov.w	r4, #0
 8006bba:	0154      	lsls	r4, r2, #5
 8006bbc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006bc0:	014b      	lsls	r3, r1, #5
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	4622      	mov	r2, r4
 8006bc6:	1b49      	subs	r1, r1, r5
 8006bc8:	eb62 0206 	sbc.w	r2, r2, r6
 8006bcc:	f04f 0300 	mov.w	r3, #0
 8006bd0:	f04f 0400 	mov.w	r4, #0
 8006bd4:	0194      	lsls	r4, r2, #6
 8006bd6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006bda:	018b      	lsls	r3, r1, #6
 8006bdc:	1a5b      	subs	r3, r3, r1
 8006bde:	eb64 0402 	sbc.w	r4, r4, r2
 8006be2:	f04f 0100 	mov.w	r1, #0
 8006be6:	f04f 0200 	mov.w	r2, #0
 8006bea:	00e2      	lsls	r2, r4, #3
 8006bec:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006bf0:	00d9      	lsls	r1, r3, #3
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	4614      	mov	r4, r2
 8006bf6:	195b      	adds	r3, r3, r5
 8006bf8:	eb44 0406 	adc.w	r4, r4, r6
 8006bfc:	f04f 0100 	mov.w	r1, #0
 8006c00:	f04f 0200 	mov.w	r2, #0
 8006c04:	02a2      	lsls	r2, r4, #10
 8006c06:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006c0a:	0299      	lsls	r1, r3, #10
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	4614      	mov	r4, r2
 8006c10:	4618      	mov	r0, r3
 8006c12:	4621      	mov	r1, r4
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f04f 0400 	mov.w	r4, #0
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	4623      	mov	r3, r4
 8006c1e:	f7fa f83b 	bl	8000c98 <__aeabi_uldivmod>
 8006c22:	4603      	mov	r3, r0
 8006c24:	460c      	mov	r4, r1
 8006c26:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006c28:	4b0a      	ldr	r3, [pc, #40]	; (8006c54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	0c1b      	lsrs	r3, r3, #16
 8006c2e:	f003 0303 	and.w	r3, r3, #3
 8006c32:	3301      	adds	r3, #1
 8006c34:	005b      	lsls	r3, r3, #1
 8006c36:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c40:	60bb      	str	r3, [r7, #8]
      break;
 8006c42:	e002      	b.n	8006c4a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c44:	4b04      	ldr	r3, [pc, #16]	; (8006c58 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006c46:	60bb      	str	r3, [r7, #8]
      break;
 8006c48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c4a:	68bb      	ldr	r3, [r7, #8]
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3714      	adds	r7, #20
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c54:	40023800 	.word	0x40023800
 8006c58:	00f42400 	.word	0x00f42400
 8006c5c:	007a1200 	.word	0x007a1200

08006c60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c60:	b480      	push	{r7}
 8006c62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c64:	4b03      	ldr	r3, [pc, #12]	; (8006c74 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c66:	681b      	ldr	r3, [r3, #0]
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	20000000 	.word	0x20000000

08006c78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006c7c:	f7ff fff0 	bl	8006c60 <HAL_RCC_GetHCLKFreq>
 8006c80:	4601      	mov	r1, r0
 8006c82:	4b05      	ldr	r3, [pc, #20]	; (8006c98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	0a9b      	lsrs	r3, r3, #10
 8006c88:	f003 0307 	and.w	r3, r3, #7
 8006c8c:	4a03      	ldr	r2, [pc, #12]	; (8006c9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c8e:	5cd3      	ldrb	r3, [r2, r3]
 8006c90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	40023800 	.word	0x40023800
 8006c9c:	0801ec30 	.word	0x0801ec30

08006ca0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006ca4:	f7ff ffdc 	bl	8006c60 <HAL_RCC_GetHCLKFreq>
 8006ca8:	4601      	mov	r1, r0
 8006caa:	4b05      	ldr	r3, [pc, #20]	; (8006cc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	0b5b      	lsrs	r3, r3, #13
 8006cb0:	f003 0307 	and.w	r3, r3, #7
 8006cb4:	4a03      	ldr	r2, [pc, #12]	; (8006cc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006cb6:	5cd3      	ldrb	r3, [r2, r3]
 8006cb8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	40023800 	.word	0x40023800
 8006cc4:	0801ec30 	.word	0x0801ec30

08006cc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d101      	bne.n	8006cda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e03f      	b.n	8006d5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d106      	bne.n	8006cf4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f7fa fdb8 	bl	8001864 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2224      	movs	r2, #36	; 0x24
 8006cf8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68da      	ldr	r2, [r3, #12]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 f9b1 	bl	8007074 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	691a      	ldr	r2, [r3, #16]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	695a      	ldr	r2, [r3, #20]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68da      	ldr	r2, [r3, #12]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2220      	movs	r2, #32
 8006d4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2220      	movs	r2, #32
 8006d54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3708      	adds	r7, #8
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b088      	sub	sp, #32
 8006d66:	af02      	add	r7, sp, #8
 8006d68:	60f8      	str	r0, [r7, #12]
 8006d6a:	60b9      	str	r1, [r7, #8]
 8006d6c:	603b      	str	r3, [r7, #0]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006d72:	2300      	movs	r3, #0
 8006d74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	2b20      	cmp	r3, #32
 8006d80:	f040 8083 	bne.w	8006e8a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d002      	beq.n	8006d90 <HAL_UART_Transmit+0x2e>
 8006d8a:	88fb      	ldrh	r3, [r7, #6]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d101      	bne.n	8006d94 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	e07b      	b.n	8006e8c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d101      	bne.n	8006da2 <HAL_UART_Transmit+0x40>
 8006d9e:	2302      	movs	r3, #2
 8006da0:	e074      	b.n	8006e8c <HAL_UART_Transmit+0x12a>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2201      	movs	r2, #1
 8006da6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2200      	movs	r2, #0
 8006dae:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2221      	movs	r2, #33	; 0x21
 8006db4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006db8:	f7ff f896 	bl	8005ee8 <HAL_GetTick>
 8006dbc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	88fa      	ldrh	r2, [r7, #6]
 8006dc2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	88fa      	ldrh	r2, [r7, #6]
 8006dc8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8006dd2:	e042      	b.n	8006e5a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	b29a      	uxth	r2, r3
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dea:	d122      	bne.n	8006e32 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	9300      	str	r3, [sp, #0]
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	2200      	movs	r2, #0
 8006df4:	2180      	movs	r1, #128	; 0x80
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	f000 f8f2 	bl	8006fe0 <UART_WaitOnFlagUntilTimeout>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d001      	beq.n	8006e06 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8006e02:	2303      	movs	r3, #3
 8006e04:	e042      	b.n	8006e8c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	881b      	ldrh	r3, [r3, #0]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e18:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d103      	bne.n	8006e2a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	3302      	adds	r3, #2
 8006e26:	60bb      	str	r3, [r7, #8]
 8006e28:	e017      	b.n	8006e5a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	60bb      	str	r3, [r7, #8]
 8006e30:	e013      	b.n	8006e5a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	9300      	str	r3, [sp, #0]
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	2180      	movs	r1, #128	; 0x80
 8006e3c:	68f8      	ldr	r0, [r7, #12]
 8006e3e:	f000 f8cf 	bl	8006fe0 <UART_WaitOnFlagUntilTimeout>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d001      	beq.n	8006e4c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e01f      	b.n	8006e8c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	1c5a      	adds	r2, r3, #1
 8006e50:	60ba      	str	r2, [r7, #8]
 8006e52:	781a      	ldrb	r2, [r3, #0]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d1b7      	bne.n	8006dd4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	9300      	str	r3, [sp, #0]
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	2140      	movs	r1, #64	; 0x40
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	f000 f8b6 	bl	8006fe0 <UART_WaitOnFlagUntilTimeout>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d001      	beq.n	8006e7e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e006      	b.n	8006e8c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2220      	movs	r2, #32
 8006e82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006e86:	2300      	movs	r3, #0
 8006e88:	e000      	b.n	8006e8c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006e8a:	2302      	movs	r3, #2
  }
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3718      	adds	r7, #24
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b088      	sub	sp, #32
 8006e98:	af02      	add	r7, sp, #8
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	603b      	str	r3, [r7, #0]
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	2b20      	cmp	r3, #32
 8006eb2:	f040 8090 	bne.w	8006fd6 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d002      	beq.n	8006ec2 <HAL_UART_Receive+0x2e>
 8006ebc:	88fb      	ldrh	r3, [r7, #6]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d101      	bne.n	8006ec6 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e088      	b.n	8006fd8 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d101      	bne.n	8006ed4 <HAL_UART_Receive+0x40>
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	e081      	b.n	8006fd8 <HAL_UART_Receive+0x144>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2222      	movs	r2, #34	; 0x22
 8006ee6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006eea:	f7fe fffd 	bl	8005ee8 <HAL_GetTick>
 8006eee:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	88fa      	ldrh	r2, [r7, #6]
 8006ef4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	88fa      	ldrh	r2, [r7, #6]
 8006efa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006f04:	e05c      	b.n	8006fc0 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	b29a      	uxth	r2, r3
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f1c:	d12b      	bne.n	8006f76 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	9300      	str	r3, [sp, #0]
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	2200      	movs	r2, #0
 8006f26:	2120      	movs	r1, #32
 8006f28:	68f8      	ldr	r0, [r7, #12]
 8006f2a:	f000 f859 	bl	8006fe0 <UART_WaitOnFlagUntilTimeout>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d001      	beq.n	8006f38 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8006f34:	2303      	movs	r3, #3
 8006f36:	e04f      	b.n	8006fd8 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d10c      	bne.n	8006f5e <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f50:	b29a      	uxth	r2, r3
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	3302      	adds	r3, #2
 8006f5a:	60bb      	str	r3, [r7, #8]
 8006f5c:	e030      	b.n	8006fc0 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	b29a      	uxth	r2, r3
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	3301      	adds	r3, #1
 8006f72:	60bb      	str	r3, [r7, #8]
 8006f74:	e024      	b.n	8006fc0 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	9300      	str	r3, [sp, #0]
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	2120      	movs	r1, #32
 8006f80:	68f8      	ldr	r0, [r7, #12]
 8006f82:	f000 f82d 	bl	8006fe0 <UART_WaitOnFlagUntilTimeout>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d001      	beq.n	8006f90 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	e023      	b.n	8006fd8 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d108      	bne.n	8006faa <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	6859      	ldr	r1, [r3, #4]
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	1c5a      	adds	r2, r3, #1
 8006fa2:	60ba      	str	r2, [r7, #8]
 8006fa4:	b2ca      	uxtb	r2, r1
 8006fa6:	701a      	strb	r2, [r3, #0]
 8006fa8:	e00a      	b.n	8006fc0 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	b2da      	uxtb	r2, r3
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	1c59      	adds	r1, r3, #1
 8006fb6:	60b9      	str	r1, [r7, #8]
 8006fb8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006fbc:	b2d2      	uxtb	r2, r2
 8006fbe:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d19d      	bne.n	8006f06 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2220      	movs	r2, #32
 8006fce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	e000      	b.n	8006fd8 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006fd6:	2302      	movs	r3, #2
  }
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3718      	adds	r7, #24
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	603b      	str	r3, [r7, #0]
 8006fec:	4613      	mov	r3, r2
 8006fee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ff0:	e02c      	b.n	800704c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff8:	d028      	beq.n	800704c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d007      	beq.n	8007010 <UART_WaitOnFlagUntilTimeout+0x30>
 8007000:	f7fe ff72 	bl	8005ee8 <HAL_GetTick>
 8007004:	4602      	mov	r2, r0
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	69ba      	ldr	r2, [r7, #24]
 800700c:	429a      	cmp	r2, r3
 800700e:	d21d      	bcs.n	800704c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68da      	ldr	r2, [r3, #12]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800701e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	695a      	ldr	r2, [r3, #20]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f022 0201 	bic.w	r2, r2, #1
 800702e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2220      	movs	r2, #32
 8007034:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2220      	movs	r2, #32
 800703c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007048:	2303      	movs	r3, #3
 800704a:	e00f      	b.n	800706c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	4013      	ands	r3, r2
 8007056:	68ba      	ldr	r2, [r7, #8]
 8007058:	429a      	cmp	r2, r3
 800705a:	bf0c      	ite	eq
 800705c:	2301      	moveq	r3, #1
 800705e:	2300      	movne	r3, #0
 8007060:	b2db      	uxtb	r3, r3
 8007062:	461a      	mov	r2, r3
 8007064:	79fb      	ldrb	r3, [r7, #7]
 8007066:	429a      	cmp	r2, r3
 8007068:	d0c3      	beq.n	8006ff2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007078:	b085      	sub	sp, #20
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	68da      	ldr	r2, [r3, #12]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	430a      	orrs	r2, r1
 8007092:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	689a      	ldr	r2, [r3, #8]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	431a      	orrs	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	431a      	orrs	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	69db      	ldr	r3, [r3, #28]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80070b6:	f023 030c 	bic.w	r3, r3, #12
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	6812      	ldr	r2, [r2, #0]
 80070be:	68f9      	ldr	r1, [r7, #12]
 80070c0:	430b      	orrs	r3, r1
 80070c2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	695b      	ldr	r3, [r3, #20]
 80070ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	699a      	ldr	r2, [r3, #24]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	430a      	orrs	r2, r1
 80070d8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	69db      	ldr	r3, [r3, #28]
 80070de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070e2:	f040 818b 	bne.w	80073fc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4ac1      	ldr	r2, [pc, #772]	; (80073f0 <UART_SetConfig+0x37c>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d005      	beq.n	80070fc <UART_SetConfig+0x88>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4abf      	ldr	r2, [pc, #764]	; (80073f4 <UART_SetConfig+0x380>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	f040 80bd 	bne.w	8007276 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80070fc:	f7ff fdd0 	bl	8006ca0 <HAL_RCC_GetPCLK2Freq>
 8007100:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	461d      	mov	r5, r3
 8007106:	f04f 0600 	mov.w	r6, #0
 800710a:	46a8      	mov	r8, r5
 800710c:	46b1      	mov	r9, r6
 800710e:	eb18 0308 	adds.w	r3, r8, r8
 8007112:	eb49 0409 	adc.w	r4, r9, r9
 8007116:	4698      	mov	r8, r3
 8007118:	46a1      	mov	r9, r4
 800711a:	eb18 0805 	adds.w	r8, r8, r5
 800711e:	eb49 0906 	adc.w	r9, r9, r6
 8007122:	f04f 0100 	mov.w	r1, #0
 8007126:	f04f 0200 	mov.w	r2, #0
 800712a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800712e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007132:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007136:	4688      	mov	r8, r1
 8007138:	4691      	mov	r9, r2
 800713a:	eb18 0005 	adds.w	r0, r8, r5
 800713e:	eb49 0106 	adc.w	r1, r9, r6
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	461d      	mov	r5, r3
 8007148:	f04f 0600 	mov.w	r6, #0
 800714c:	196b      	adds	r3, r5, r5
 800714e:	eb46 0406 	adc.w	r4, r6, r6
 8007152:	461a      	mov	r2, r3
 8007154:	4623      	mov	r3, r4
 8007156:	f7f9 fd9f 	bl	8000c98 <__aeabi_uldivmod>
 800715a:	4603      	mov	r3, r0
 800715c:	460c      	mov	r4, r1
 800715e:	461a      	mov	r2, r3
 8007160:	4ba5      	ldr	r3, [pc, #660]	; (80073f8 <UART_SetConfig+0x384>)
 8007162:	fba3 2302 	umull	r2, r3, r3, r2
 8007166:	095b      	lsrs	r3, r3, #5
 8007168:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	461d      	mov	r5, r3
 8007170:	f04f 0600 	mov.w	r6, #0
 8007174:	46a9      	mov	r9, r5
 8007176:	46b2      	mov	sl, r6
 8007178:	eb19 0309 	adds.w	r3, r9, r9
 800717c:	eb4a 040a 	adc.w	r4, sl, sl
 8007180:	4699      	mov	r9, r3
 8007182:	46a2      	mov	sl, r4
 8007184:	eb19 0905 	adds.w	r9, r9, r5
 8007188:	eb4a 0a06 	adc.w	sl, sl, r6
 800718c:	f04f 0100 	mov.w	r1, #0
 8007190:	f04f 0200 	mov.w	r2, #0
 8007194:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007198:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800719c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80071a0:	4689      	mov	r9, r1
 80071a2:	4692      	mov	sl, r2
 80071a4:	eb19 0005 	adds.w	r0, r9, r5
 80071a8:	eb4a 0106 	adc.w	r1, sl, r6
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	461d      	mov	r5, r3
 80071b2:	f04f 0600 	mov.w	r6, #0
 80071b6:	196b      	adds	r3, r5, r5
 80071b8:	eb46 0406 	adc.w	r4, r6, r6
 80071bc:	461a      	mov	r2, r3
 80071be:	4623      	mov	r3, r4
 80071c0:	f7f9 fd6a 	bl	8000c98 <__aeabi_uldivmod>
 80071c4:	4603      	mov	r3, r0
 80071c6:	460c      	mov	r4, r1
 80071c8:	461a      	mov	r2, r3
 80071ca:	4b8b      	ldr	r3, [pc, #556]	; (80073f8 <UART_SetConfig+0x384>)
 80071cc:	fba3 1302 	umull	r1, r3, r3, r2
 80071d0:	095b      	lsrs	r3, r3, #5
 80071d2:	2164      	movs	r1, #100	; 0x64
 80071d4:	fb01 f303 	mul.w	r3, r1, r3
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	00db      	lsls	r3, r3, #3
 80071dc:	3332      	adds	r3, #50	; 0x32
 80071de:	4a86      	ldr	r2, [pc, #536]	; (80073f8 <UART_SetConfig+0x384>)
 80071e0:	fba2 2303 	umull	r2, r3, r2, r3
 80071e4:	095b      	lsrs	r3, r3, #5
 80071e6:	005b      	lsls	r3, r3, #1
 80071e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80071ec:	4498      	add	r8, r3
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	461d      	mov	r5, r3
 80071f2:	f04f 0600 	mov.w	r6, #0
 80071f6:	46a9      	mov	r9, r5
 80071f8:	46b2      	mov	sl, r6
 80071fa:	eb19 0309 	adds.w	r3, r9, r9
 80071fe:	eb4a 040a 	adc.w	r4, sl, sl
 8007202:	4699      	mov	r9, r3
 8007204:	46a2      	mov	sl, r4
 8007206:	eb19 0905 	adds.w	r9, r9, r5
 800720a:	eb4a 0a06 	adc.w	sl, sl, r6
 800720e:	f04f 0100 	mov.w	r1, #0
 8007212:	f04f 0200 	mov.w	r2, #0
 8007216:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800721a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800721e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007222:	4689      	mov	r9, r1
 8007224:	4692      	mov	sl, r2
 8007226:	eb19 0005 	adds.w	r0, r9, r5
 800722a:	eb4a 0106 	adc.w	r1, sl, r6
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	461d      	mov	r5, r3
 8007234:	f04f 0600 	mov.w	r6, #0
 8007238:	196b      	adds	r3, r5, r5
 800723a:	eb46 0406 	adc.w	r4, r6, r6
 800723e:	461a      	mov	r2, r3
 8007240:	4623      	mov	r3, r4
 8007242:	f7f9 fd29 	bl	8000c98 <__aeabi_uldivmod>
 8007246:	4603      	mov	r3, r0
 8007248:	460c      	mov	r4, r1
 800724a:	461a      	mov	r2, r3
 800724c:	4b6a      	ldr	r3, [pc, #424]	; (80073f8 <UART_SetConfig+0x384>)
 800724e:	fba3 1302 	umull	r1, r3, r3, r2
 8007252:	095b      	lsrs	r3, r3, #5
 8007254:	2164      	movs	r1, #100	; 0x64
 8007256:	fb01 f303 	mul.w	r3, r1, r3
 800725a:	1ad3      	subs	r3, r2, r3
 800725c:	00db      	lsls	r3, r3, #3
 800725e:	3332      	adds	r3, #50	; 0x32
 8007260:	4a65      	ldr	r2, [pc, #404]	; (80073f8 <UART_SetConfig+0x384>)
 8007262:	fba2 2303 	umull	r2, r3, r2, r3
 8007266:	095b      	lsrs	r3, r3, #5
 8007268:	f003 0207 	and.w	r2, r3, #7
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4442      	add	r2, r8
 8007272:	609a      	str	r2, [r3, #8]
 8007274:	e26f      	b.n	8007756 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007276:	f7ff fcff 	bl	8006c78 <HAL_RCC_GetPCLK1Freq>
 800727a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	461d      	mov	r5, r3
 8007280:	f04f 0600 	mov.w	r6, #0
 8007284:	46a8      	mov	r8, r5
 8007286:	46b1      	mov	r9, r6
 8007288:	eb18 0308 	adds.w	r3, r8, r8
 800728c:	eb49 0409 	adc.w	r4, r9, r9
 8007290:	4698      	mov	r8, r3
 8007292:	46a1      	mov	r9, r4
 8007294:	eb18 0805 	adds.w	r8, r8, r5
 8007298:	eb49 0906 	adc.w	r9, r9, r6
 800729c:	f04f 0100 	mov.w	r1, #0
 80072a0:	f04f 0200 	mov.w	r2, #0
 80072a4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80072a8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80072ac:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80072b0:	4688      	mov	r8, r1
 80072b2:	4691      	mov	r9, r2
 80072b4:	eb18 0005 	adds.w	r0, r8, r5
 80072b8:	eb49 0106 	adc.w	r1, r9, r6
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	461d      	mov	r5, r3
 80072c2:	f04f 0600 	mov.w	r6, #0
 80072c6:	196b      	adds	r3, r5, r5
 80072c8:	eb46 0406 	adc.w	r4, r6, r6
 80072cc:	461a      	mov	r2, r3
 80072ce:	4623      	mov	r3, r4
 80072d0:	f7f9 fce2 	bl	8000c98 <__aeabi_uldivmod>
 80072d4:	4603      	mov	r3, r0
 80072d6:	460c      	mov	r4, r1
 80072d8:	461a      	mov	r2, r3
 80072da:	4b47      	ldr	r3, [pc, #284]	; (80073f8 <UART_SetConfig+0x384>)
 80072dc:	fba3 2302 	umull	r2, r3, r3, r2
 80072e0:	095b      	lsrs	r3, r3, #5
 80072e2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	461d      	mov	r5, r3
 80072ea:	f04f 0600 	mov.w	r6, #0
 80072ee:	46a9      	mov	r9, r5
 80072f0:	46b2      	mov	sl, r6
 80072f2:	eb19 0309 	adds.w	r3, r9, r9
 80072f6:	eb4a 040a 	adc.w	r4, sl, sl
 80072fa:	4699      	mov	r9, r3
 80072fc:	46a2      	mov	sl, r4
 80072fe:	eb19 0905 	adds.w	r9, r9, r5
 8007302:	eb4a 0a06 	adc.w	sl, sl, r6
 8007306:	f04f 0100 	mov.w	r1, #0
 800730a:	f04f 0200 	mov.w	r2, #0
 800730e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007312:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007316:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800731a:	4689      	mov	r9, r1
 800731c:	4692      	mov	sl, r2
 800731e:	eb19 0005 	adds.w	r0, r9, r5
 8007322:	eb4a 0106 	adc.w	r1, sl, r6
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	461d      	mov	r5, r3
 800732c:	f04f 0600 	mov.w	r6, #0
 8007330:	196b      	adds	r3, r5, r5
 8007332:	eb46 0406 	adc.w	r4, r6, r6
 8007336:	461a      	mov	r2, r3
 8007338:	4623      	mov	r3, r4
 800733a:	f7f9 fcad 	bl	8000c98 <__aeabi_uldivmod>
 800733e:	4603      	mov	r3, r0
 8007340:	460c      	mov	r4, r1
 8007342:	461a      	mov	r2, r3
 8007344:	4b2c      	ldr	r3, [pc, #176]	; (80073f8 <UART_SetConfig+0x384>)
 8007346:	fba3 1302 	umull	r1, r3, r3, r2
 800734a:	095b      	lsrs	r3, r3, #5
 800734c:	2164      	movs	r1, #100	; 0x64
 800734e:	fb01 f303 	mul.w	r3, r1, r3
 8007352:	1ad3      	subs	r3, r2, r3
 8007354:	00db      	lsls	r3, r3, #3
 8007356:	3332      	adds	r3, #50	; 0x32
 8007358:	4a27      	ldr	r2, [pc, #156]	; (80073f8 <UART_SetConfig+0x384>)
 800735a:	fba2 2303 	umull	r2, r3, r2, r3
 800735e:	095b      	lsrs	r3, r3, #5
 8007360:	005b      	lsls	r3, r3, #1
 8007362:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007366:	4498      	add	r8, r3
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	461d      	mov	r5, r3
 800736c:	f04f 0600 	mov.w	r6, #0
 8007370:	46a9      	mov	r9, r5
 8007372:	46b2      	mov	sl, r6
 8007374:	eb19 0309 	adds.w	r3, r9, r9
 8007378:	eb4a 040a 	adc.w	r4, sl, sl
 800737c:	4699      	mov	r9, r3
 800737e:	46a2      	mov	sl, r4
 8007380:	eb19 0905 	adds.w	r9, r9, r5
 8007384:	eb4a 0a06 	adc.w	sl, sl, r6
 8007388:	f04f 0100 	mov.w	r1, #0
 800738c:	f04f 0200 	mov.w	r2, #0
 8007390:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007394:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007398:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800739c:	4689      	mov	r9, r1
 800739e:	4692      	mov	sl, r2
 80073a0:	eb19 0005 	adds.w	r0, r9, r5
 80073a4:	eb4a 0106 	adc.w	r1, sl, r6
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	461d      	mov	r5, r3
 80073ae:	f04f 0600 	mov.w	r6, #0
 80073b2:	196b      	adds	r3, r5, r5
 80073b4:	eb46 0406 	adc.w	r4, r6, r6
 80073b8:	461a      	mov	r2, r3
 80073ba:	4623      	mov	r3, r4
 80073bc:	f7f9 fc6c 	bl	8000c98 <__aeabi_uldivmod>
 80073c0:	4603      	mov	r3, r0
 80073c2:	460c      	mov	r4, r1
 80073c4:	461a      	mov	r2, r3
 80073c6:	4b0c      	ldr	r3, [pc, #48]	; (80073f8 <UART_SetConfig+0x384>)
 80073c8:	fba3 1302 	umull	r1, r3, r3, r2
 80073cc:	095b      	lsrs	r3, r3, #5
 80073ce:	2164      	movs	r1, #100	; 0x64
 80073d0:	fb01 f303 	mul.w	r3, r1, r3
 80073d4:	1ad3      	subs	r3, r2, r3
 80073d6:	00db      	lsls	r3, r3, #3
 80073d8:	3332      	adds	r3, #50	; 0x32
 80073da:	4a07      	ldr	r2, [pc, #28]	; (80073f8 <UART_SetConfig+0x384>)
 80073dc:	fba2 2303 	umull	r2, r3, r2, r3
 80073e0:	095b      	lsrs	r3, r3, #5
 80073e2:	f003 0207 	and.w	r2, r3, #7
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4442      	add	r2, r8
 80073ec:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80073ee:	e1b2      	b.n	8007756 <UART_SetConfig+0x6e2>
 80073f0:	40011000 	.word	0x40011000
 80073f4:	40011400 	.word	0x40011400
 80073f8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4ad7      	ldr	r2, [pc, #860]	; (8007760 <UART_SetConfig+0x6ec>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d005      	beq.n	8007412 <UART_SetConfig+0x39e>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4ad6      	ldr	r2, [pc, #856]	; (8007764 <UART_SetConfig+0x6f0>)
 800740c:	4293      	cmp	r3, r2
 800740e:	f040 80d1 	bne.w	80075b4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007412:	f7ff fc45 	bl	8006ca0 <HAL_RCC_GetPCLK2Freq>
 8007416:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	469a      	mov	sl, r3
 800741c:	f04f 0b00 	mov.w	fp, #0
 8007420:	46d0      	mov	r8, sl
 8007422:	46d9      	mov	r9, fp
 8007424:	eb18 0308 	adds.w	r3, r8, r8
 8007428:	eb49 0409 	adc.w	r4, r9, r9
 800742c:	4698      	mov	r8, r3
 800742e:	46a1      	mov	r9, r4
 8007430:	eb18 080a 	adds.w	r8, r8, sl
 8007434:	eb49 090b 	adc.w	r9, r9, fp
 8007438:	f04f 0100 	mov.w	r1, #0
 800743c:	f04f 0200 	mov.w	r2, #0
 8007440:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007444:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007448:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800744c:	4688      	mov	r8, r1
 800744e:	4691      	mov	r9, r2
 8007450:	eb1a 0508 	adds.w	r5, sl, r8
 8007454:	eb4b 0609 	adc.w	r6, fp, r9
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	4619      	mov	r1, r3
 800745e:	f04f 0200 	mov.w	r2, #0
 8007462:	f04f 0300 	mov.w	r3, #0
 8007466:	f04f 0400 	mov.w	r4, #0
 800746a:	0094      	lsls	r4, r2, #2
 800746c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007470:	008b      	lsls	r3, r1, #2
 8007472:	461a      	mov	r2, r3
 8007474:	4623      	mov	r3, r4
 8007476:	4628      	mov	r0, r5
 8007478:	4631      	mov	r1, r6
 800747a:	f7f9 fc0d 	bl	8000c98 <__aeabi_uldivmod>
 800747e:	4603      	mov	r3, r0
 8007480:	460c      	mov	r4, r1
 8007482:	461a      	mov	r2, r3
 8007484:	4bb8      	ldr	r3, [pc, #736]	; (8007768 <UART_SetConfig+0x6f4>)
 8007486:	fba3 2302 	umull	r2, r3, r3, r2
 800748a:	095b      	lsrs	r3, r3, #5
 800748c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	469b      	mov	fp, r3
 8007494:	f04f 0c00 	mov.w	ip, #0
 8007498:	46d9      	mov	r9, fp
 800749a:	46e2      	mov	sl, ip
 800749c:	eb19 0309 	adds.w	r3, r9, r9
 80074a0:	eb4a 040a 	adc.w	r4, sl, sl
 80074a4:	4699      	mov	r9, r3
 80074a6:	46a2      	mov	sl, r4
 80074a8:	eb19 090b 	adds.w	r9, r9, fp
 80074ac:	eb4a 0a0c 	adc.w	sl, sl, ip
 80074b0:	f04f 0100 	mov.w	r1, #0
 80074b4:	f04f 0200 	mov.w	r2, #0
 80074b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80074bc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80074c0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80074c4:	4689      	mov	r9, r1
 80074c6:	4692      	mov	sl, r2
 80074c8:	eb1b 0509 	adds.w	r5, fp, r9
 80074cc:	eb4c 060a 	adc.w	r6, ip, sl
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	4619      	mov	r1, r3
 80074d6:	f04f 0200 	mov.w	r2, #0
 80074da:	f04f 0300 	mov.w	r3, #0
 80074de:	f04f 0400 	mov.w	r4, #0
 80074e2:	0094      	lsls	r4, r2, #2
 80074e4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80074e8:	008b      	lsls	r3, r1, #2
 80074ea:	461a      	mov	r2, r3
 80074ec:	4623      	mov	r3, r4
 80074ee:	4628      	mov	r0, r5
 80074f0:	4631      	mov	r1, r6
 80074f2:	f7f9 fbd1 	bl	8000c98 <__aeabi_uldivmod>
 80074f6:	4603      	mov	r3, r0
 80074f8:	460c      	mov	r4, r1
 80074fa:	461a      	mov	r2, r3
 80074fc:	4b9a      	ldr	r3, [pc, #616]	; (8007768 <UART_SetConfig+0x6f4>)
 80074fe:	fba3 1302 	umull	r1, r3, r3, r2
 8007502:	095b      	lsrs	r3, r3, #5
 8007504:	2164      	movs	r1, #100	; 0x64
 8007506:	fb01 f303 	mul.w	r3, r1, r3
 800750a:	1ad3      	subs	r3, r2, r3
 800750c:	011b      	lsls	r3, r3, #4
 800750e:	3332      	adds	r3, #50	; 0x32
 8007510:	4a95      	ldr	r2, [pc, #596]	; (8007768 <UART_SetConfig+0x6f4>)
 8007512:	fba2 2303 	umull	r2, r3, r2, r3
 8007516:	095b      	lsrs	r3, r3, #5
 8007518:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800751c:	4498      	add	r8, r3
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	469b      	mov	fp, r3
 8007522:	f04f 0c00 	mov.w	ip, #0
 8007526:	46d9      	mov	r9, fp
 8007528:	46e2      	mov	sl, ip
 800752a:	eb19 0309 	adds.w	r3, r9, r9
 800752e:	eb4a 040a 	adc.w	r4, sl, sl
 8007532:	4699      	mov	r9, r3
 8007534:	46a2      	mov	sl, r4
 8007536:	eb19 090b 	adds.w	r9, r9, fp
 800753a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800753e:	f04f 0100 	mov.w	r1, #0
 8007542:	f04f 0200 	mov.w	r2, #0
 8007546:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800754a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800754e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007552:	4689      	mov	r9, r1
 8007554:	4692      	mov	sl, r2
 8007556:	eb1b 0509 	adds.w	r5, fp, r9
 800755a:	eb4c 060a 	adc.w	r6, ip, sl
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	4619      	mov	r1, r3
 8007564:	f04f 0200 	mov.w	r2, #0
 8007568:	f04f 0300 	mov.w	r3, #0
 800756c:	f04f 0400 	mov.w	r4, #0
 8007570:	0094      	lsls	r4, r2, #2
 8007572:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007576:	008b      	lsls	r3, r1, #2
 8007578:	461a      	mov	r2, r3
 800757a:	4623      	mov	r3, r4
 800757c:	4628      	mov	r0, r5
 800757e:	4631      	mov	r1, r6
 8007580:	f7f9 fb8a 	bl	8000c98 <__aeabi_uldivmod>
 8007584:	4603      	mov	r3, r0
 8007586:	460c      	mov	r4, r1
 8007588:	461a      	mov	r2, r3
 800758a:	4b77      	ldr	r3, [pc, #476]	; (8007768 <UART_SetConfig+0x6f4>)
 800758c:	fba3 1302 	umull	r1, r3, r3, r2
 8007590:	095b      	lsrs	r3, r3, #5
 8007592:	2164      	movs	r1, #100	; 0x64
 8007594:	fb01 f303 	mul.w	r3, r1, r3
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	011b      	lsls	r3, r3, #4
 800759c:	3332      	adds	r3, #50	; 0x32
 800759e:	4a72      	ldr	r2, [pc, #456]	; (8007768 <UART_SetConfig+0x6f4>)
 80075a0:	fba2 2303 	umull	r2, r3, r2, r3
 80075a4:	095b      	lsrs	r3, r3, #5
 80075a6:	f003 020f 	and.w	r2, r3, #15
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4442      	add	r2, r8
 80075b0:	609a      	str	r2, [r3, #8]
 80075b2:	e0d0      	b.n	8007756 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80075b4:	f7ff fb60 	bl	8006c78 <HAL_RCC_GetPCLK1Freq>
 80075b8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	469a      	mov	sl, r3
 80075be:	f04f 0b00 	mov.w	fp, #0
 80075c2:	46d0      	mov	r8, sl
 80075c4:	46d9      	mov	r9, fp
 80075c6:	eb18 0308 	adds.w	r3, r8, r8
 80075ca:	eb49 0409 	adc.w	r4, r9, r9
 80075ce:	4698      	mov	r8, r3
 80075d0:	46a1      	mov	r9, r4
 80075d2:	eb18 080a 	adds.w	r8, r8, sl
 80075d6:	eb49 090b 	adc.w	r9, r9, fp
 80075da:	f04f 0100 	mov.w	r1, #0
 80075de:	f04f 0200 	mov.w	r2, #0
 80075e2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80075e6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80075ea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80075ee:	4688      	mov	r8, r1
 80075f0:	4691      	mov	r9, r2
 80075f2:	eb1a 0508 	adds.w	r5, sl, r8
 80075f6:	eb4b 0609 	adc.w	r6, fp, r9
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	4619      	mov	r1, r3
 8007600:	f04f 0200 	mov.w	r2, #0
 8007604:	f04f 0300 	mov.w	r3, #0
 8007608:	f04f 0400 	mov.w	r4, #0
 800760c:	0094      	lsls	r4, r2, #2
 800760e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007612:	008b      	lsls	r3, r1, #2
 8007614:	461a      	mov	r2, r3
 8007616:	4623      	mov	r3, r4
 8007618:	4628      	mov	r0, r5
 800761a:	4631      	mov	r1, r6
 800761c:	f7f9 fb3c 	bl	8000c98 <__aeabi_uldivmod>
 8007620:	4603      	mov	r3, r0
 8007622:	460c      	mov	r4, r1
 8007624:	461a      	mov	r2, r3
 8007626:	4b50      	ldr	r3, [pc, #320]	; (8007768 <UART_SetConfig+0x6f4>)
 8007628:	fba3 2302 	umull	r2, r3, r3, r2
 800762c:	095b      	lsrs	r3, r3, #5
 800762e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	469b      	mov	fp, r3
 8007636:	f04f 0c00 	mov.w	ip, #0
 800763a:	46d9      	mov	r9, fp
 800763c:	46e2      	mov	sl, ip
 800763e:	eb19 0309 	adds.w	r3, r9, r9
 8007642:	eb4a 040a 	adc.w	r4, sl, sl
 8007646:	4699      	mov	r9, r3
 8007648:	46a2      	mov	sl, r4
 800764a:	eb19 090b 	adds.w	r9, r9, fp
 800764e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007652:	f04f 0100 	mov.w	r1, #0
 8007656:	f04f 0200 	mov.w	r2, #0
 800765a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800765e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007662:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007666:	4689      	mov	r9, r1
 8007668:	4692      	mov	sl, r2
 800766a:	eb1b 0509 	adds.w	r5, fp, r9
 800766e:	eb4c 060a 	adc.w	r6, ip, sl
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	4619      	mov	r1, r3
 8007678:	f04f 0200 	mov.w	r2, #0
 800767c:	f04f 0300 	mov.w	r3, #0
 8007680:	f04f 0400 	mov.w	r4, #0
 8007684:	0094      	lsls	r4, r2, #2
 8007686:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800768a:	008b      	lsls	r3, r1, #2
 800768c:	461a      	mov	r2, r3
 800768e:	4623      	mov	r3, r4
 8007690:	4628      	mov	r0, r5
 8007692:	4631      	mov	r1, r6
 8007694:	f7f9 fb00 	bl	8000c98 <__aeabi_uldivmod>
 8007698:	4603      	mov	r3, r0
 800769a:	460c      	mov	r4, r1
 800769c:	461a      	mov	r2, r3
 800769e:	4b32      	ldr	r3, [pc, #200]	; (8007768 <UART_SetConfig+0x6f4>)
 80076a0:	fba3 1302 	umull	r1, r3, r3, r2
 80076a4:	095b      	lsrs	r3, r3, #5
 80076a6:	2164      	movs	r1, #100	; 0x64
 80076a8:	fb01 f303 	mul.w	r3, r1, r3
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	011b      	lsls	r3, r3, #4
 80076b0:	3332      	adds	r3, #50	; 0x32
 80076b2:	4a2d      	ldr	r2, [pc, #180]	; (8007768 <UART_SetConfig+0x6f4>)
 80076b4:	fba2 2303 	umull	r2, r3, r2, r3
 80076b8:	095b      	lsrs	r3, r3, #5
 80076ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076be:	4498      	add	r8, r3
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	469b      	mov	fp, r3
 80076c4:	f04f 0c00 	mov.w	ip, #0
 80076c8:	46d9      	mov	r9, fp
 80076ca:	46e2      	mov	sl, ip
 80076cc:	eb19 0309 	adds.w	r3, r9, r9
 80076d0:	eb4a 040a 	adc.w	r4, sl, sl
 80076d4:	4699      	mov	r9, r3
 80076d6:	46a2      	mov	sl, r4
 80076d8:	eb19 090b 	adds.w	r9, r9, fp
 80076dc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80076e0:	f04f 0100 	mov.w	r1, #0
 80076e4:	f04f 0200 	mov.w	r2, #0
 80076e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80076ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80076f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80076f4:	4689      	mov	r9, r1
 80076f6:	4692      	mov	sl, r2
 80076f8:	eb1b 0509 	adds.w	r5, fp, r9
 80076fc:	eb4c 060a 	adc.w	r6, ip, sl
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	4619      	mov	r1, r3
 8007706:	f04f 0200 	mov.w	r2, #0
 800770a:	f04f 0300 	mov.w	r3, #0
 800770e:	f04f 0400 	mov.w	r4, #0
 8007712:	0094      	lsls	r4, r2, #2
 8007714:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007718:	008b      	lsls	r3, r1, #2
 800771a:	461a      	mov	r2, r3
 800771c:	4623      	mov	r3, r4
 800771e:	4628      	mov	r0, r5
 8007720:	4631      	mov	r1, r6
 8007722:	f7f9 fab9 	bl	8000c98 <__aeabi_uldivmod>
 8007726:	4603      	mov	r3, r0
 8007728:	460c      	mov	r4, r1
 800772a:	461a      	mov	r2, r3
 800772c:	4b0e      	ldr	r3, [pc, #56]	; (8007768 <UART_SetConfig+0x6f4>)
 800772e:	fba3 1302 	umull	r1, r3, r3, r2
 8007732:	095b      	lsrs	r3, r3, #5
 8007734:	2164      	movs	r1, #100	; 0x64
 8007736:	fb01 f303 	mul.w	r3, r1, r3
 800773a:	1ad3      	subs	r3, r2, r3
 800773c:	011b      	lsls	r3, r3, #4
 800773e:	3332      	adds	r3, #50	; 0x32
 8007740:	4a09      	ldr	r2, [pc, #36]	; (8007768 <UART_SetConfig+0x6f4>)
 8007742:	fba2 2303 	umull	r2, r3, r2, r3
 8007746:	095b      	lsrs	r3, r3, #5
 8007748:	f003 020f 	and.w	r2, r3, #15
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4442      	add	r2, r8
 8007752:	609a      	str	r2, [r3, #8]
}
 8007754:	e7ff      	b.n	8007756 <UART_SetConfig+0x6e2>
 8007756:	bf00      	nop
 8007758:	3714      	adds	r7, #20
 800775a:	46bd      	mov	sp, r7
 800775c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007760:	40011000 	.word	0x40011000
 8007764:	40011400 	.word	0x40011400
 8007768:	51eb851f 	.word	0x51eb851f

0800776c <__NNOM_SSAT>:
#define NNOM_TRUNCATE
#endif

// SSAT implementation with C code
#ifndef __NNOM_SSAT
static inline int __NNOM_SSAT(int32_t value, int32_t bit) {
 800776c:	b480      	push	{r7}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
    int32_t min = -(1<<(bit-1));
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	3b01      	subs	r3, #1
 800777a:	2201      	movs	r2, #1
 800777c:	fa02 f303 	lsl.w	r3, r2, r3
 8007780:	425b      	negs	r3, r3
 8007782:	60fb      	str	r3, [r7, #12]
    int32_t max = (1<<(bit-1)) - 1;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	3b01      	subs	r3, #1
 8007788:	2201      	movs	r2, #1
 800778a:	fa02 f303 	lsl.w	r3, r2, r3
 800778e:	3b01      	subs	r3, #1
 8007790:	60bb      	str	r3, [r7, #8]
    if (value < min)
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	429a      	cmp	r2, r3
 8007798:	da01      	bge.n	800779e <__NNOM_SSAT+0x32>
        return min;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	e006      	b.n	80077ac <__NNOM_SSAT+0x40>
    else if (value > max)
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	429a      	cmp	r2, r3
 80077a4:	dd01      	ble.n	80077aa <__NNOM_SSAT+0x3e>
        return max;
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	e000      	b.n	80077ac <__NNOM_SSAT+0x40>
    else
        return value;
 80077aa:	687b      	ldr	r3, [r7, #4]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3714      	adds	r7, #20
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <__NNOM_USAT>:
#endif

// USAT implementation with C code
#ifndef __NNOM_USAT
static inline int __NNOM_USAT(int32_t value, int32_t bit) {
 80077b8:	b480      	push	{r7}
 80077ba:	b085      	sub	sp, #20
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
    int32_t max = (1<<(bit-1)) - 1;
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	3b01      	subs	r3, #1
 80077c6:	2201      	movs	r2, #1
 80077c8:	fa02 f303 	lsl.w	r3, r2, r3
 80077cc:	3b01      	subs	r3, #1
 80077ce:	60fb      	str	r3, [r7, #12]
    if (value < 0)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	da01      	bge.n	80077da <__NNOM_USAT+0x22>
        return 0;
 80077d6:	2300      	movs	r3, #0
 80077d8:	e006      	b.n	80077e8 <__NNOM_USAT+0x30>
    else if (value > max)
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	429a      	cmp	r2, r3
 80077e0:	dd01      	ble.n	80077e6 <__NNOM_USAT+0x2e>
        return max;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	e000      	b.n	80077e8 <__NNOM_USAT+0x30>
    else
        return value;
 80077e6:	687b      	ldr	r3, [r7, #4]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3714      	adds	r7, #20
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <local_maxpool_q7_HWC>:
	const uint16_t stride_y,     // stride
	const uint16_t dim_im_out_x, // output image dimension x or W
	const uint16_t dim_im_out_y, // output image dimension y or H
	q7_t *bufferA,               // a buffer for local storage, NULL by now
	q7_t *Im_out)
{
 80077f4:	b490      	push	{r4, r7}
 80077f6:	b088      	sub	sp, #32
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	4608      	mov	r0, r1
 80077fe:	4611      	mov	r1, r2
 8007800:	461a      	mov	r2, r3
 8007802:	4603      	mov	r3, r0
 8007804:	817b      	strh	r3, [r7, #10]
 8007806:	460b      	mov	r3, r1
 8007808:	813b      	strh	r3, [r7, #8]
 800780a:	4613      	mov	r3, r2
 800780c:	80fb      	strh	r3, [r7, #6]
    int16_t i_ch_in, i_x, i_y;
    int16_t k_x, k_y;

    for (i_ch_in = 0; i_ch_in < ch_im_in; i_ch_in++)
 800780e:	2300      	movs	r3, #0
 8007810:	83fb      	strh	r3, [r7, #30]
 8007812:	e0b4      	b.n	800797e <local_maxpool_q7_HWC+0x18a>
    {
        for (i_y = 0; i_y < dim_im_out_y; i_y++)
 8007814:	2300      	movs	r3, #0
 8007816:	837b      	strh	r3, [r7, #26]
 8007818:	e0a4      	b.n	8007964 <local_maxpool_q7_HWC+0x170>
        {
            for (i_x = 0; i_x < dim_im_out_x; i_x++)
 800781a:	2300      	movs	r3, #0
 800781c:	83bb      	strh	r3, [r7, #28]
 800781e:	e094      	b.n	800794a <local_maxpool_q7_HWC+0x156>
            {
                int max = -129;
 8007820:	f06f 0380 	mvn.w	r3, #128	; 0x80
 8007824:	613b      	str	r3, [r7, #16]
                for (k_y = i_y * stride_y - padding_y; k_y < i_y * stride_y - padding_y + dim_kernel_y; k_y++)
 8007826:	8b7b      	ldrh	r3, [r7, #26]
 8007828:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800782a:	fb12 f303 	smulbb	r3, r2, r3
 800782e:	b29a      	uxth	r2, r3
 8007830:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	b29b      	uxth	r3, r3
 8007836:	82fb      	strh	r3, [r7, #22]
 8007838:	e05f      	b.n	80078fa <local_maxpool_q7_HWC+0x106>
                {
                    for (k_x = i_x * stride_x - padding_x; k_x < i_x * stride_x - padding_x + dim_kernel_x; k_x++)
 800783a:	8bbb      	ldrh	r3, [r7, #28]
 800783c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800783e:	fb12 f303 	smulbb	r3, r2, r3
 8007842:	b29a      	uxth	r2, r3
 8007844:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007846:	1ad3      	subs	r3, r2, r3
 8007848:	b29b      	uxth	r3, r3
 800784a:	833b      	strh	r3, [r7, #24]
 800784c:	e042      	b.n	80078d4 <local_maxpool_q7_HWC+0xe0>
                    {
                        if (k_y >= 0 && k_x >= 0 && k_y < dim_im_in_y && k_x < dim_im_in_x)
 800784e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007852:	2b00      	cmp	r3, #0
 8007854:	db38      	blt.n	80078c8 <local_maxpool_q7_HWC+0xd4>
 8007856:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800785a:	2b00      	cmp	r3, #0
 800785c:	db34      	blt.n	80078c8 <local_maxpool_q7_HWC+0xd4>
 800785e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007862:	893b      	ldrh	r3, [r7, #8]
 8007864:	429a      	cmp	r2, r3
 8007866:	da2f      	bge.n	80078c8 <local_maxpool_q7_HWC+0xd4>
 8007868:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800786c:	897b      	ldrh	r3, [r7, #10]
 800786e:	429a      	cmp	r2, r3
 8007870:	da2a      	bge.n	80078c8 <local_maxpool_q7_HWC+0xd4>
                        {
                            if (Im_in[i_ch_in + ch_im_in * (k_x + k_y * dim_im_in_x)] > max)
 8007872:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8007876:	88fb      	ldrh	r3, [r7, #6]
 8007878:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 800787c:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8007880:	897c      	ldrh	r4, [r7, #10]
 8007882:	fb04 f101 	mul.w	r1, r4, r1
 8007886:	4401      	add	r1, r0
 8007888:	fb01 f303 	mul.w	r3, r1, r3
 800788c:	4413      	add	r3, r2
 800788e:	461a      	mov	r2, r3
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	4413      	add	r3, r2
 8007894:	f993 3000 	ldrsb.w	r3, [r3]
 8007898:	461a      	mov	r2, r3
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	4293      	cmp	r3, r2
 800789e:	da13      	bge.n	80078c8 <local_maxpool_q7_HWC+0xd4>
                            {
                                max = Im_in[i_ch_in + ch_im_in * (k_x + k_y * dim_im_in_x)];
 80078a0:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80078a4:	88fb      	ldrh	r3, [r7, #6]
 80078a6:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 80078aa:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80078ae:	897c      	ldrh	r4, [r7, #10]
 80078b0:	fb04 f101 	mul.w	r1, r4, r1
 80078b4:	4401      	add	r1, r0
 80078b6:	fb01 f303 	mul.w	r3, r1, r3
 80078ba:	4413      	add	r3, r2
 80078bc:	461a      	mov	r2, r3
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	4413      	add	r3, r2
 80078c2:	f993 3000 	ldrsb.w	r3, [r3]
 80078c6:	613b      	str	r3, [r7, #16]
                    for (k_x = i_x * stride_x - padding_x; k_x < i_x * stride_x - padding_x + dim_kernel_x; k_x++)
 80078c8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	3301      	adds	r3, #1
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	833b      	strh	r3, [r7, #24]
 80078d4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80078d8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80078dc:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 80078de:	fb01 f103 	mul.w	r1, r1, r3
 80078e2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80078e4:	1ac9      	subs	r1, r1, r3
 80078e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80078e8:	440b      	add	r3, r1
 80078ea:	429a      	cmp	r2, r3
 80078ec:	dbaf      	blt.n	800784e <local_maxpool_q7_HWC+0x5a>
                for (k_y = i_y * stride_y - padding_y; k_y < i_y * stride_y - padding_y + dim_kernel_y; k_y++)
 80078ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	3301      	adds	r3, #1
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	82fb      	strh	r3, [r7, #22]
 80078fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80078fe:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007902:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 8007904:	fb01 f103 	mul.w	r1, r1, r3
 8007908:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800790a:	1ac9      	subs	r1, r1, r3
 800790c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800790e:	440b      	add	r3, r1
 8007910:	429a      	cmp	r2, r3
 8007912:	db92      	blt.n	800783a <local_maxpool_q7_HWC+0x46>
                            }
                        }
                    }
                }
                Im_out[i_ch_in + ch_im_in * (i_x + i_y * dim_im_out_x)] = max;
 8007914:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8007918:	88fb      	ldrh	r3, [r7, #6]
 800791a:	f9b7 001c 	ldrsh.w	r0, [r7, #28]
 800791e:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 8007922:	f8b7 4040 	ldrh.w	r4, [r7, #64]	; 0x40
 8007926:	fb04 f101 	mul.w	r1, r4, r1
 800792a:	4401      	add	r1, r0
 800792c:	fb01 f303 	mul.w	r3, r1, r3
 8007930:	4413      	add	r3, r2
 8007932:	461a      	mov	r2, r3
 8007934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007936:	4413      	add	r3, r2
 8007938:	693a      	ldr	r2, [r7, #16]
 800793a:	b252      	sxtb	r2, r2
 800793c:	701a      	strb	r2, [r3, #0]
            for (i_x = 0; i_x < dim_im_out_x; i_x++)
 800793e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8007942:	b29b      	uxth	r3, r3
 8007944:	3301      	adds	r3, #1
 8007946:	b29b      	uxth	r3, r3
 8007948:	83bb      	strh	r3, [r7, #28]
 800794a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800794e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007952:	429a      	cmp	r2, r3
 8007954:	f6ff af64 	blt.w	8007820 <local_maxpool_q7_HWC+0x2c>
        for (i_y = 0; i_y < dim_im_out_y; i_y++)
 8007958:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800795c:	b29b      	uxth	r3, r3
 800795e:	3301      	adds	r3, #1
 8007960:	b29b      	uxth	r3, r3
 8007962:	837b      	strh	r3, [r7, #26]
 8007964:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8007968:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800796c:	429a      	cmp	r2, r3
 800796e:	f6ff af54 	blt.w	800781a <local_maxpool_q7_HWC+0x26>
    for (i_ch_in = 0; i_ch_in < ch_im_in; i_ch_in++)
 8007972:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007976:	b29b      	uxth	r3, r3
 8007978:	3301      	adds	r3, #1
 800797a:	b29b      	uxth	r3, r3
 800797c:	83fb      	strh	r3, [r7, #30]
 800797e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8007982:	88fb      	ldrh	r3, [r7, #6]
 8007984:	429a      	cmp	r2, r3
 8007986:	f6ff af45 	blt.w	8007814 <local_maxpool_q7_HWC+0x20>
            }
        }
    }
}
 800798a:	bf00      	nop
 800798c:	3720      	adds	r7, #32
 800798e:	46bd      	mov	sp, r7
 8007990:	bc90      	pop	{r4, r7}
 8007992:	4770      	bx	lr

08007994 <local_convolve_HWC_q7_nonsquare>:
	const uint16_t dim_im_out_x,                                       // output image dimension x
	const uint16_t dim_im_out_y,                                       // output image dimension y
	q15_t *bufferA,                                                    //buffer space for input
	q7_t *bufferB                                                      //buffer space for output
)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b098      	sub	sp, #96	; 0x60
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	4608      	mov	r0, r1
 800799e:	4611      	mov	r1, r2
 80079a0:	461a      	mov	r2, r3
 80079a2:	4603      	mov	r3, r0
 80079a4:	817b      	strh	r3, [r7, #10]
 80079a6:	460b      	mov	r3, r1
 80079a8:	813b      	strh	r3, [r7, #8]
 80079aa:	4613      	mov	r3, r2
 80079ac:	80fb      	strh	r3, [r7, #6]
    int i, j, k, l, m, n;
    int conv_out;
    int in_row, in_col;
    int in_pix_loc, wt_loc;
    int shift_idx, shift_steps;
    if(q_type == NNOM_QTYPE_PER_AXIS)
 80079ae:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d102      	bne.n	80079bc <local_convolve_HWC_q7_nonsquare+0x28>
        shift_steps = 1;
 80079b6:	2301      	movs	r3, #1
 80079b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079ba:	e001      	b.n	80079c0 <local_convolve_HWC_q7_nonsquare+0x2c>
    else
        shift_steps = 0;
 80079bc:	2300      	movs	r3, #0
 80079be:	63fb      	str	r3, [r7, #60]	; 0x3c

    for (i = 0, shift_idx = 0; i < ch_im_out; i++, shift_idx += shift_steps)
 80079c0:	2300      	movs	r3, #0
 80079c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079c4:	2300      	movs	r3, #0
 80079c6:	643b      	str	r3, [r7, #64]	; 0x40
 80079c8:	e0f1      	b.n	8007bae <local_convolve_HWC_q7_nonsquare+0x21a>
    {
        for (j = 0; j < dim_im_out_y; j++)
 80079ca:	2300      	movs	r3, #0
 80079cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80079ce:	e0e1      	b.n	8007b94 <local_convolve_HWC_q7_nonsquare+0x200>
        {
            for (k = 0; k < dim_im_out_x; k++)
 80079d0:	2300      	movs	r3, #0
 80079d2:	657b      	str	r3, [r7, #84]	; 0x54
 80079d4:	e0d5      	b.n	8007b82 <local_convolve_HWC_q7_nonsquare+0x1ee>
            {
				int32_t base_idx_y = stride_y * j - padding_y;
 80079d6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80079da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079dc:	fb02 f203 	mul.w	r2, r2, r3
 80079e0:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80079e4:	1ad3      	subs	r3, r2, r3
 80079e6:	63bb      	str	r3, [r7, #56]	; 0x38
				int32_t base_idx_x = stride_x * k - padding_x;
 80079e8:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 80079ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80079ee:	fb02 f203 	mul.w	r2, r2, r3
 80079f2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80079f6:	1ad3      	subs	r3, r2, r3
 80079f8:	637b      	str	r3, [r7, #52]	; 0x34
				int32_t ker_y_start = MAX(0, -base_idx_y);
 80079fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fc:	425b      	negs	r3, r3
 80079fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007a02:	633b      	str	r3, [r7, #48]	; 0x30
				int32_t ker_x_start = MAX(0, -base_idx_x);
 8007a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a06:	425b      	negs	r3, r3
 8007a08:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
				int32_t ker_y_end = MIN(dim_kernel_y, dim_im_in_y - base_idx_y);
 8007a0e:	893a      	ldrh	r2, [r7, #8]
 8007a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a12:	1ad2      	subs	r2, r2, r3
 8007a14:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	bfa8      	it	ge
 8007a1c:	4613      	movge	r3, r2
 8007a1e:	62bb      	str	r3, [r7, #40]	; 0x28
				int32_t ker_x_end = MIN(dim_kernel_x, dim_im_in_x - base_idx_x);
 8007a20:	897a      	ldrh	r2, [r7, #10]
 8007a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a24:	1ad2      	subs	r2, r2, r3
 8007a26:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	bfa8      	it	ge
 8007a2e:	4613      	movge	r3, r2
 8007a30:	627b      	str	r3, [r7, #36]	; 0x24

                conv_out = ((q31_t)(bias[i]) << bias_shift[shift_idx]) + NNOM_ROUND(out_shift[shift_idx]);
 8007a32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a34:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8007a38:	4413      	add	r3, r2
 8007a3a:	f993 3000 	ldrsb.w	r3, [r3]
 8007a3e:	4619      	mov	r1, r3
 8007a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007a48:	4413      	add	r3, r2
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8007a50:	647b      	str	r3, [r7, #68]	; 0x44
                for (m = ker_y_start; m < ker_y_end; m++)
 8007a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a56:	e06c      	b.n	8007b32 <local_convolve_HWC_q7_nonsquare+0x19e>
                {
                    for (n = ker_x_start; n < ker_x_end; n++)
 8007a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a5c:	e062      	b.n	8007b24 <local_convolve_HWC_q7_nonsquare+0x190>
                    {
                        // if-for implementation
                        in_row = stride_y * j + m * dilation_y - padding_y;
 8007a5e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8007a62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a64:	fb02 f203 	mul.w	r2, r2, r3
 8007a68:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8007a6c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007a6e:	fb01 f303 	mul.w	r3, r1, r3
 8007a72:	441a      	add	r2, r3
 8007a74:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8007a78:	1ad3      	subs	r3, r2, r3
 8007a7a:	623b      	str	r3, [r7, #32]
                        in_col = stride_x * k + n * dilation_x - padding_x;
 8007a7c:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8007a80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007a82:	fb02 f203 	mul.w	r2, r2, r3
 8007a86:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8007a8a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007a8c:	fb01 f303 	mul.w	r3, r1, r3
 8007a90:	441a      	add	r2, r3
 8007a92:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8007a96:	1ad3      	subs	r3, r2, r3
 8007a98:	61fb      	str	r3, [r7, #28]

                        // pre-calculate the pixel location and weight location to improve the performance.
                        in_pix_loc = (in_row * dim_im_in_x + in_col) * ch_im_in;
 8007a9a:	897b      	ldrh	r3, [r7, #10]
 8007a9c:	6a3a      	ldr	r2, [r7, #32]
 8007a9e:	fb02 f203 	mul.w	r2, r2, r3
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	88fa      	ldrh	r2, [r7, #6]
 8007aa8:	fb02 f303 	mul.w	r3, r2, r3
 8007aac:	61bb      	str	r3, [r7, #24]
                        wt_loc = i * ch_im_in * dim_kernel_y * dim_kernel_x + (m * dim_kernel_x + n) * ch_im_in;
 8007aae:	88fb      	ldrh	r3, [r7, #6]
 8007ab0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007ab2:	fb02 f303 	mul.w	r3, r2, r3
 8007ab6:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8007aba:	fb02 f303 	mul.w	r3, r2, r3
 8007abe:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 8007ac2:	fb02 f203 	mul.w	r2, r2, r3
 8007ac6:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8007aca:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007acc:	fb01 f103 	mul.w	r1, r1, r3
 8007ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ad2:	440b      	add	r3, r1
 8007ad4:	88f9      	ldrh	r1, [r7, #6]
 8007ad6:	fb01 f303 	mul.w	r3, r1, r3
 8007ada:	4413      	add	r3, r2
 8007adc:	617b      	str	r3, [r7, #20]
                        
                        for (l = 0; l < ch_im_in; l++)
 8007ade:	2300      	movs	r3, #0
 8007ae0:	653b      	str	r3, [r7, #80]	; 0x50
 8007ae2:	e018      	b.n	8007b16 <local_convolve_HWC_q7_nonsquare+0x182>
                        {    
                            conv_out += Im_in[in_pix_loc + l] * wt[wt_loc + l];
 8007ae4:	69ba      	ldr	r2, [r7, #24]
 8007ae6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ae8:	4413      	add	r3, r2
 8007aea:	461a      	mov	r2, r3
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	4413      	add	r3, r2
 8007af0:	f993 3000 	ldrsb.w	r3, [r3]
 8007af4:	4619      	mov	r1, r3
 8007af6:	697a      	ldr	r2, [r7, #20]
 8007af8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007afa:	4413      	add	r3, r2
 8007afc:	461a      	mov	r2, r3
 8007afe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b00:	4413      	add	r3, r2
 8007b02:	f993 3000 	ldrsb.w	r3, [r3]
 8007b06:	fb03 f301 	mul.w	r3, r3, r1
 8007b0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b0c:	4413      	add	r3, r2
 8007b0e:	647b      	str	r3, [r7, #68]	; 0x44
                        for (l = 0; l < ch_im_in; l++)
 8007b10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b12:	3301      	adds	r3, #1
 8007b14:	653b      	str	r3, [r7, #80]	; 0x50
 8007b16:	88fb      	ldrh	r3, [r7, #6]
 8007b18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	dbe2      	blt.n	8007ae4 <local_convolve_HWC_q7_nonsquare+0x150>
                    for (n = ker_x_start; n < ker_x_end; n++)
 8007b1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b20:	3301      	adds	r3, #1
 8007b22:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	db98      	blt.n	8007a5e <local_convolve_HWC_q7_nonsquare+0xca>
                for (m = ker_y_start; m < ker_y_end; m++)
 8007b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b2e:	3301      	adds	r3, #1
 8007b30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b36:	429a      	cmp	r2, r3
 8007b38:	db8e      	blt.n	8007a58 <local_convolve_HWC_q7_nonsquare+0xc4>
                        } 
                    }
                }
                Im_out[i + (j * dim_im_out_x + k) * ch_im_out] = (q7_t)__NNOM_SSAT((conv_out >> out_shift[shift_idx]), 8);
 8007b3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007b42:	4413      	add	r3, r2
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b48:	fa42 f303 	asr.w	r3, r2, r3
 8007b4c:	2108      	movs	r1, #8
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7ff fe0c 	bl	800776c <__NNOM_SSAT>
 8007b54:	4601      	mov	r1, r0
 8007b56:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8007b5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b5c:	fb02 f203 	mul.w	r2, r2, r3
 8007b60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b62:	4413      	add	r3, r2
 8007b64:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007b68:	fb02 f203 	mul.w	r2, r2, r3
 8007b6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b6e:	4413      	add	r3, r2
 8007b70:	461a      	mov	r2, r3
 8007b72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b76:	4413      	add	r3, r2
 8007b78:	b24a      	sxtb	r2, r1
 8007b7a:	701a      	strb	r2, [r3, #0]
            for (k = 0; k < dim_im_out_x; k++)
 8007b7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b7e:	3301      	adds	r3, #1
 8007b80:	657b      	str	r3, [r7, #84]	; 0x54
 8007b82:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8007b86:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	f6ff af24 	blt.w	80079d6 <local_convolve_HWC_q7_nonsquare+0x42>
        for (j = 0; j < dim_im_out_y; j++)
 8007b8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b90:	3301      	adds	r3, #1
 8007b92:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b94:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007b98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	f6ff af18 	blt.w	80079d0 <local_convolve_HWC_q7_nonsquare+0x3c>
    for (i = 0, shift_idx = 0; i < ch_im_out; i++, shift_idx += shift_steps)
 8007ba0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ba6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007baa:	4413      	add	r3, r2
 8007bac:	643b      	str	r3, [r7, #64]	; 0x40
 8007bae:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007bb2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	f6ff af08 	blt.w	80079ca <local_convolve_HWC_q7_nonsquare+0x36>
            }
        }
    }
}
 8007bba:	bf00      	nop
 8007bbc:	3760      	adds	r7, #96	; 0x60
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <local_softmax_q7>:
    }
}


void local_softmax_q7(const q7_t *vec_in, const uint32_t dim_vec, q7_t *p_out)
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b08a      	sub	sp, #40	; 0x28
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	60f8      	str	r0, [r7, #12]
 8007bca:	60b9      	str	r1, [r7, #8]
 8007bcc:	607a      	str	r2, [r7, #4]
    q31_t sum;
    int32_t i;
    uint8_t shift;
    q15_t base;
    base = -257;
 8007bce:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8007bd2:	83fb      	strh	r3, [r7, #30]

    /* We first search for the maximum */
    for (i = 0; i < dim_vec; i++)
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	623b      	str	r3, [r7, #32]
 8007bd8:	e012      	b.n	8007c00 <local_softmax_q7+0x3e>
    {
        if (vec_in[i] > base)
 8007bda:	6a3b      	ldr	r3, [r7, #32]
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	4413      	add	r3, r2
 8007be0:	f993 3000 	ldrsb.w	r3, [r3]
 8007be4:	b21b      	sxth	r3, r3
 8007be6:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	da05      	bge.n	8007bfa <local_softmax_q7+0x38>
        {
            base = vec_in[i];
 8007bee:	6a3b      	ldr	r3, [r7, #32]
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f993 3000 	ldrsb.w	r3, [r3]
 8007bf8:	83fb      	strh	r3, [r7, #30]
    for (i = 0; i < dim_vec; i++)
 8007bfa:	6a3b      	ldr	r3, [r7, #32]
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	623b      	str	r3, [r7, #32]
 8007c00:	6a3b      	ldr	r3, [r7, #32]
 8007c02:	68ba      	ldr	r2, [r7, #8]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d8e8      	bhi.n	8007bda <local_softmax_q7+0x18>
    /* 
     * So the base is set to max-8, meaning 
     * that we ignore really small values. 
     * anyway, they will be 0 after shrinking to q7_t.
     */
    base = base - 8;
 8007c08:	8bfb      	ldrh	r3, [r7, #30]
 8007c0a:	3b08      	subs	r3, #8
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	83fb      	strh	r3, [r7, #30]

    sum = 0;
 8007c10:	2300      	movs	r3, #0
 8007c12:	627b      	str	r3, [r7, #36]	; 0x24

    for (i = 0; i < dim_vec; i++)
 8007c14:	2300      	movs	r3, #0
 8007c16:	623b      	str	r3, [r7, #32]
 8007c18:	e022      	b.n	8007c60 <local_softmax_q7+0x9e>
    {
        if (vec_in[i] > base)
 8007c1a:	6a3b      	ldr	r3, [r7, #32]
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	4413      	add	r3, r2
 8007c20:	f993 3000 	ldrsb.w	r3, [r3]
 8007c24:	b21b      	sxth	r3, r3
 8007c26:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	da15      	bge.n	8007c5a <local_softmax_q7+0x98>
        {
            shift = (uint8_t)__NNOM_USAT(vec_in[i] - base, 5);
 8007c2e:	6a3b      	ldr	r3, [r7, #32]
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	4413      	add	r3, r2
 8007c34:	f993 3000 	ldrsb.w	r3, [r3]
 8007c38:	461a      	mov	r2, r3
 8007c3a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007c3e:	1ad3      	subs	r3, r2, r3
 8007c40:	2105      	movs	r1, #5
 8007c42:	4618      	mov	r0, r3
 8007c44:	f7ff fdb8 	bl	80077b8 <__NNOM_USAT>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	75fb      	strb	r3, [r7, #23]
            sum += 0x1 << shift;
 8007c4c:	7dfb      	ldrb	r3, [r7, #23]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	fa02 f303 	lsl.w	r3, r2, r3
 8007c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c56:	4413      	add	r3, r2
 8007c58:	627b      	str	r3, [r7, #36]	; 0x24
    for (i = 0; i < dim_vec; i++)
 8007c5a:	6a3b      	ldr	r3, [r7, #32]
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	623b      	str	r3, [r7, #32]
 8007c60:	6a3b      	ldr	r3, [r7, #32]
 8007c62:	68ba      	ldr	r2, [r7, #8]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d8d8      	bhi.n	8007c1a <local_softmax_q7+0x58>
        }
    }

    /* This is effectively (0x1 << 20) / sum */
    int output_base = 0x100000 / sum;
 8007c68:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8007c72:	61bb      	str	r3, [r7, #24]
    /* 
     * Final confidence will be output_base >> ( 13 - (vec_in[i] - base) )
     * so 128 (0x1<<7) -> 100% confidence when sum = 0x1 << 8, output_base = 0x1 << 12 
     * and vec_in[i]-base = 8
     */
    for (i = 0; i < dim_vec; i++)
 8007c74:	2300      	movs	r3, #0
 8007c76:	623b      	str	r3, [r7, #32]
 8007c78:	e02f      	b.n	8007cda <local_softmax_q7+0x118>
    {
        if (vec_in[i] > base)
 8007c7a:	6a3b      	ldr	r3, [r7, #32]
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	4413      	add	r3, r2
 8007c80:	f993 3000 	ldrsb.w	r3, [r3]
 8007c84:	b21b      	sxth	r3, r3
 8007c86:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	da1d      	bge.n	8007cca <local_softmax_q7+0x108>
        {
            /* Here minimum value of 13+base-vec_in[i] will be 5 */
            shift = (uint8_t)__NNOM_USAT(13 + base - vec_in[i], 5);
 8007c8e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007c92:	330d      	adds	r3, #13
 8007c94:	6a3a      	ldr	r2, [r7, #32]
 8007c96:	68f9      	ldr	r1, [r7, #12]
 8007c98:	440a      	add	r2, r1
 8007c9a:	f992 2000 	ldrsb.w	r2, [r2]
 8007c9e:	1a9b      	subs	r3, r3, r2
 8007ca0:	2105      	movs	r1, #5
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7ff fd88 	bl	80077b8 <__NNOM_USAT>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	75fb      	strb	r3, [r7, #23]
            p_out[i] = (q7_t)__NNOM_SSAT((output_base >> shift), 8);
 8007cac:	7dfb      	ldrb	r3, [r7, #23]
 8007cae:	69ba      	ldr	r2, [r7, #24]
 8007cb0:	fa42 f303 	asr.w	r3, r2, r3
 8007cb4:	2108      	movs	r1, #8
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7ff fd58 	bl	800776c <__NNOM_SSAT>
 8007cbc:	4601      	mov	r1, r0
 8007cbe:	6a3b      	ldr	r3, [r7, #32]
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	b24a      	sxtb	r2, r1
 8007cc6:	701a      	strb	r2, [r3, #0]
 8007cc8:	e004      	b.n	8007cd4 <local_softmax_q7+0x112>
        }
        else
        {
            p_out[i] = 0;
 8007cca:	6a3b      	ldr	r3, [r7, #32]
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	4413      	add	r3, r2
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < dim_vec; i++)
 8007cd4:	6a3b      	ldr	r3, [r7, #32]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	623b      	str	r3, [r7, #32]
 8007cda:	6a3b      	ldr	r3, [r7, #32]
 8007cdc:	68ba      	ldr	r2, [r7, #8]
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d8cb      	bhi.n	8007c7a <local_softmax_q7+0xb8>
        }
    }
}
 8007ce2:	bf00      	nop
 8007ce4:	3728      	adds	r7, #40	; 0x28
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
	...

08007cec <nnom_mem>:
const char default_layer_names[][12] = DEFUALT_LAYER_NAMES;
const char default_activation_names[][8] = ACTIVATION_NAMES;
size_t nnom_memory_taken = 0;

void *nnom_mem(size_t size)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
	size = nnom_alignto(size, 4);
 8007cf4:	2104      	movs	r1, #4
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 f83a 	bl	8007d70 <nnom_alignto>
 8007cfc:	6078      	str	r0, [r7, #4]
	void *p = nnom_malloc(size);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f002 fc34 	bl	800a56c <malloc>
 8007d04:	4603      	mov	r3, r0
 8007d06:	60fb      	str	r3, [r7, #12]
	if (p)
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00a      	beq.n	8007d24 <nnom_mem+0x38>
	{
		nnom_memory_taken += size; //test
 8007d0e:	4b08      	ldr	r3, [pc, #32]	; (8007d30 <nnom_mem+0x44>)
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4413      	add	r3, r2
 8007d16:	4a06      	ldr	r2, [pc, #24]	; (8007d30 <nnom_mem+0x44>)
 8007d18:	6013      	str	r3, [r2, #0]
		nnom_memset(p, 0, size);
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	68f8      	ldr	r0, [r7, #12]
 8007d20:	f002 fc50 	bl	800a5c4 <memset>
	}
	return p;
 8007d24:	68fb      	ldr	r3, [r7, #12]
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	20000eb0 	.word	0x20000eb0

08007d34 <io_mem_size>:
	return nnom_memory_taken;
}

// get the size of an IO module
static size_t io_mem_size(nnom_layer_io_t *io)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
	size_t size = 0;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	60fb      	str	r3, [r7, #12]
	if (io != NULL)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00f      	beq.n	8007d66 <io_mem_size+0x32>
	{
		while (io)
 8007d46:	e00b      	b.n	8007d60 <io_mem_size+0x2c>
		{
			size += tensor_size(io->tensor);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f001 f829 	bl	8008da4 <tensor_size>
 8007d52:	4602      	mov	r2, r0
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	4413      	add	r3, r2
 8007d58:	60fb      	str	r3, [r7, #12]
			io = io->aux;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	607b      	str	r3, [r7, #4]
		while (io)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d1f0      	bne.n	8007d48 <io_mem_size+0x14>
		}
	}
	return size;
 8007d66:	68fb      	ldr	r3, [r7, #12]
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <nnom_alignto>:

size_t nnom_alignto(size_t value, uint32_t alignment)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
	if (value % alignment == 0)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	683a      	ldr	r2, [r7, #0]
 8007d7e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007d82:	6839      	ldr	r1, [r7, #0]
 8007d84:	fb01 f202 	mul.w	r2, r1, r2
 8007d88:	1a9b      	subs	r3, r3, r2
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d101      	bne.n	8007d92 <nnom_alignto+0x22>
		return value;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	e00d      	b.n	8007dae <nnom_alignto+0x3e>
	value += alignment - value % alignment;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	683a      	ldr	r2, [r7, #0]
 8007d96:	fbb3 f2f2 	udiv	r2, r3, r2
 8007d9a:	6839      	ldr	r1, [r7, #0]
 8007d9c:	fb01 f202 	mul.w	r2, r1, r2
 8007da0:	1a9b      	subs	r3, r3, r2
 8007da2:	683a      	ldr	r2, [r7, #0]
 8007da4:	1ad3      	subs	r3, r2, r3
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	4413      	add	r3, r2
 8007daa:	607b      	str	r3, [r7, #4]
	return value;
 8007dac:	687b      	ldr	r3, [r7, #4]
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	370c      	adds	r7, #12
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr

08007dba <find_last>:

// FIXME, this might not work correctly when model has mutiple output. 
static nnom_layer_t *find_last(nnom_layer_t *layer)
{
 8007dba:	b480      	push	{r7}
 8007dbc:	b083      	sub	sp, #12
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
	if (layer == NULL)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d106      	bne.n	8007dd6 <find_last+0x1c>
		return NULL;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	e00a      	b.n	8007de2 <find_last+0x28>
	// iterate every layer until the last one on the list, then return the last instance
	while (layer->out->hook.io != NULL)
		layer = layer->out->hook.io->owner;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	695b      	ldr	r3, [r3, #20]
 8007dd4:	607b      	str	r3, [r7, #4]
	while (layer->out->hook.io != NULL)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d1f5      	bne.n	8007dcc <find_last+0x12>
	return layer;
 8007de0:	687b      	ldr	r3, [r7, #4]
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	370c      	adds	r7, #12
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr

08007dee <find_index>:
// input start layer, return layer num
static uint32_t find_index(nnom_layer_t *start, nnom_layer_t *layer)
{
 8007dee:	b480      	push	{r7}
 8007df0:	b085      	sub	sp, #20
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
 8007df6:	6039      	str	r1, [r7, #0]
	uint32_t i = 1;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	60fb      	str	r3, [r7, #12]
	if (start == NULL)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d10f      	bne.n	8007e22 <find_index+0x34>
		return 0;
 8007e02:	2300      	movs	r3, #0
 8007e04:	e013      	b.n	8007e2e <find_index+0x40>
	// iterate every layer until the last one on the list, then return the index number
	while (start->out->hook.io != NULL)
	{
		i++;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	3301      	adds	r3, #1
 8007e0a:	60fb      	str	r3, [r7, #12]
		if (layer == start)
 8007e0c:	683a      	ldr	r2, [r7, #0]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d101      	bne.n	8007e18 <find_index+0x2a>
			return i;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	e00a      	b.n	8007e2e <find_index+0x40>
		start = start->out->hook.io->owner;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	695b      	ldr	r3, [r3, #20]
 8007e20:	607b      	str	r3, [r7, #4]
	while (start->out->hook.io != NULL)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d1ec      	bne.n	8007e06 <find_index+0x18>
	}
	return 0;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3714      	adds	r7, #20
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr
	...

08007e3c <model_add>:

static nnom_status_t model_add(nnom_model_t *model, nnom_layer_t *layer)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
	nnom_layer_t *last = NULL;
 8007e46:	2300      	movs	r3, #0
 8007e48:	60fb      	str	r3, [r7, #12]
	nnom_layer_t *curr = NULL;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	60bb      	str	r3, [r7, #8]

	if (layer == NULL)
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d105      	bne.n	8007e60 <model_add+0x24>
	{
		NNOM_LOG("Error: added a NULL layer, could be no memory while creating layer.\n");
 8007e54:	4811      	ldr	r0, [pc, #68]	; (8007e9c <model_add+0x60>)
 8007e56:	f003 fb2b 	bl	800b4b0 <puts>
		return NN_NO_MEMORY;
 8007e5a:	f06f 0306 	mvn.w	r3, #6
 8007e5e:	e019      	b.n	8007e94 <model_add+0x58>
	}

	last = find_last(model->head);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4618      	mov	r0, r3
 8007e66:	f7ff ffa8 	bl	8007dba <find_last>
 8007e6a:	60f8      	str	r0, [r7, #12]
	curr = layer;
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	60bb      	str	r3, [r7, #8]

	// when the layer list is empty, the find_last() return model->head.
	if (last == NULL)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d103      	bne.n	8007e7e <model_add+0x42>
	{
		model->head = curr;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	68ba      	ldr	r2, [r7, #8]
 8007e7a:	601a      	str	r2, [r3, #0]
 8007e7c:	e009      	b.n	8007e92 <model_add+0x56>
	}
	else
	{
		// hook the current layer with the last layer.
		last->out->hook.io = curr->in; // hook IO
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e82:	68ba      	ldr	r2, [r7, #8]
 8007e84:	6a12      	ldr	r2, [r2, #32]
 8007e86:	601a      	str	r2, [r3, #0]
		curr->in->hook.io = last->out;
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	6a1b      	ldr	r3, [r3, #32]
 8007e8c:	68fa      	ldr	r2, [r7, #12]
 8007e8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007e90:	601a      	str	r2, [r3, #0]
	}
	return NN_SUCCESS;
 8007e92:	2300      	movs	r3, #0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3710      	adds	r7, #16
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	0800eac4 	.word	0x0800eac4

08007ea0 <allocate_hook>:

// find an available hook on the io module, normally used by output io module.
// input, the output io module that wants to hook on
// output, the new hook that added to the end of the hook list on the io
static nnom_layer_hook_t *allocate_hook(nnom_layer_io_t *io)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
	nnom_layer_hook_t *hook;
	if (io == NULL)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d101      	bne.n	8007eb2 <allocate_hook+0x12>
		return NULL;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	e01c      	b.n	8007eec <allocate_hook+0x4c>
	hook = &io->hook;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	60fb      	str	r3, [r7, #12]

	// if the primary hook is empty, reture it directly.
	if (hook->io == NULL)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d104      	bne.n	8007ec8 <allocate_hook+0x28>
	{
		return hook;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	e014      	b.n	8007eec <allocate_hook+0x4c>
	else
	{
		// find the empty place and allocate new hook for us
		while (hook->next != NULL)
		{
			hook = hook->next;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	60fb      	str	r3, [r7, #12]
		while (hook->next != NULL)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d1f8      	bne.n	8007ec2 <allocate_hook+0x22>
		}
		hook->next = nnom_mem(sizeof(nnom_layer_hook_t));
 8007ed0:	2008      	movs	r0, #8
 8007ed2:	f7ff ff0b 	bl	8007cec <nnom_mem>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	605a      	str	r2, [r3, #4]
		if (hook->next == NULL)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d101      	bne.n	8007ee8 <allocate_hook+0x48>
			return NULL;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	e001      	b.n	8007eec <allocate_hook+0x4c>
		return hook->next;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	685b      	ldr	r3, [r3, #4]
	}
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3710      	adds	r7, #16
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <allocate_io>:

// to check if an io is hooked to other layer
// input the primary io of a layer's input or output
// return, the new io that added to the io list.
static nnom_layer_io_t *allocate_io(nnom_layer_io_t *io)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
	if (io == NULL)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d101      	bne.n	8007f06 <allocate_io+0x12>
		return NULL;
 8007f02:	2300      	movs	r3, #0
 8007f04:	e01f      	b.n	8007f46 <allocate_io+0x52>

	// if the io is free to used
	if (io->hook.io == NULL)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d104      	bne.n	8007f18 <allocate_io+0x24>
	{
		return io;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	e019      	b.n	8007f46 <allocate_io+0x52>
	else
	{
		// find the empty place and allocate new hook for us
		while (io->aux != NULL)
		{
			io = io->aux;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	607b      	str	r3, [r7, #4]
		while (io->aux != NULL)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d1f8      	bne.n	8007f12 <allocate_io+0x1e>
		}
		io->aux = nnom_mem(sizeof(nnom_layer_io_t));
 8007f20:	201c      	movs	r0, #28
 8007f22:	f7ff fee3 	bl	8007cec <nnom_mem>
 8007f26:	4602      	mov	r2, r0
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	609a      	str	r2, [r3, #8]
		if (io->aux == NULL)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d101      	bne.n	8007f38 <allocate_io+0x44>
			return NULL;
 8007f34:	2300      	movs	r3, #0
 8007f36:	e006      	b.n	8007f46 <allocate_io+0x52>
		// the owner for new io is inherited
		io->aux->owner = io->owner;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	6952      	ldr	r2, [r2, #20]
 8007f40:	615a      	str	r2, [r3, #20]
		return io->aux;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	689b      	ldr	r3, [r3, #8]
	}
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3708      	adds	r7, #8
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <model_hook>:

// hook the current layer to the input layer
// this function only to connect (single output layer) to (single input layer).
static nnom_layer_t *model_hook(nnom_layer_t *curr, nnom_layer_t *last)
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b084      	sub	sp, #16
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
 8007f56:	6039      	str	r1, [r7, #0]
	nnom_layer_io_t *curr_in_io;
	nnom_layer_hook_t *last_io_hook;

	if (last == NULL || curr == NULL)
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d002      	beq.n	8007f64 <model_hook+0x16>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d101      	bne.n	8007f68 <model_hook+0x1a>
		return NULL;
 8007f64:	2300      	movs	r3, #0
 8007f66:	e013      	b.n	8007f90 <model_hook+0x42>

	// add a new hook to the output io of the last layer
	last_io_hook = allocate_hook(last->out);
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f7ff ff97 	bl	8007ea0 <allocate_hook>
 8007f72:	60f8      	str	r0, [r7, #12]
	// add a new input io to the current layer's input list.
	curr_in_io = allocate_io(curr->in);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6a1b      	ldr	r3, [r3, #32]
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f7ff ffbb 	bl	8007ef4 <allocate_io>
 8007f7e:	60b8      	str	r0, [r7, #8]

	// manually hook them togeter.
	last_io_hook->io = curr_in_io;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	68ba      	ldr	r2, [r7, #8]
 8007f84:	601a      	str	r2, [r3, #0]
	curr_in_io->hook.io = last->out;
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	601a      	str	r2, [r3, #0]

	return curr;
 8007f8e:	687b      	ldr	r3, [r7, #4]
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3710      	adds	r7, #16
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <model_mergex>:

// merge a few layers using specified method
// num = the number of layer that will be merged
// method = functional layer such as (concat(), mult(), add(), sub())
static nnom_layer_t *model_mergex(nnom_layer_t *method, int num, ...)
{
 8007f98:	b40e      	push	{r1, r2, r3}
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b087      	sub	sp, #28
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
	nnom_layer_t *layer_in;
	va_list valist;

	if (method == NULL)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d101      	bne.n	8007fac <model_mergex+0x14>
		return NULL;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	e016      	b.n	8007fda <model_mergex+0x42>

	va_start(valist, num);
 8007fac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007fb0:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < num; i++)
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	617b      	str	r3, [r7, #20]
 8007fb6:	e00b      	b.n	8007fd0 <model_mergex+0x38>
	{
		// get the input layer
		layer_in = va_arg(valist, nnom_layer_t *);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	1d1a      	adds	r2, r3, #4
 8007fbc:	60fa      	str	r2, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	613b      	str	r3, [r7, #16]
		model_hook(method, layer_in);
 8007fc2:	6939      	ldr	r1, [r7, #16]
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f7ff ffc2 	bl	8007f4e <model_hook>
	for (int i = 0; i < num; i++)
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	617b      	str	r3, [r7, #20]
 8007fd0:	697a      	ldr	r2, [r7, #20]
 8007fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	dbef      	blt.n	8007fb8 <model_mergex+0x20>
	}
	va_end(valist);
	return method;
 8007fd8:	687b      	ldr	r3, [r7, #4]
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	371c      	adds	r7, #28
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007fe4:	b003      	add	sp, #12
 8007fe6:	4770      	bx	lr

08007fe8 <model_merge>:

// merge 2 input
// this is an older interface
// method = functional layer such as (concat(), mult(), add(), sub())
static nnom_layer_t *model_merge(nnom_layer_t *method, nnom_layer_t *in1, nnom_layer_t *in2)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	607a      	str	r2, [r7, #4]
	return model_mergex(method, 2, in1, in2);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	68ba      	ldr	r2, [r7, #8]
 8007ff8:	2102      	movs	r1, #2
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f7ff ffcc 	bl	8007f98 <model_mergex>
 8008000:	4603      	mov	r3, r0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3710      	adds	r7, #16
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}

0800800a <model_active>:

// This api will merge activation to layer's actail to avoid the extra layer for activation
static nnom_layer_t *model_active(nnom_activation_t *act, nnom_layer_t *target)
{
 800800a:	b480      	push	{r7}
 800800c:	b083      	sub	sp, #12
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
 8008012:	6039      	str	r1, [r7, #0]
	// simple and easy
	target->actail = act;
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	615a      	str	r2, [r3, #20]
	return target;
 800801a:	683b      	ldr	r3, [r7, #0]
}
 800801c:	4618      	mov	r0, r3
 800801e:	370c      	adds	r7, #12
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <new_model>:

// when model=NULL, it create a new sequential model
nnom_model_t *new_model(nnom_model_t *model)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b084      	sub	sp, #16
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
	nnom_model_t *m = model;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	60fb      	str	r3, [r7, #12]
	if (m == NULL)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d108      	bne.n	800804c <new_model+0x24>
	{
		m = nnom_mem(sizeof(nnom_model_t));
 800803a:	2088      	movs	r0, #136	; 0x88
 800803c:	f7ff fe56 	bl	8007cec <nnom_mem>
 8008040:	60f8      	str	r0, [r7, #12]
		m->is_allocated = true;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2201      	movs	r2, #1
 8008046:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 800804a:	e008      	b.n	800805e <new_model+0x36>
	}
	else
	{
		memset(m, 0, sizeof(nnom_model_t));
 800804c:	2288      	movs	r2, #136	; 0x88
 800804e:	2100      	movs	r1, #0
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f002 fab7 	bl	800a5c4 <memset>
		m->is_allocated = false;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2200      	movs	r2, #0
 800805a:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
	}

	// set methods
	m->add = model_add;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	4a09      	ldr	r2, [pc, #36]	; (8008088 <new_model+0x60>)
 8008062:	609a      	str	r2, [r3, #8]
	m->hook = model_hook;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	4a09      	ldr	r2, [pc, #36]	; (800808c <new_model+0x64>)
 8008068:	60da      	str	r2, [r3, #12]
	m->merge = model_merge;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	4a08      	ldr	r2, [pc, #32]	; (8008090 <new_model+0x68>)
 800806e:	611a      	str	r2, [r3, #16]
	m->mergex = model_mergex;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	4a08      	ldr	r2, [pc, #32]	; (8008094 <new_model+0x6c>)
 8008074:	615a      	str	r2, [r3, #20]
	m->active = model_active;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	4a07      	ldr	r2, [pc, #28]	; (8008098 <new_model+0x70>)
 800807a:	619a      	str	r2, [r3, #24]

	return m;
 800807c:	68fb      	ldr	r3, [r7, #12]
}
 800807e:	4618      	mov	r0, r3
 8008080:	3710      	adds	r7, #16
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	08007e3d 	.word	0x08007e3d
 800808c:	08007f4f 	.word	0x08007f4f
 8008090:	08007fe9 	.word	0x08007fe9
 8008094:	08007f99 	.word	0x08007f99
 8008098:	0800800b 	.word	0x0800800b

0800809c <allocate_block>:
	return;
}

// find an available memory block.
static nnom_mem_block_t *allocate_block(nnom_mem_block_t *list)
{
 800809c:	b480      	push	{r7}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
	nnom_mem_block_t *free = NULL;
 80080a4:	2300      	movs	r3, #0
 80080a6:	60bb      	str	r3, [r7, #8]
	uint32_t idx;

	for (idx = 0; idx < NNOM_BLOCK_NUM; idx++)
 80080a8:	2300      	movs	r3, #0
 80080aa:	60fb      	str	r3, [r7, #12]
 80080ac:	e00d      	b.n	80080ca <allocate_block+0x2e>
	{
		if (list[idx].owners == 0)
 80080ae:	68fa      	ldr	r2, [r7, #12]
 80080b0:	4613      	mov	r3, r2
 80080b2:	005b      	lsls	r3, r3, #1
 80080b4:	4413      	add	r3, r2
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	461a      	mov	r2, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4413      	add	r3, r2
 80080be:	7a1b      	ldrb	r3, [r3, #8]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d006      	beq.n	80080d2 <allocate_block+0x36>
	for (idx = 0; idx < NNOM_BLOCK_NUM; idx++)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	3301      	adds	r3, #1
 80080c8:	60fb      	str	r3, [r7, #12]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2b07      	cmp	r3, #7
 80080ce:	d9ee      	bls.n	80080ae <allocate_block+0x12>
 80080d0:	e000      	b.n	80080d4 <allocate_block+0x38>
			break;
 80080d2:	bf00      	nop
	}
	free = &list[idx];
 80080d4:	68fa      	ldr	r2, [r7, #12]
 80080d6:	4613      	mov	r3, r2
 80080d8:	005b      	lsls	r3, r3, #1
 80080da:	4413      	add	r3, r2
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	461a      	mov	r2, r3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4413      	add	r3, r2
 80080e4:	60bb      	str	r3, [r7, #8]
	return free;
 80080e6:	68bb      	ldr	r3, [r7, #8]
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3714      	adds	r7, #20
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <release_block>:

static void release_block(nnom_mem_block_t *block)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
	if (block->owners > 0)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	7a1b      	ldrb	r3, [r3, #8]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d005      	beq.n	8008110 <release_block+0x1c>
		block->owners -= 1;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	7a1b      	ldrb	r3, [r3, #8]
 8008108:	3b01      	subs	r3, #1
 800810a:	b2da      	uxtb	r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	721a      	strb	r2, [r3, #8]
	if (block->owners == 0)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	7a1b      	ldrb	r3, [r3, #8]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d102      	bne.n	800811e <release_block+0x2a>
		block->state = NNOM_BUF_EMPTY;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	725a      	strb	r2, [r3, #9]
}
 800811e:	bf00      	nop
 8008120:	370c      	adds	r7, #12
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr

0800812a <release_input_mem>:

static void release_input_mem(nnom_layer_t *layer)
{
 800812a:	b580      	push	{r7, lr}
 800812c:	b084      	sub	sp, #16
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
	nnom_layer_io_t *in;
	// release all input of buf
	in = layer->in;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6a1b      	ldr	r3, [r3, #32]
 8008136:	60fb      	str	r3, [r7, #12]
	while (in != NULL)
 8008138:	e007      	b.n	800814a <release_input_mem+0x20>
	{
		release_block(in->mem);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	691b      	ldr	r3, [r3, #16]
 800813e:	4618      	mov	r0, r3
 8008140:	f7ff ffd8 	bl	80080f4 <release_block>
		in = in->aux;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	60fb      	str	r3, [r7, #12]
	while (in != NULL)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d1f4      	bne.n	800813a <release_input_mem+0x10>
	}
}
 8008150:	bf00      	nop
 8008152:	3710      	adds	r7, #16
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <release_comp_mem>:
static void release_comp_mem(nnom_layer_t *layer)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
	// release computational buf if exist
	if (layer->comp != NULL)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	691b      	ldr	r3, [r3, #16]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d005      	beq.n	8008174 <release_comp_mem+0x1c>
	{
		release_block(layer->comp->mem);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	691b      	ldr	r3, [r3, #16]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4618      	mov	r0, r3
 8008170:	f7ff ffc0 	bl	80080f4 <release_block>
	}
}
 8008174:	bf00      	nop
 8008176:	3708      	adds	r7, #8
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <nnom_hook_length>:
}


// return the length of the hook lists
size_t nnom_hook_length(nnom_layer_hook_t *hook)
{
 800817c:	b480      	push	{r7}
 800817e:	b085      	sub	sp, #20
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
	size_t num = 0;
 8008184:	2300      	movs	r3, #0
 8008186:	60fb      	str	r3, [r7, #12]
	if (hook == NULL)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d107      	bne.n	800819e <nnom_hook_length+0x22>
		return 0;
 800818e:	2300      	movs	r3, #0
 8008190:	e009      	b.n	80081a6 <nnom_hook_length+0x2a>
	while (hook != NULL)
	{
		num++;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	3301      	adds	r3, #1
 8008196:	60fb      	str	r3, [r7, #12]
		hook = hook->next;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	607b      	str	r3, [r7, #4]
	while (hook != NULL)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d1f6      	bne.n	8008192 <nnom_hook_length+0x16>
	}
	return num;
 80081a4:	68fb      	ldr	r3, [r7, #12]
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3714      	adds	r7, #20
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr

080081b2 <layer_shortcut_find_last>:

// The shortcut version of find_last() method. 
// must be used after compiling. 
static nnom_layer_t *layer_shortcut_find_last(nnom_layer_t *start)
{
 80081b2:	b480      	push	{r7}
 80081b4:	b085      	sub	sp, #20
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
	nnom_layer_t *layer = start;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	60fb      	str	r3, [r7, #12]
	if (start == NULL)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d104      	bne.n	80081ce <layer_shortcut_find_last+0x1c>
		return NULL;
 80081c4:	2300      	movs	r3, #0
 80081c6:	e007      	b.n	80081d8 <layer_shortcut_find_last+0x26>
	while (layer->shortcut != NULL)
		layer = layer->shortcut;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	60fb      	str	r3, [r7, #12]
	while (layer->shortcut != NULL)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d1f8      	bne.n	80081c8 <layer_shortcut_find_last+0x16>
	return layer;
 80081d6:	68fb      	ldr	r3, [r7, #12]
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3714      	adds	r7, #20
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <layer_shortcut_add>:

// call while compiling.
// the shorcut is for fast running and fast iliterating.
// simply link every layer as a list. ordered by its runing order
static nnom_status_t layer_shortcut_add(nnom_layer_t *start, nnom_layer_t *curr)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b085      	sub	sp, #20
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
	nnom_layer_t *layer = start;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	60fb      	str	r3, [r7, #12]
	// first one, return
	if (start == curr)
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d10b      	bne.n	8008212 <layer_shortcut_add+0x2e>
	{
		return NN_SUCCESS;
 80081fa:	2300      	movs	r3, #0
 80081fc:	e011      	b.n	8008222 <layer_shortcut_add+0x3e>
	}
	// find the end of the list, and add curr layer to the end of it.
	while (layer->shortcut != NULL)
	{
		// if the layer is already in shortcut list, tell upper.
		if (curr == layer)
 80081fe:	683a      	ldr	r2, [r7, #0]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	429a      	cmp	r2, r3
 8008204:	d102      	bne.n	800820c <layer_shortcut_add+0x28>
			return NN_ARGUMENT_ERROR;
 8008206:	f04f 33ff 	mov.w	r3, #4294967295
 800820a:	e00a      	b.n	8008222 <layer_shortcut_add+0x3e>

		layer = layer->shortcut;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	60fb      	str	r3, [r7, #12]
	while (layer->shortcut != NULL)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d1f1      	bne.n	80081fe <layer_shortcut_add+0x1a>
	}
	layer->shortcut = curr;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	683a      	ldr	r2, [r7, #0]
 800821e:	601a      	str	r2, [r3, #0]

	return NN_SUCCESS;
 8008220:	2300      	movs	r3, #0
}
 8008222:	4618      	mov	r0, r3
 8008224:	3714      	adds	r7, #20
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr
	...

08008230 <print_layer_info>:

// input the layer number,
static void print_layer_info(nnom_layer_t *layer, uint32_t layer_count)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b088      	sub	sp, #32
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
	size_t in_size = io_mem_size(layer->in);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6a1b      	ldr	r3, [r3, #32]
 800823e:	4618      	mov	r0, r3
 8008240:	f7ff fd78 	bl	8007d34 <io_mem_size>
 8008244:	6178      	str	r0, [r7, #20]
	size_t out_size = io_mem_size(layer->out);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824a:	4618      	mov	r0, r3
 800824c:	f7ff fd72 	bl	8007d34 <io_mem_size>
 8008250:	6138      	str	r0, [r7, #16]
	size_t compsize;
	size_t mac = layer->stat.macc;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008256:	60fb      	str	r3, [r7, #12]
	if (layer->comp != NULL)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	691b      	ldr	r3, [r3, #16]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d004      	beq.n	800826a <print_layer_info+0x3a>
		compsize = layer->comp->size;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	691b      	ldr	r3, [r3, #16]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	61fb      	str	r3, [r7, #28]
 8008268:	e001      	b.n	800826e <print_layer_info+0x3e>
	else
		compsize = 0;
 800826a:	2300      	movs	r3, #0
 800826c:	61fb      	str	r3, [r7, #28]
	// names
	NNOM_LOG("#%-3d %-10s - ", layer_count, default_layer_names[layer->type]);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	7f1b      	ldrb	r3, [r3, #28]
 8008272:	461a      	mov	r2, r3
 8008274:	4613      	mov	r3, r2
 8008276:	005b      	lsls	r3, r3, #1
 8008278:	4413      	add	r3, r2
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	4a4e      	ldr	r2, [pc, #312]	; (80083b8 <print_layer_info+0x188>)
 800827e:	4413      	add	r3, r2
 8008280:	461a      	mov	r2, r3
 8008282:	6839      	ldr	r1, [r7, #0]
 8008284:	484d      	ldr	r0, [pc, #308]	; (80083bc <print_layer_info+0x18c>)
 8008286:	f003 f88b 	bl	800b3a0 <iprintf>
	// activations
	if (layer->actail != NULL)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	695b      	ldr	r3, [r3, #20]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00a      	beq.n	80082a8 <print_layer_info+0x78>
		NNOM_LOG("%-8s - ", default_activation_names[layer->actail->type]);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	695b      	ldr	r3, [r3, #20]
 8008296:	7a1b      	ldrb	r3, [r3, #8]
 8008298:	00db      	lsls	r3, r3, #3
 800829a:	4a49      	ldr	r2, [pc, #292]	; (80083c0 <print_layer_info+0x190>)
 800829c:	4413      	add	r3, r2
 800829e:	4619      	mov	r1, r3
 80082a0:	4848      	ldr	r0, [pc, #288]	; (80083c4 <print_layer_info+0x194>)
 80082a2:	f003 f87d 	bl	800b3a0 <iprintf>
 80082a6:	e002      	b.n	80082ae <print_layer_info+0x7e>
	else
		NNOM_LOG("         - ");
 80082a8:	4847      	ldr	r0, [pc, #284]	; (80083c8 <print_layer_info+0x198>)
 80082aa:	f003 f879 	bl	800b3a0 <iprintf>

	NNOM_LOG("(");
 80082ae:	2028      	movs	r0, #40	; 0x28
 80082b0:	f003 f88e 	bl	800b3d0 <putchar>
	for (int i = 0; i < 3; i++)
 80082b4:	2300      	movs	r3, #0
 80082b6:	61bb      	str	r3, [r7, #24]
 80082b8:	e01a      	b.n	80082f0 <print_layer_info+0xc0>
	{
		if (layer->out->tensor->num_dim > i)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	7c5b      	ldrb	r3, [r3, #17]
 80082c2:	461a      	mov	r2, r3
 80082c4:	69bb      	ldr	r3, [r7, #24]
 80082c6:	4293      	cmp	r3, r2
 80082c8:	da0c      	bge.n	80082e4 <print_layer_info+0xb4>
			NNOM_LOG("%4d,", layer->out->tensor->dim[i]);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	685a      	ldr	r2, [r3, #4]
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	005b      	lsls	r3, r3, #1
 80082d6:	4413      	add	r3, r2
 80082d8:	881b      	ldrh	r3, [r3, #0]
 80082da:	4619      	mov	r1, r3
 80082dc:	483b      	ldr	r0, [pc, #236]	; (80083cc <print_layer_info+0x19c>)
 80082de:	f003 f85f 	bl	800b3a0 <iprintf>
 80082e2:	e002      	b.n	80082ea <print_layer_info+0xba>
		else 
			NNOM_LOG("     ");
 80082e4:	483a      	ldr	r0, [pc, #232]	; (80083d0 <print_layer_info+0x1a0>)
 80082e6:	f003 f85b 	bl	800b3a0 <iprintf>
	for (int i = 0; i < 3; i++)
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	3301      	adds	r3, #1
 80082ee:	61bb      	str	r3, [r7, #24]
 80082f0:	69bb      	ldr	r3, [r7, #24]
 80082f2:	2b02      	cmp	r3, #2
 80082f4:	dde1      	ble.n	80082ba <print_layer_info+0x8a>
	}
	NNOM_LOG(")  ");
 80082f6:	4837      	ldr	r0, [pc, #220]	; (80083d4 <print_layer_info+0x1a4>)
 80082f8:	f003 f852 	bl	800b3a0 <iprintf>
	
	// MAC operation
	if(mac == 0)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d103      	bne.n	800830a <print_layer_info+0xda>
		NNOM_LOG("        ");
 8008302:	4835      	ldr	r0, [pc, #212]	; (80083d8 <print_layer_info+0x1a8>)
 8008304:	f003 f84c 	bl	800b3a0 <iprintf>
 8008308:	e04c      	b.n	80083a4 <print_layer_info+0x174>
	else if (mac < 10000)
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f242 720f 	movw	r2, #9999	; 0x270f
 8008310:	4293      	cmp	r3, r2
 8008312:	d804      	bhi.n	800831e <print_layer_info+0xee>
		NNOM_LOG("%7d ", mac);
 8008314:	68f9      	ldr	r1, [r7, #12]
 8008316:	4831      	ldr	r0, [pc, #196]	; (80083dc <print_layer_info+0x1ac>)
 8008318:	f003 f842 	bl	800b3a0 <iprintf>
 800831c:	e042      	b.n	80083a4 <print_layer_info+0x174>
	else if (mac < 1000*1000)
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	4a2f      	ldr	r2, [pc, #188]	; (80083e0 <print_layer_info+0x1b0>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d809      	bhi.n	800833a <print_layer_info+0x10a>
		NNOM_LOG("%6dk ", mac/1000);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	4a2e      	ldr	r2, [pc, #184]	; (80083e4 <print_layer_info+0x1b4>)
 800832a:	fba2 2303 	umull	r2, r3, r2, r3
 800832e:	099b      	lsrs	r3, r3, #6
 8008330:	4619      	mov	r1, r3
 8008332:	482d      	ldr	r0, [pc, #180]	; (80083e8 <print_layer_info+0x1b8>)
 8008334:	f003 f834 	bl	800b3a0 <iprintf>
 8008338:	e034      	b.n	80083a4 <print_layer_info+0x174>
	else if (mac < 1000*1000*1000)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	4a2b      	ldr	r2, [pc, #172]	; (80083ec <print_layer_info+0x1bc>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d817      	bhi.n	8008372 <print_layer_info+0x142>
		NNOM_LOG("%3d.%02dM ", mac/(1000*1000), mac%(1000*1000)/(10*1000)); // xxx.xx M
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	4a2a      	ldr	r2, [pc, #168]	; (80083f0 <print_layer_info+0x1c0>)
 8008346:	fba2 2303 	umull	r2, r3, r2, r3
 800834a:	0c98      	lsrs	r0, r3, #18
 800834c:	68fa      	ldr	r2, [r7, #12]
 800834e:	4b28      	ldr	r3, [pc, #160]	; (80083f0 <print_layer_info+0x1c0>)
 8008350:	fba3 1302 	umull	r1, r3, r3, r2
 8008354:	0c9b      	lsrs	r3, r3, #18
 8008356:	4927      	ldr	r1, [pc, #156]	; (80083f4 <print_layer_info+0x1c4>)
 8008358:	fb01 f303 	mul.w	r3, r1, r3
 800835c:	1ad3      	subs	r3, r2, r3
 800835e:	4a26      	ldr	r2, [pc, #152]	; (80083f8 <print_layer_info+0x1c8>)
 8008360:	fba2 2303 	umull	r2, r3, r2, r3
 8008364:	0b5b      	lsrs	r3, r3, #13
 8008366:	461a      	mov	r2, r3
 8008368:	4601      	mov	r1, r0
 800836a:	4824      	ldr	r0, [pc, #144]	; (80083fc <print_layer_info+0x1cc>)
 800836c:	f003 f818 	bl	800b3a0 <iprintf>
 8008370:	e018      	b.n	80083a4 <print_layer_info+0x174>
	else
		NNOM_LOG("%3d.%02dG ", mac/(1000*1000*1000), mac%(1000*1000*1000)/(10*1000*1000)); // xxx.xx G
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	0a5b      	lsrs	r3, r3, #9
 8008376:	4a22      	ldr	r2, [pc, #136]	; (8008400 <print_layer_info+0x1d0>)
 8008378:	fba2 2303 	umull	r2, r3, r2, r3
 800837c:	09d8      	lsrs	r0, r3, #7
 800837e:	68fa      	ldr	r2, [r7, #12]
 8008380:	0a53      	lsrs	r3, r2, #9
 8008382:	491f      	ldr	r1, [pc, #124]	; (8008400 <print_layer_info+0x1d0>)
 8008384:	fba1 1303 	umull	r1, r3, r1, r3
 8008388:	09db      	lsrs	r3, r3, #7
 800838a:	491e      	ldr	r1, [pc, #120]	; (8008404 <print_layer_info+0x1d4>)
 800838c:	fb01 f303 	mul.w	r3, r1, r3
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	4a1d      	ldr	r2, [pc, #116]	; (8008408 <print_layer_info+0x1d8>)
 8008394:	fba2 2303 	umull	r2, r3, r2, r3
 8008398:	0d9b      	lsrs	r3, r3, #22
 800839a:	461a      	mov	r2, r3
 800839c:	4601      	mov	r1, r0
 800839e:	481b      	ldr	r0, [pc, #108]	; (800840c <print_layer_info+0x1dc>)
 80083a0:	f002 fffe 	bl	800b3a0 <iprintf>
	
	// memory 
	NNOM_LOG("(%6d,%6d,%6d)", in_size, out_size, compsize);
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	693a      	ldr	r2, [r7, #16]
 80083a8:	6979      	ldr	r1, [r7, #20]
 80083aa:	4819      	ldr	r0, [pc, #100]	; (8008410 <print_layer_info+0x1e0>)
 80083ac:	f002 fff8 	bl	800b3a0 <iprintf>
}
 80083b0:	bf00      	nop
 80083b2:	3720      	adds	r7, #32
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	0801ec38 	.word	0x0801ec38
 80083bc:	0800eb08 	.word	0x0800eb08
 80083c0:	0801edac 	.word	0x0801edac
 80083c4:	0800eb18 	.word	0x0800eb18
 80083c8:	0800eb20 	.word	0x0800eb20
 80083cc:	0800eb2c 	.word	0x0800eb2c
 80083d0:	0800eb34 	.word	0x0800eb34
 80083d4:	0800eb3c 	.word	0x0800eb3c
 80083d8:	0800eb40 	.word	0x0800eb40
 80083dc:	0800eb4c 	.word	0x0800eb4c
 80083e0:	000f423f 	.word	0x000f423f
 80083e4:	10624dd3 	.word	0x10624dd3
 80083e8:	0800eb54 	.word	0x0800eb54
 80083ec:	3b9ac9ff 	.word	0x3b9ac9ff
 80083f0:	431bde83 	.word	0x431bde83
 80083f4:	000f4240 	.word	0x000f4240
 80083f8:	d1b71759 	.word	0xd1b71759
 80083fc:	0800eb5c 	.word	0x0800eb5c
 8008400:	00044b83 	.word	0x00044b83
 8008404:	3b9aca00 	.word	0x3b9aca00
 8008408:	6b5fca6b 	.word	0x6b5fca6b
 800840c:	0800eb68 	.word	0x0800eb68
 8008410:	0800eb74 	.word	0x0800eb74

08008414 <print_memory_block_info>:

static void print_memory_block_info(nnom_mem_block_t *block_pool)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
	// show the memory blocks's lifetime (number of owners)
	NNOM_LOG("   ");
 800841c:	481b      	ldr	r0, [pc, #108]	; (800848c <print_memory_block_info+0x78>)
 800841e:	f002 ffbf 	bl	800b3a0 <iprintf>
	for (int i = 0; i < NNOM_BLOCK_NUM; i++)
 8008422:	2300      	movs	r3, #0
 8008424:	60fb      	str	r3, [r7, #12]
 8008426:	e026      	b.n	8008476 <print_memory_block_info+0x62>
	{
		if (i % 4 == 0)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f003 0303 	and.w	r3, r3, #3
 800842e:	2b00      	cmp	r3, #0
 8008430:	d102      	bne.n	8008438 <print_memory_block_info+0x24>
			NNOM_LOG(" ");
 8008432:	2020      	movs	r0, #32
 8008434:	f002 ffcc 	bl	800b3d0 <putchar>
		if (block_pool[i].owners)
 8008438:	68fa      	ldr	r2, [r7, #12]
 800843a:	4613      	mov	r3, r2
 800843c:	005b      	lsls	r3, r3, #1
 800843e:	4413      	add	r3, r2
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	461a      	mov	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	4413      	add	r3, r2
 8008448:	7a1b      	ldrb	r3, [r3, #8]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00d      	beq.n	800846a <print_memory_block_info+0x56>
			NNOM_LOG("%d ", block_pool[i].owners);
 800844e:	68fa      	ldr	r2, [r7, #12]
 8008450:	4613      	mov	r3, r2
 8008452:	005b      	lsls	r3, r3, #1
 8008454:	4413      	add	r3, r2
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	461a      	mov	r2, r3
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	4413      	add	r3, r2
 800845e:	7a1b      	ldrb	r3, [r3, #8]
 8008460:	4619      	mov	r1, r3
 8008462:	480b      	ldr	r0, [pc, #44]	; (8008490 <print_memory_block_info+0x7c>)
 8008464:	f002 ff9c 	bl	800b3a0 <iprintf>
 8008468:	e002      	b.n	8008470 <print_memory_block_info+0x5c>
		else
			NNOM_LOG("- ");
 800846a:	480a      	ldr	r0, [pc, #40]	; (8008494 <print_memory_block_info+0x80>)
 800846c:	f002 ff98 	bl	800b3a0 <iprintf>
	for (int i = 0; i < NNOM_BLOCK_NUM; i++)
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	3301      	adds	r3, #1
 8008474:	60fb      	str	r3, [r7, #12]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2b07      	cmp	r3, #7
 800847a:	ddd5      	ble.n	8008428 <print_memory_block_info+0x14>
	}
	NNOM_LOG("\n");
 800847c:	200a      	movs	r0, #10
 800847e:	f002 ffa7 	bl	800b3d0 <putchar>
}
 8008482:	bf00      	nop
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	0800eb84 	.word	0x0800eb84
 8008490:	0800eb88 	.word	0x0800eb88
 8008494:	0800eb8c 	.word	0x0800eb8c

08008498 <compile_layers>:
// This function will return when
// 	1) if the layer has multiple input but not all of them are filled by last layers. returns NN_MORE_TODO
//	2) if all the output hooked are nested called. return NN_SUCCESS
//	3) if the layer is output layer. return NN_SUCCESS
nnom_status_t compile_layers(nnom_layer_t *start, nnom_mem_block_t *block_pool, uint32_t *layer_count)
{
 8008498:	b590      	push	{r4, r7, lr}
 800849a:	b08f      	sub	sp, #60	; 0x3c
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	607a      	str	r2, [r7, #4]
	size_t mem_size = 0;
 80084a4:	2300      	movs	r3, #0
 80084a6:	627b      	str	r3, [r7, #36]	; 0x24
	nnom_layer_t *layer = start;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	637b      	str	r3, [r7, #52]	; 0x34
	nnom_layer_hook_t *hook;

	nnom_mem_block_t *in_blk;
	nnom_mem_block_t *out_blk;
	
	uint32_t local_layer_count = 1;
 80084ac:	2301      	movs	r3, #1
 80084ae:	617b      	str	r3, [r7, #20]
	
	if(layer_count == NULL)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d102      	bne.n	80084bc <compile_layers+0x24>
		layer_count = &local_layer_count;
 80084b6:	f107 0314 	add.w	r3, r7, #20
 80084ba:	607b      	str	r3, [r7, #4]

	in = layer->in;
 80084bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084be:	6a1b      	ldr	r3, [r3, #32]
 80084c0:	633b      	str	r3, [r7, #48]	; 0x30
	out = layer->out;
 80084c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c6:	62fb      	str	r3, [r7, #44]	; 0x2c

	while (layer)
 80084c8:	e19f      	b.n	800880a <compile_layers+0x372>
	{
		// check input
		in = layer->in;
 80084ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084cc:	6a1b      	ldr	r3, [r3, #32]
 80084ce:	633b      	str	r3, [r7, #48]	; 0x30

		// check if this layer is the input layer
		// the first layer has no input hooked, and the io is not initialized
		if (in->hook.io == NULL)
 80084d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d130      	bne.n	800853a <compile_layers+0xa2>
		{
			// if the input is not initalized
			if (in->mem == NULL)
 80084d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084da:	691b      	ldr	r3, [r3, #16]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d12f      	bne.n	8008540 <compile_layers+0xa8>
			{
				in_blk = allocate_block(block_pool);
 80084e0:	68b8      	ldr	r0, [r7, #8]
 80084e2:	f7ff fddb 	bl	800809c <allocate_block>
 80084e6:	6238      	str	r0, [r7, #32]
				in_blk->owners += 1; // add 1
 80084e8:	6a3b      	ldr	r3, [r7, #32]
 80084ea:	7a1b      	ldrb	r3, [r3, #8]
 80084ec:	3301      	adds	r3, #1
 80084ee:	b2da      	uxtb	r2, r3
 80084f0:	6a3b      	ldr	r3, [r7, #32]
 80084f2:	721a      	strb	r2, [r3, #8]
				mem_size = nnom_alignto(tensor_size(in->tensor), 4);
 80084f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	4618      	mov	r0, r3
 80084fa:	f000 fc53 	bl	8008da4 <tensor_size>
 80084fe:	4603      	mov	r3, r0
 8008500:	2104      	movs	r1, #4
 8008502:	4618      	mov	r0, r3
 8008504:	f7ff fc34 	bl	8007d70 <nnom_alignto>
 8008508:	6278      	str	r0, [r7, #36]	; 0x24
				in_blk->size = mem_size > in_blk->size ? mem_size : in_blk->size;
 800850a:	6a3b      	ldr	r3, [r7, #32]
 800850c:	685a      	ldr	r2, [r3, #4]
 800850e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008510:	429a      	cmp	r2, r3
 8008512:	bf38      	it	cc
 8008514:	461a      	movcc	r2, r3
 8008516:	6a3b      	ldr	r3, [r7, #32]
 8008518:	605a      	str	r2, [r3, #4]
				// set the blk to the layer IO
				in->mem = in_blk;
 800851a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851c:	6a3a      	ldr	r2, [r7, #32]
 800851e:	611a      	str	r2, [r3, #16]
				in->mem->state = NNOM_BUF_FILLED; //mark input buff filled
 8008520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	2201      	movs	r2, #1
 8008526:	725a      	strb	r2, [r3, #9]
 8008528:	e00a      	b.n	8008540 <compile_layers+0xa8>
		else
		{
			// get the mem for every input from its hooked output. 
			while (in != NULL)
			{
				in->mem = in->hook.io->mem;
 800852a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	691a      	ldr	r2, [r3, #16]
 8008530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008532:	611a      	str	r2, [r3, #16]
				in = in->aux;
 8008534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	633b      	str	r3, [r7, #48]	; 0x30
			while (in != NULL)
 800853a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853c:	2b00      	cmp	r3, #0
 800853e:	d1f4      	bne.n	800852a <compile_layers+0x92>
			}
		}

		// if there are mutiple inputs, wait utill all blocks filled
		in = layer->in;
 8008540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008542:	6a1b      	ldr	r3, [r3, #32]
 8008544:	633b      	str	r3, [r7, #48]	; 0x30
		if (in != NULL && in->aux != NULL)
 8008546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008548:	2b00      	cmp	r3, #0
 800854a:	d016      	beq.n	800857a <compile_layers+0xe2>
 800854c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d012      	beq.n	800857a <compile_layers+0xe2>
		{
			while (in != NULL)
 8008554:	e00e      	b.n	8008574 <compile_layers+0xdc>
			{
				// if the mem (of its hooked output) is not allocated or is not filled. 
				// It not the time to run the layer yet, return and waits for next nested called. 
				if (in->mem == NULL || in->mem->state != NNOM_BUF_FILLED)
 8008556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008558:	691b      	ldr	r3, [r3, #16]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d004      	beq.n	8008568 <compile_layers+0xd0>
 800855e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008560:	691b      	ldr	r3, [r3, #16]
 8008562:	7a5b      	ldrb	r3, [r3, #9]
 8008564:	2b01      	cmp	r3, #1
 8008566:	d002      	beq.n	800856e <compile_layers+0xd6>
					return NN_MORE_TODO;
 8008568:	f06f 0307 	mvn.w	r3, #7
 800856c:	e152      	b.n	8008814 <compile_layers+0x37c>
				in = in->aux;
 800856e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	633b      	str	r3, [r7, #48]	; 0x30
			while (in != NULL)
 8008574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008576:	2b00      	cmp	r3, #0
 8008578:	d1ed      	bne.n	8008556 <compile_layers+0xbe>
		// 4. allocate output buffer for each output module. 
		// 5.1 if there is only one layer hooked to the output. we dont use nested call, but continue in this big while loop. 
		// 5.2 nested call the hooked output layers (if there are > 1 hooked to the output of this layer)

		// 1. calculate output shape while all inputs are filled
		layer->build(layer);
 800857a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800857c:	689b      	ldr	r3, [r3, #8]
 800857e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008580:	4798      	blx	r3

		// 2. add to shortcut list. 
		layer_shortcut_add(start, layer);
 8008582:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008584:	68f8      	ldr	r0, [r7, #12]
 8008586:	f7ff fe2d 	bl	80081e4 <layer_shortcut_add>

		// 3. assign for computational buf
		if (layer->comp != NULL)
 800858a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800858c:	691b      	ldr	r3, [r3, #16]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d029      	beq.n	80085e6 <compile_layers+0x14e>
		//if (shape_size(&layer->comp->shape) > 0)
		{
			layer->comp->mem = allocate_block(block_pool);
 8008592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008594:	691c      	ldr	r4, [r3, #16]
 8008596:	68b8      	ldr	r0, [r7, #8]
 8008598:	f7ff fd80 	bl	800809c <allocate_block>
 800859c:	4603      	mov	r3, r0
 800859e:	6023      	str	r3, [r4, #0]
			layer->comp->mem->owners += 1; // add us to buffer users
 80085a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085a2:	691b      	ldr	r3, [r3, #16]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	7a1a      	ldrb	r2, [r3, #8]
 80085a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085aa:	691b      	ldr	r3, [r3, #16]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	3201      	adds	r2, #1
 80085b0:	b2d2      	uxtb	r2, r2
 80085b2:	721a      	strb	r2, [r3, #8]
			layer->comp->mem->state = NNOM_BUF_FILLED;
 80085b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085b6:	691b      	ldr	r3, [r3, #16]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	2201      	movs	r2, #1
 80085bc:	725a      	strb	r2, [r3, #9]
			// record maximum mem size in this block
			mem_size = nnom_alignto(layer->comp->size, 4);
 80085be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085c0:	691b      	ldr	r3, [r3, #16]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	2104      	movs	r1, #4
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7ff fbd2 	bl	8007d70 <nnom_alignto>
 80085cc:	6278      	str	r0, [r7, #36]	; 0x24
			layer->comp->mem->size =
				mem_size > layer->comp->mem->size ? mem_size : layer->comp->mem->size;
 80085ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085d0:	691b      	ldr	r3, [r3, #16]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	6859      	ldr	r1, [r3, #4]
			layer->comp->mem->size =
 80085d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085d8:	691b      	ldr	r3, [r3, #16]
 80085da:	681b      	ldr	r3, [r3, #0]
				mem_size > layer->comp->mem->size ? mem_size : layer->comp->mem->size;
 80085dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085de:	428a      	cmp	r2, r1
 80085e0:	bf38      	it	cc
 80085e2:	460a      	movcc	r2, r1
			layer->comp->mem->size =
 80085e4:	605a      	str	r2, [r3, #4]
		}

		// print current layer's info. 
		// show names, activations, mem block size
		print_layer_info(layer, (*layer_count)++);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	1c59      	adds	r1, r3, #1
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	6011      	str	r1, [r2, #0]
 80085f0:	4619      	mov	r1, r3
 80085f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80085f4:	f7ff fe1c 	bl	8008230 <print_layer_info>

		// 4. allocate output buffer for each output module. 
		// check output
		if (layer->out == NULL)
 80085f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d101      	bne.n	8008604 <compile_layers+0x16c>
			return NN_SUCCESS;
 8008600:	2300      	movs	r3, #0
 8008602:	e107      	b.n	8008814 <compile_layers+0x37c>

		// 5.1 if there is only one layer hooked to the output. we dont use nested call, but continue in this big while loop. 
		// if the layer is Single Output, continue the loop directly. To reduce nested level
		if (layer->out->aux == NULL && layer->out->hook.next == NULL)
 8008604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d14d      	bne.n	80086aa <compile_layers+0x212>
 800860e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d148      	bne.n	80086aa <compile_layers+0x212>
		{
			// single buf layer.
			if (layer->in->type == NNOM_TENSOR_BUF_NULL || layer->out->type == NNOM_TENSOR_BUF_NULL)
 8008618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800861a:	6a1b      	ldr	r3, [r3, #32]
 800861c:	7e1b      	ldrb	r3, [r3, #24]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d004      	beq.n	800862c <compile_layers+0x194>
 8008622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008626:	7e1b      	ldrb	r3, [r3, #24]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d10c      	bne.n	8008646 <compile_layers+0x1ae>
			{
				// pass to next layer directly, like we never touch the buffer(dont change life-time)
				layer->out->mem = layer->in->mem;
 800862c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800862e:	6a1a      	ldr	r2, [r3, #32]
 8008630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008634:	6912      	ldr	r2, [r2, #16]
 8008636:	611a      	str	r2, [r3, #16]
				
				// print memory before release
				print_memory_block_info(block_pool);
 8008638:	68b8      	ldr	r0, [r7, #8]
 800863a:	f7ff feeb 	bl	8008414 <print_memory_block_info>
				// computational buf
				release_comp_mem(layer);
 800863e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008640:	f7ff fd8a 	bl	8008158 <release_comp_mem>
			if (layer->in->type == NNOM_TENSOR_BUF_NULL || layer->out->type == NNOM_TENSOR_BUF_NULL)
 8008644:	e0d5      	b.n	80087f2 <compile_layers+0x35a>
			}
			// not a single buf layer
			else
			{
				// allocate mem block for the output
				out_blk = allocate_block(block_pool);
 8008646:	68b8      	ldr	r0, [r7, #8]
 8008648:	f7ff fd28 	bl	800809c <allocate_block>
 800864c:	61f8      	str	r0, [r7, #28]
				if (out_blk == NULL)
 800864e:	69fb      	ldr	r3, [r7, #28]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d102      	bne.n	800865a <compile_layers+0x1c2>
					return NN_NO_MEMORY;
 8008654:	f06f 0306 	mvn.w	r3, #6
 8008658:	e0dc      	b.n	8008814 <compile_layers+0x37c>
				// set the life time, only one hooked layer, so the life time is 1
				out_blk->owners = 1;
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	2201      	movs	r2, #1
 800865e:	721a      	strb	r2, [r3, #8]
				out_blk->state = NNOM_BUF_FILLED; // marked filled
 8008660:	69fb      	ldr	r3, [r7, #28]
 8008662:	2201      	movs	r2, #1
 8008664:	725a      	strb	r2, [r3, #9]
				// record maximum mem size in this block
				mem_size = nnom_alignto(tensor_size(layer->out->tensor), 4);
 8008666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	4618      	mov	r0, r3
 800866e:	f000 fb99 	bl	8008da4 <tensor_size>
 8008672:	4603      	mov	r3, r0
 8008674:	2104      	movs	r1, #4
 8008676:	4618      	mov	r0, r3
 8008678:	f7ff fb7a 	bl	8007d70 <nnom_alignto>
 800867c:	6278      	str	r0, [r7, #36]	; 0x24
				out_blk->size = mem_size > out_blk->size ? mem_size : out_blk->size;
 800867e:	69fb      	ldr	r3, [r7, #28]
 8008680:	685a      	ldr	r2, [r3, #4]
 8008682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008684:	429a      	cmp	r2, r3
 8008686:	bf38      	it	cc
 8008688:	461a      	movcc	r2, r3
 800868a:	69fb      	ldr	r3, [r7, #28]
 800868c:	605a      	str	r2, [r3, #4]
				// set the blk to the layer IO
				layer->out->mem = out_blk;
 800868e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008692:	69fa      	ldr	r2, [r7, #28]
 8008694:	611a      	str	r2, [r3, #16]

				// once we allocate for output, we can now release input and comput.
				// print memory before release
				print_memory_block_info(block_pool);
 8008696:	68b8      	ldr	r0, [r7, #8]
 8008698:	f7ff febc 	bl	8008414 <print_memory_block_info>
				// release input mem and comp mem
				release_input_mem(layer);
 800869c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800869e:	f7ff fd44 	bl	800812a <release_input_mem>
				release_comp_mem(layer);
 80086a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80086a4:	f7ff fd58 	bl	8008158 <release_comp_mem>
			if (layer->in->type == NNOM_TENSOR_BUF_NULL || layer->out->type == NNOM_TENSOR_BUF_NULL)
 80086a8:	e0a3      	b.n	80087f2 <compile_layers+0x35a>
		}
		// Multiple output and/or mutiple hooks
		else
		{
			// single buf layer will use the input buf for the first output
			if (layer->in->type == NNOM_TENSOR_BUF_NULL || layer->out->type == NNOM_TENSOR_BUF_NULL)
 80086aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ac:	6a1b      	ldr	r3, [r3, #32]
 80086ae:	7e1b      	ldrb	r3, [r3, #24]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d004      	beq.n	80086be <compile_layers+0x226>
 80086b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b8:	7e1b      	ldrb	r3, [r3, #24]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d125      	bne.n	800870a <compile_layers+0x272>
			{
				// we dont allocate new buf, but use the input
				// the ownership will be set to next layer later
				layer->out->mem = layer->in->mem;
 80086be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086c0:	6a1a      	ldr	r2, [r3, #32]
 80086c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c6:	6912      	ldr	r2, [r2, #16]
 80086c8:	611a      	str	r2, [r3, #16]
				layer->out->mem->owners += nnom_hook_length(&layer->out->hook); // set the mem lifetime.// test
 80086ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7ff fd54 	bl	800817c <nnom_hook_length>
 80086d4:	4602      	mov	r2, r0
 80086d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086da:	691b      	ldr	r3, [r3, #16]
 80086dc:	7a19      	ldrb	r1, [r3, #8]
 80086de:	b2d2      	uxtb	r2, r2
 80086e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e4:	691b      	ldr	r3, [r3, #16]
 80086e6:	440a      	add	r2, r1
 80086e8:	b2d2      	uxtb	r2, r2
 80086ea:	721a      	strb	r2, [r3, #8]
				layer->out->mem->state = NNOM_BUF_FILLED;
 80086ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	2201      	movs	r2, #1
 80086f4:	725a      	strb	r2, [r3, #9]
				
				// print memory before release
				print_memory_block_info(block_pool);
 80086f6:	68b8      	ldr	r0, [r7, #8]
 80086f8:	f7ff fe8c 	bl	8008414 <print_memory_block_info>
				// release computational buff and input buffer 
				release_input_mem(layer);
 80086fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80086fe:	f7ff fd14 	bl	800812a <release_input_mem>
				release_comp_mem(layer);
 8008702:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008704:	f7ff fd28 	bl	8008158 <release_comp_mem>
 8008708:	e045      	b.n	8008796 <compile_layers+0x2fe>
			}
			// mutiple buf layer. (I/O use different memory blocks)
			else
			{
				// allocate for every output
				out = layer->out;
 800870a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800870c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870e:	62fb      	str	r3, [r7, #44]	; 0x2c
				while (out != NULL && out->hook.io != NULL) // the output layer have no output IO
 8008710:	e031      	b.n	8008776 <compile_layers+0x2de>
				{
					// assign new block
					out->mem = allocate_block(block_pool);
 8008712:	68b8      	ldr	r0, [r7, #8]
 8008714:	f7ff fcc2 	bl	800809c <allocate_block>
 8008718:	4602      	mov	r2, r0
 800871a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800871c:	611a      	str	r2, [r3, #16]
					if (out->mem == NULL)
 800871e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008720:	691b      	ldr	r3, [r3, #16]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d102      	bne.n	800872c <compile_layers+0x294>
						return NN_NO_MEMORY;
 8008726:	f06f 0306 	mvn.w	r3, #6
 800872a:	e073      	b.n	8008814 <compile_layers+0x37c>
					// record maximum mem size in this block
					mem_size = nnom_alignto(tensor_size(out->tensor), 4);
 800872c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	4618      	mov	r0, r3
 8008732:	f000 fb37 	bl	8008da4 <tensor_size>
 8008736:	4603      	mov	r3, r0
 8008738:	2104      	movs	r1, #4
 800873a:	4618      	mov	r0, r3
 800873c:	f7ff fb18 	bl	8007d70 <nnom_alignto>
 8008740:	6278      	str	r0, [r7, #36]	; 0x24
					out->mem->size = mem_size > out->mem->size ? mem_size : out->mem->size;
 8008742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008744:	691b      	ldr	r3, [r3, #16]
 8008746:	6859      	ldr	r1, [r3, #4]
 8008748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800874a:	691b      	ldr	r3, [r3, #16]
 800874c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800874e:	428a      	cmp	r2, r1
 8008750:	bf38      	it	cc
 8008752:	460a      	movcc	r2, r1
 8008754:	605a      	str	r2, [r3, #4]
					// keep the block untill the last hooked layer is called.
					out->mem->owners = nnom_hook_length(&out->hook); // set lifetime of the buffer = the num of hooked layers
 8008756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008758:	4618      	mov	r0, r3
 800875a:	f7ff fd0f 	bl	800817c <nnom_hook_length>
 800875e:	4602      	mov	r2, r0
 8008760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008762:	691b      	ldr	r3, [r3, #16]
 8008764:	b2d2      	uxtb	r2, r2
 8008766:	721a      	strb	r2, [r3, #8]
					out->mem->state = NNOM_BUF_FILLED;
 8008768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800876a:	691b      	ldr	r3, [r3, #16]
 800876c:	2201      	movs	r2, #1
 800876e:	725a      	strb	r2, [r3, #9]

					out = out->aux;
 8008770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	62fb      	str	r3, [r7, #44]	; 0x2c
				while (out != NULL && out->hook.io != NULL) // the output layer have no output IO
 8008776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008778:	2b00      	cmp	r3, #0
 800877a:	d003      	beq.n	8008784 <compile_layers+0x2ec>
 800877c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d1c6      	bne.n	8008712 <compile_layers+0x27a>
				}
				// once we allocate for output, we can now release input and comput (or reduce the lifetime).
				// print memory before release
				print_memory_block_info(block_pool);
 8008784:	68b8      	ldr	r0, [r7, #8]
 8008786:	f7ff fe45 	bl	8008414 <print_memory_block_info>
				// release input mem and comp mem
				release_input_mem(layer);
 800878a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800878c:	f7ff fccd 	bl	800812a <release_input_mem>
				release_comp_mem(layer);
 8008790:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008792:	f7ff fce1 	bl	8008158 <release_comp_mem>
			}

			// 5.12 nested call the hooked output layers (if there are > 1 hooked to the output of this layer)
			// while all the out module(s) receive a memory block, it is ready to be sent to other layers.
			// iterate all hooked layers in each out module.
			out = layer->out;
 8008796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879a:	62fb      	str	r3, [r7, #44]	; 0x2c
			while (out != NULL)
 800879c:	e024      	b.n	80087e8 <compile_layers+0x350>
			{
				// nested call hooked layer one by one.
				hook = &out->hook;
 800879e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a0:	62bb      	str	r3, [r7, #40]	; 0x28
				while (hook != NULL && hook->io != NULL)
 80087a2:	e017      	b.n	80087d4 <compile_layers+0x33c>
				{
					nnom_status_t result;
					// test, add shorcut before nested call
					// put the "hooked layer" to the END of the shortcut list, which STARTed at current "layer"
					// if the layer is already in the list, then it is already compiled by other layer's nested call, returns NN_ARGUMENT_ERROR
					result = layer_shortcut_add(layer, hook->io->owner);
 80087a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	695b      	ldr	r3, [r3, #20]
 80087aa:	4619      	mov	r1, r3
 80087ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80087ae:	f7ff fd19 	bl	80081e4 <layer_shortcut_add>
 80087b2:	4603      	mov	r3, r0
 80087b4:	76fb      	strb	r3, [r7, #27]
					if (result == NN_SUCCESS)
 80087b6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d107      	bne.n	80087ce <compile_layers+0x336>
						// nested call only when the layer hasnt been compiled
						compile_layers(hook->io->owner, block_pool, layer_count);
 80087be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	695b      	ldr	r3, [r3, #20]
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	68b9      	ldr	r1, [r7, #8]
 80087c8:	4618      	mov	r0, r3
 80087ca:	f7ff fe65 	bl	8008498 <compile_layers>
					// next hook
					hook = hook->next;
 80087ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	62bb      	str	r3, [r7, #40]	; 0x28
				while (hook != NULL && hook->io != NULL)
 80087d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d003      	beq.n	80087e2 <compile_layers+0x34a>
 80087da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d1e0      	bne.n	80087a4 <compile_layers+0x30c>
				}

				// next io
				out = out->aux;
 80087e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	62fb      	str	r3, [r7, #44]	; 0x2c
			while (out != NULL)
 80087e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d1d7      	bne.n	800879e <compile_layers+0x306>
			}

			// when all the out is called. this should stop here.
			// once enter mutiple output iterating, the function will always return.
			// because at least one of the nested called by this function will run till the end of the model.
			return NN_SUCCESS;
 80087ee:	2300      	movs	r3, #0
 80087f0:	e010      	b.n	8008814 <compile_layers+0x37c>
		}
		// Multiple output ended.

		// return if this is output layer.
		// the output layer's output io is hooked to nothing.
		if (layer->out->hook.io == NULL)
 80087f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d101      	bne.n	8008800 <compile_layers+0x368>
			return NN_SUCCESS;
 80087fc:	2300      	movs	r3, #0
 80087fe:	e009      	b.n	8008814 <compile_layers+0x37c>

		// single output layer, this function continue to analyse next layer.
		// switch to next layer.
		layer = layer->out->hook.io->owner;
 8008800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	695b      	ldr	r3, [r3, #20]
 8008808:	637b      	str	r3, [r7, #52]	; 0x34
	while (layer)
 800880a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800880c:	2b00      	cmp	r3, #0
 800880e:	f47f ae5c 	bne.w	80084ca <compile_layers+0x32>
	}

	// seems to be redundants
	return NN_SUCCESS;
 8008812:	2300      	movs	r3, #0
}
 8008814:	4618      	mov	r0, r3
 8008816:	373c      	adds	r7, #60	; 0x3c
 8008818:	46bd      	mov	sp, r7
 800881a:	bd90      	pop	{r4, r7, pc}

0800881c <mem_analysis_result>:

size_t mem_analysis_result(nnom_model_t *m)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b084      	sub	sp, #16
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
	uint32_t index;
	uint32_t total_mem = 0;
 8008824:	2300      	movs	r3, #0
 8008826:	60bb      	str	r3, [r7, #8]
	NNOM_LOG("Memory cost by each block:\n ");
 8008828:	4817      	ldr	r0, [pc, #92]	; (8008888 <mem_analysis_result+0x6c>)
 800882a:	f002 fdb9 	bl	800b3a0 <iprintf>
	// print size of memory blocks
	for (index = 0; index < NNOM_BLOCK_NUM; index++)
 800882e:	2300      	movs	r3, #0
 8008830:	60fb      	str	r3, [r7, #12]
 8008832:	e01c      	b.n	800886e <mem_analysis_result+0x52>
	{
		total_mem += m->blocks[index].size;
 8008834:	6879      	ldr	r1, [r7, #4]
 8008836:	68fa      	ldr	r2, [r7, #12]
 8008838:	4613      	mov	r3, r2
 800883a:	005b      	lsls	r3, r3, #1
 800883c:	4413      	add	r3, r2
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	440b      	add	r3, r1
 8008842:	3324      	adds	r3, #36	; 0x24
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	68ba      	ldr	r2, [r7, #8]
 8008848:	4413      	add	r3, r2
 800884a:	60bb      	str	r3, [r7, #8]
		NNOM_LOG("blk_%d:%d  ", index, m->blocks[index].size);
 800884c:	6879      	ldr	r1, [r7, #4]
 800884e:	68fa      	ldr	r2, [r7, #12]
 8008850:	4613      	mov	r3, r2
 8008852:	005b      	lsls	r3, r3, #1
 8008854:	4413      	add	r3, r2
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	440b      	add	r3, r1
 800885a:	3324      	adds	r3, #36	; 0x24
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	461a      	mov	r2, r3
 8008860:	68f9      	ldr	r1, [r7, #12]
 8008862:	480a      	ldr	r0, [pc, #40]	; (800888c <mem_analysis_result+0x70>)
 8008864:	f002 fd9c 	bl	800b3a0 <iprintf>
	for (index = 0; index < NNOM_BLOCK_NUM; index++)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	3301      	adds	r3, #1
 800886c:	60fb      	str	r3, [r7, #12]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2b07      	cmp	r3, #7
 8008872:	d9df      	bls.n	8008834 <mem_analysis_result+0x18>
	}
	// size of total memory cost by networks buffer
	NNOM_LOG("\n Total memory cost by network buffers: %d bytes\n", total_mem);
 8008874:	68b9      	ldr	r1, [r7, #8]
 8008876:	4806      	ldr	r0, [pc, #24]	; (8008890 <mem_analysis_result+0x74>)
 8008878:	f002 fd92 	bl	800b3a0 <iprintf>

	return total_mem;
 800887c:	68bb      	ldr	r3, [r7, #8]
}
 800887e:	4618      	mov	r0, r3
 8008880:	3710      	adds	r7, #16
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	0800eb90 	.word	0x0800eb90
 800888c:	0800ebb0 	.word	0x0800ebb0
 8008890:	0800ebbc 	.word	0x0800ebbc

08008894 <block_mem_set>:

// allocate memory, and set them to each block according to the mem analysis results.
nnom_status_t block_mem_set(nnom_model_t *m, void *buf)
{
 8008894:	b480      	push	{r7}
 8008896:	b085      	sub	sp, #20
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	6039      	str	r1, [r7, #0]
	uint32_t index;
	uint32_t mem_offset = 0;
 800889e:	2300      	movs	r3, #0
 80088a0:	60bb      	str	r3, [r7, #8]

	for (index = 0; index < NNOM_BLOCK_NUM; index++)
 80088a2:	2300      	movs	r3, #0
 80088a4:	60fb      	str	r3, [r7, #12]
 80088a6:	e025      	b.n	80088f4 <block_mem_set+0x60>
	{
		if (m->blocks[index].size == 0)
 80088a8:	6879      	ldr	r1, [r7, #4]
 80088aa:	68fa      	ldr	r2, [r7, #12]
 80088ac:	4613      	mov	r3, r2
 80088ae:	005b      	lsls	r3, r3, #1
 80088b0:	4413      	add	r3, r2
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	440b      	add	r3, r1
 80088b6:	3324      	adds	r3, #36	; 0x24
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d01e      	beq.n	80088fc <block_mem_set+0x68>
			break;
		m->blocks[index].blk = (void *)((uint8_t*)buf + mem_offset);
 80088be:	683a      	ldr	r2, [r7, #0]
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	18d1      	adds	r1, r2, r3
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	68fa      	ldr	r2, [r7, #12]
 80088c8:	4613      	mov	r3, r2
 80088ca:	005b      	lsls	r3, r3, #1
 80088cc:	4413      	add	r3, r2
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	4403      	add	r3, r0
 80088d2:	3320      	adds	r3, #32
 80088d4:	6019      	str	r1, [r3, #0]
		mem_offset += m->blocks[index].size;
 80088d6:	6879      	ldr	r1, [r7, #4]
 80088d8:	68fa      	ldr	r2, [r7, #12]
 80088da:	4613      	mov	r3, r2
 80088dc:	005b      	lsls	r3, r3, #1
 80088de:	4413      	add	r3, r2
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	440b      	add	r3, r1
 80088e4:	3324      	adds	r3, #36	; 0x24
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	68ba      	ldr	r2, [r7, #8]
 80088ea:	4413      	add	r3, r2
 80088ec:	60bb      	str	r3, [r7, #8]
	for (index = 0; index < NNOM_BLOCK_NUM; index++)
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	3301      	adds	r3, #1
 80088f2:	60fb      	str	r3, [r7, #12]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2b07      	cmp	r3, #7
 80088f8:	d9d6      	bls.n	80088a8 <block_mem_set+0x14>
 80088fa:	e000      	b.n	80088fe <block_mem_set+0x6a>
			break;
 80088fc:	bf00      	nop
	}
	return NN_SUCCESS;
 80088fe:	2300      	movs	r3, #0
}
 8008900:	4618      	mov	r0, r3
 8008902:	3714      	adds	r7, #20
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <tensor_mem_set>:

// experimental: this function is temporary use to 
// assign memory blk which has assigned to input and output to the corresponding tensor
nnom_status_t tensor_mem_set(nnom_model_t *m)
{
 800890c:	b480      	push	{r7}
 800890e:	b085      	sub	sp, #20
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
	nnom_layer_t *layer = m->head;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	60fb      	str	r3, [r7, #12]
	nnom_layer_io_t *io;
	while (layer)
 800891a:	e022      	b.n	8008962 <tensor_mem_set+0x56>
	{
		io = layer->in;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	6a1b      	ldr	r3, [r3, #32]
 8008920:	60bb      	str	r3, [r7, #8]
		while (io)
 8008922:	e008      	b.n	8008936 <tensor_mem_set+0x2a>
		{
			io->tensor->p_data = io->mem->blk;
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	691a      	ldr	r2, [r3, #16]
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	68db      	ldr	r3, [r3, #12]
 800892c:	6812      	ldr	r2, [r2, #0]
 800892e:	601a      	str	r2, [r3, #0]
			io = io->aux;
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	60bb      	str	r3, [r7, #8]
		while (io)
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d1f3      	bne.n	8008924 <tensor_mem_set+0x18>
		}

		io = layer->out;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008940:	60bb      	str	r3, [r7, #8]
		while (io)
 8008942:	e008      	b.n	8008956 <tensor_mem_set+0x4a>
		{
			io->tensor->p_data = io->mem->blk;
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	691a      	ldr	r2, [r3, #16]
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	68db      	ldr	r3, [r3, #12]
 800894c:	6812      	ldr	r2, [r2, #0]
 800894e:	601a      	str	r2, [r3, #0]
			io = io->aux;
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	60bb      	str	r3, [r7, #8]
		while (io)
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d1f3      	bne.n	8008944 <tensor_mem_set+0x38>
		}

		layer = layer->shortcut;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	60fb      	str	r3, [r7, #12]
	while (layer)
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d1d9      	bne.n	800891c <tensor_mem_set+0x10>
	}
	
	return NN_SUCCESS;
 8008968:	2300      	movs	r3, #0
}
 800896a:	4618      	mov	r0, r3
 800896c:	3714      	adds	r7, #20
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr
	...

08008978 <set_tailed_activation>:

// this function has to be used after memory is assigned to the layers.
// it means it has to be call after compile_model() as well.
// it simply get the output buffer and set the buffer to tailed activation of each layer..
nnom_status_t set_tailed_activation(nnom_model_t *m)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
	NNOM_NULL_CHECK(m);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d105      	bne.n	8008992 <set_tailed_activation+0x1a>
 8008986:	4817      	ldr	r0, [pc, #92]	; (80089e4 <set_tailed_activation+0x6c>)
 8008988:	f002 fd92 	bl	800b4b0 <puts>
 800898c:	f04f 33ff 	mov.w	r3, #4294967295
 8008990:	e024      	b.n	80089dc <set_tailed_activation+0x64>
	NNOM_NULL_CHECK(m->head);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d105      	bne.n	80089a6 <set_tailed_activation+0x2e>
 800899a:	4812      	ldr	r0, [pc, #72]	; (80089e4 <set_tailed_activation+0x6c>)
 800899c:	f002 fd88 	bl	800b4b0 <puts>
 80089a0:	f04f 33ff 	mov.w	r3, #4294967295
 80089a4:	e01a      	b.n	80089dc <set_tailed_activation+0x64>
	nnom_layer_t *layer = m->head;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	60fb      	str	r3, [r7, #12]

	// if tailed activation is exist, set it to the output.
	while (layer)
 80089ac:	e010      	b.n	80089d0 <set_tailed_activation+0x58>
	{
		if (layer->actail != NULL)
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	695b      	ldr	r3, [r3, #20]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d005      	beq.n	80089c2 <set_tailed_activation+0x4a>
		{
			layer->actail->tensor = layer->out->tensor;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	695b      	ldr	r3, [r3, #20]
 80089be:	68d2      	ldr	r2, [r2, #12]
 80089c0:	605a      	str	r2, [r3, #4]
			// layer->actail->size = tensor_size(layer->out->tensor);
			// // if actail has its own shifting, then leave it as it is. otherwise set it to the same as output
			// if(layer->actail->qfmt.m == 0 && layer->actail->qfmt.n == 0)
			// 	layer->actail->qfmt = layer->out->tensor->qfmt;
		}
		if (layer->shortcut == NULL)
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d006      	beq.n	80089d8 <set_tailed_activation+0x60>
			break;
		layer = layer->shortcut;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	60fb      	str	r3, [r7, #12]
	while (layer)
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d1eb      	bne.n	80089ae <set_tailed_activation+0x36>
 80089d6:	e000      	b.n	80089da <set_tailed_activation+0x62>
			break;
 80089d8:	bf00      	nop
	}

	return NN_SUCCESS;
 80089da:	2300      	movs	r3, #0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3710      	adds	r7, #16
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	0800ebf0 	.word	0x0800ebf0

080089e8 <model_set_ops>:

// get total ops
static uint64_t model_set_ops(nnom_model_t *m)
{
 80089e8:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 80089ec:	b087      	sub	sp, #28
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
	nnom_layer_t *layer;
	uint64_t total_ops = 0;
 80089f2:	f04f 0300 	mov.w	r3, #0
 80089f6:	f04f 0400 	mov.w	r4, #0
 80089fa:	e9c7 3402 	strd	r3, r4, [r7, #8]
	layer = m->head;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	617b      	str	r3, [r7, #20]
	while (layer)
 8008a04:	e013      	b.n	8008a2e <model_set_ops+0x46>
	{
		total_ops += layer->stat.macc;
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a0a:	469b      	mov	fp, r3
 8008a0c:	f04f 0c00 	mov.w	ip, #0
 8008a10:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008a14:	eb1b 0301 	adds.w	r3, fp, r1
 8008a18:	eb4c 0402 	adc.w	r4, ip, r2
 8008a1c:	e9c7 3402 	strd	r3, r4, [r7, #8]
		if (layer->shortcut == NULL)
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d006      	beq.n	8008a36 <model_set_ops+0x4e>
			break;
		layer = layer->shortcut;
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	617b      	str	r3, [r7, #20]
	while (layer)
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d1e8      	bne.n	8008a06 <model_set_ops+0x1e>
 8008a34:	e000      	b.n	8008a38 <model_set_ops+0x50>
			break;
 8008a36:	bf00      	nop
	}
	m->total_ops = total_ops;
 8008a38:	68ba      	ldr	r2, [r7, #8]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	return total_ops;
 8008a40:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	4621      	mov	r1, r4
 8008a48:	371c      	adds	r7, #28
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8008a50:	4770      	bx	lr
	...

08008a54 <model_compile>:

// a compiler can be use for both sequencial / functional model.
// the output layer is optional only when the model is single output model
// in this case, if output = NULL, the compile can find it by its own. 
nnom_status_t model_compile(nnom_model_t *m, nnom_layer_t *input, nnom_layer_t *output)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b088      	sub	sp, #32
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	607a      	str	r2, [r7, #4]
	size_t buf_size;
	uint8_t *buf;
	uint32_t layer_num = 1;
 8008a60:	2301      	movs	r3, #1
 8008a62:	613b      	str	r3, [r7, #16]
	uint32_t time = nnom_ms_get();
 8008a64:	2300      	movs	r3, #0
 8008a66:	61fb      	str	r3, [r7, #28]
	
	NNOM_NULL_CHECK(m);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d105      	bne.n	8008a7a <model_compile+0x26>
 8008a6e:	483d      	ldr	r0, [pc, #244]	; (8008b64 <model_compile+0x110>)
 8008a70:	f002 fd1e 	bl	800b4b0 <puts>
 8008a74:	f04f 33ff 	mov.w	r3, #4294967295
 8008a78:	e070      	b.n	8008b5c <model_compile+0x108>
	NNOM_NULL_CHECK(input);
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d105      	bne.n	8008a8c <model_compile+0x38>
 8008a80:	4838      	ldr	r0, [pc, #224]	; (8008b64 <model_compile+0x110>)
 8008a82:	f002 fd15 	bl	800b4b0 <puts>
 8008a86:	f04f 33ff 	mov.w	r3, #4294967295
 8008a8a:	e067      	b.n	8008b5c <model_compile+0x108>

	m->head = input;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	68ba      	ldr	r2, [r7, #8]
 8008a90:	601a      	str	r2, [r3, #0]
	m->tail = output;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	605a      	str	r2, [r3, #4]
	if (output == NULL)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d105      	bne.n	8008aaa <model_compile+0x56>
		m->tail = find_last(input);
 8008a9e:	68b8      	ldr	r0, [r7, #8]
 8008aa0:	f7ff f98b 	bl	8007dba <find_last>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	605a      	str	r2, [r3, #4]

	NNOM_LOG("NNoM version %d.%d.%d\n", NNOM_MAJORVERSION, NNOM_SUBVERSION, NNOM_REVISION);
 8008aaa:	2300      	movs	r3, #0
 8008aac:	2204      	movs	r2, #4
 8008aae:	2100      	movs	r1, #0
 8008ab0:	482d      	ldr	r0, [pc, #180]	; (8008b68 <model_compile+0x114>)
 8008ab2:	f002 fc75 	bl	800b3a0 <iprintf>
	#ifdef NNOM_USING_CHW
	NNOM_LOG("Data format: Channel first (CHW)\n");
	#else
	NNOM_LOG("Data format: Channel last (HWC)\n");
 8008ab6:	482d      	ldr	r0, [pc, #180]	; (8008b6c <model_compile+0x118>)
 8008ab8:	f002 fcfa 	bl	800b4b0 <puts>
	#endif
	NNOM_LOG("Start compiling model...\n");
 8008abc:	482c      	ldr	r0, [pc, #176]	; (8008b70 <model_compile+0x11c>)
 8008abe:	f002 fcf7 	bl	800b4b0 <puts>
	NNOM_LOG("Layer(#)         Activation    output shape    ops(MAC)   mem(in, out, buf)      mem blk lifetime\n");
 8008ac2:	482c      	ldr	r0, [pc, #176]	; (8008b74 <model_compile+0x120>)
 8008ac4:	f002 fcf4 	bl	800b4b0 <puts>
	NNOM_LOG("-------------------------------------------------------------------------------------------------\n");
 8008ac8:	482b      	ldr	r0, [pc, #172]	; (8008b78 <model_compile+0x124>)
 8008aca:	f002 fcf1 	bl	800b4b0 <puts>

	// compile layers, started from list head, nested run till the end of models
	compile_layers(m->head, m->blocks, &layer_num);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	6818      	ldr	r0, [r3, #0]
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	3320      	adds	r3, #32
 8008ad6:	f107 0210 	add.w	r2, r7, #16
 8008ada:	4619      	mov	r1, r3
 8008adc:	f7ff fcdc 	bl	8008498 <compile_layers>

	NNOM_LOG("-------------------------------------------------------------------------------------------------\n");
 8008ae0:	4825      	ldr	r0, [pc, #148]	; (8008b78 <model_compile+0x124>)
 8008ae2:	f002 fce5 	bl	800b4b0 <puts>

	// if model's tail is not the last layer which built by user.
	if (output != layer_shortcut_find_last(input))
 8008ae6:	68b8      	ldr	r0, [r7, #8]
 8008ae8:	f7ff fb63 	bl	80081b2 <layer_shortcut_find_last>
 8008aec:	4602      	mov	r2, r0
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d013      	beq.n	8008b1c <model_compile+0xc8>
		NNOM_LOG("WARNING: model returned at #%d %s layer, but this layer is not the end of shortcut list \n",
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	6879      	ldr	r1, [r7, #4]
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7ff f977 	bl	8007dee <find_index>
 8008b00:	4601      	mov	r1, r0
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	7f1b      	ldrb	r3, [r3, #28]
 8008b06:	461a      	mov	r2, r3
 8008b08:	4613      	mov	r3, r2
 8008b0a:	005b      	lsls	r3, r3, #1
 8008b0c:	4413      	add	r3, r2
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	4a1a      	ldr	r2, [pc, #104]	; (8008b7c <model_compile+0x128>)
 8008b12:	4413      	add	r3, r2
 8008b14:	461a      	mov	r2, r3
 8008b16:	481a      	ldr	r0, [pc, #104]	; (8008b80 <model_compile+0x12c>)
 8008b18:	f002 fc42 	bl	800b3a0 <iprintf>
			find_index(m->head, output), default_layer_names[output->type]);

	// get the total (aligned) memory requirement
	buf_size = mem_analysis_result(m);
 8008b1c:	68f8      	ldr	r0, [r7, #12]
 8008b1e:	f7ff fe7d 	bl	800881c <mem_analysis_result>
 8008b22:	61b8      	str	r0, [r7, #24]

	// allocate one big memory block
	buf = nnom_mem(buf_size);
 8008b24:	69b8      	ldr	r0, [r7, #24]
 8008b26:	f7ff f8e1 	bl	8007cec <nnom_mem>
 8008b2a:	6178      	str	r0, [r7, #20]
	if (buf == NULL)
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d106      	bne.n	8008b40 <model_compile+0xec>
	{
		NNOM_LOG("ERROR: No enough memory for network buffer, required %d bytes\n", buf_size);
 8008b32:	69b9      	ldr	r1, [r7, #24]
 8008b34:	4813      	ldr	r0, [pc, #76]	; (8008b84 <model_compile+0x130>)
 8008b36:	f002 fc33 	bl	800b3a0 <iprintf>
		return NN_NO_MEMORY;
 8008b3a:	f06f 0306 	mvn.w	r3, #6
 8008b3e:	e00d      	b.n	8008b5c <model_compile+0x108>
	}

	// split the memory for every memory block
	block_mem_set(m, buf);
 8008b40:	6979      	ldr	r1, [r7, #20]
 8008b42:	68f8      	ldr	r0, [r7, #12]
 8008b44:	f7ff fea6 	bl	8008894 <block_mem_set>

	// experimental: set memory from io to the io tensor 
	tensor_mem_set(m);
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	f7ff fedf 	bl	800890c <tensor_mem_set>

	// finally set the output buff to tailed activation on each layer
	set_tailed_activation(m);
 8008b4e:	68f8      	ldr	r0, [r7, #12]
 8008b50:	f7ff ff12 	bl	8008978 <set_tailed_activation>

	// calculate the total operations and set it to the model
	model_set_ops(m);
 8008b54:	68f8      	ldr	r0, [r7, #12]
 8008b56:	f7ff ff47 	bl	80089e8 <model_set_ops>
	
	// print the time. 
	if(nnom_ms_get())
		NNOM_LOG("Compling done in %d ms\n", nnom_ms_get() - time);

	return NN_SUCCESS;
 8008b5a:	2300      	movs	r3, #0
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3720      	adds	r7, #32
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	0800ebf0 	.word	0x0800ebf0
 8008b68:	0800ec04 	.word	0x0800ec04
 8008b6c:	0800ec1c 	.word	0x0800ec1c
 8008b70:	0800ec3c 	.word	0x0800ec3c
 8008b74:	0800ec58 	.word	0x0800ec58
 8008b78:	0800ecbc 	.word	0x0800ecbc
 8008b7c:	0801ec38 	.word	0x0801ec38
 8008b80:	0800ed20 	.word	0x0800ed20
 8008b84:	0800ed7c 	.word	0x0800ed7c

08008b88 <layer_run>:
	return model_compile(m, input, output);
}

// run that layer
nnom_status_t layer_run(nnom_layer_t *layer)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
	nnom_status_t result;
	uint32_t start;
	NNOM_NULL_CHECK(layer);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d105      	bne.n	8008ba2 <layer_run+0x1a>
 8008b96:	4811      	ldr	r0, [pc, #68]	; (8008bdc <layer_run+0x54>)
 8008b98:	f002 fc8a 	bl	800b4b0 <puts>
 8008b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8008ba0:	e018      	b.n	8008bd4 <layer_run+0x4c>

	// start
	start = nnom_us_get();
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	60fb      	str	r3, [r7, #12]
	// run main layer first
	result = layer->run(layer);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	4798      	blx	r3
 8008bae:	4603      	mov	r3, r0
 8008bb0:	72fb      	strb	r3, [r7, #11]
	// run tailed-activation if it is presented
	if (layer->actail != NULL)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	695b      	ldr	r3, [r3, #20]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d006      	beq.n	8008bc8 <layer_run+0x40>
	{
		layer->actail->run(layer->actail);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	695b      	ldr	r3, [r3, #20]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	6952      	ldr	r2, [r2, #20]
 8008bc4:	4610      	mov	r0, r2
 8008bc6:	4798      	blx	r3
	}
	// done
	layer->stat.time = nnom_us_get() - start;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	425a      	negs	r2, r3
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	62da      	str	r2, [r3, #44]	; 0x2c
	return result;
 8008bd0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3710      	adds	r7, #16
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	0800ebf0 	.word	0x0800ebf0

08008be0 <model_run_to>:

// run the model, until the end_layer. If end_layer == NULL, run all layers.
nnom_status_t model_run_to(nnom_model_t *m, nnom_layer_t *end_layer)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b086      	sub	sp, #24
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
	uint32_t layer_num = 1;
 8008bea:	2301      	movs	r3, #1
 8008bec:	617b      	str	r3, [r7, #20]
	nnom_status_t result;
	nnom_layer_t *layer;
	NNOM_NULL_CHECK(m);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d105      	bne.n	8008c00 <model_run_to+0x20>
 8008bf4:	4832      	ldr	r0, [pc, #200]	; (8008cc0 <model_run_to+0xe0>)
 8008bf6:	f002 fc5b 	bl	800b4b0 <puts>
 8008bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8008bfe:	e05b      	b.n	8008cb8 <model_run_to+0xd8>
	NNOM_NULL_CHECK(m->head);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d105      	bne.n	8008c14 <model_run_to+0x34>
 8008c08:	482d      	ldr	r0, [pc, #180]	; (8008cc0 <model_run_to+0xe0>)
 8008c0a:	f002 fc51 	bl	800b4b0 <puts>
 8008c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8008c12:	e051      	b.n	8008cb8 <model_run_to+0xd8>

	layer = m->head;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	613b      	str	r3, [r7, #16]
	
	// using shortcut run
	while (layer)
 8008c1a:	e049      	b.n	8008cb0 <model_run_to+0xd0>
	{
		// run layer
		result = layer_run(layer);
 8008c1c:	6938      	ldr	r0, [r7, #16]
 8008c1e:	f7ff ffb3 	bl	8008b88 <layer_run>
 8008c22:	4603      	mov	r3, r0
 8008c24:	73fb      	strb	r3, [r7, #15]
		if (result != NN_SUCCESS)
 8008c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d011      	beq.n	8008c52 <model_run_to+0x72>
		{
			NNOM_LOG("Error: #%d %s layer return error code:%d\n", layer_num, default_layer_names[layer->type], result);
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	7f1b      	ldrb	r3, [r3, #28]
 8008c32:	461a      	mov	r2, r3
 8008c34:	4613      	mov	r3, r2
 8008c36:	005b      	lsls	r3, r3, #1
 8008c38:	4413      	add	r3, r2
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	4a21      	ldr	r2, [pc, #132]	; (8008cc4 <model_run_to+0xe4>)
 8008c3e:	441a      	add	r2, r3
 8008c40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c44:	6979      	ldr	r1, [r7, #20]
 8008c46:	4820      	ldr	r0, [pc, #128]	; (8008cc8 <model_run_to+0xe8>)
 8008c48:	f002 fbaa 	bl	800b3a0 <iprintf>
			return result;
 8008c4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c50:	e032      	b.n	8008cb8 <model_run_to+0xd8>
		}
		// run callback
		if(m->layer_callback != NULL)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	69db      	ldr	r3, [r3, #28]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d01c      	beq.n	8008c94 <model_run_to+0xb4>
		{
			result = m->layer_callback(m, layer);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	69db      	ldr	r3, [r3, #28]
 8008c5e:	6939      	ldr	r1, [r7, #16]
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	4798      	blx	r3
 8008c64:	4603      	mov	r3, r0
 8008c66:	73fb      	strb	r3, [r7, #15]
			if (result != NN_SUCCESS)
 8008c68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d011      	beq.n	8008c94 <model_run_to+0xb4>
			{
				NNOM_LOG("Error: Callback return error code %d at #%d %s layer\n", result, layer_num, default_layer_names[layer->type]);
 8008c70:	f997 100f 	ldrsb.w	r1, [r7, #15]
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	7f1b      	ldrb	r3, [r3, #28]
 8008c78:	461a      	mov	r2, r3
 8008c7a:	4613      	mov	r3, r2
 8008c7c:	005b      	lsls	r3, r3, #1
 8008c7e:	4413      	add	r3, r2
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	4a10      	ldr	r2, [pc, #64]	; (8008cc4 <model_run_to+0xe4>)
 8008c84:	4413      	add	r3, r2
 8008c86:	697a      	ldr	r2, [r7, #20]
 8008c88:	4810      	ldr	r0, [pc, #64]	; (8008ccc <model_run_to+0xec>)
 8008c8a:	f002 fb89 	bl	800b3a0 <iprintf>
				return result;
 8008c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c92:	e011      	b.n	8008cb8 <model_run_to+0xd8>
			}
		}		
		// check if finished
		if (layer == end_layer || layer->shortcut == NULL)
 8008c94:	693a      	ldr	r2, [r7, #16]
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	d00c      	beq.n	8008cb6 <model_run_to+0xd6>
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d008      	beq.n	8008cb6 <model_run_to+0xd6>
			break;
		layer = layer->shortcut;
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	613b      	str	r3, [r7, #16]
		layer_num++;
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	3301      	adds	r3, #1
 8008cae:	617b      	str	r3, [r7, #20]
	while (layer)
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d1b2      	bne.n	8008c1c <model_run_to+0x3c>
	}

	return NN_SUCCESS;
 8008cb6:	2300      	movs	r3, #0
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3718      	adds	r7, #24
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}
 8008cc0:	0800ebf0 	.word	0x0800ebf0
 8008cc4:	0801ec38 	.word	0x0801ec38
 8008cc8:	0800edbc 	.word	0x0800edbc
 8008ccc:	0800ede8 	.word	0x0800ede8

08008cd0 <model_run>:

// run all layers.
nnom_status_t model_run(nnom_model_t *m)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
	return model_run_to(m, NULL);
 8008cd8:	2100      	movs	r1, #0
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f7ff ff80 	bl	8008be0 <model_run_to>
 8008ce0:	4603      	mov	r3, r0
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3708      	adds	r7, #8
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}

08008cea <shape>:
		return 0;
	return s->h * s->w * s->c;
}

nnom_3d_shape_t shape(size_t h, size_t w, size_t c)
{
 8008cea:	b480      	push	{r7}
 8008cec:	b087      	sub	sp, #28
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	60f8      	str	r0, [r7, #12]
 8008cf2:	60b9      	str	r1, [r7, #8]
 8008cf4:	607a      	str	r2, [r7, #4]
 8008cf6:	603b      	str	r3, [r7, #0]
	nnom_3d_shape_t s;
	s.h = h;
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	823b      	strh	r3, [r7, #16]
	s.w = w;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	827b      	strh	r3, [r7, #18]
	s.c = c;
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	82bb      	strh	r3, [r7, #20]
	return s;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	461a      	mov	r2, r3
 8008d0e:	f107 0310 	add.w	r3, r7, #16
 8008d12:	6818      	ldr	r0, [r3, #0]
 8008d14:	6010      	str	r0, [r2, #0]
 8008d16:	889b      	ldrh	r3, [r3, #4]
 8008d18:	8093      	strh	r3, [r2, #4]
}
 8008d1a:	68f8      	ldr	r0, [r7, #12]
 8008d1c:	371c      	adds	r7, #28
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d24:	4770      	bx	lr

08008d26 <kernel>:
nnom_3d_shape_t kernel(size_t h, size_t w)
{
 8008d26:	b580      	push	{r7, lr}
 8008d28:	b084      	sub	sp, #16
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	60f8      	str	r0, [r7, #12]
 8008d2e:	60b9      	str	r1, [r7, #8]
 8008d30:	607a      	str	r2, [r7, #4]
	return shape(h, w, 1);
 8008d32:	68f8      	ldr	r0, [r7, #12]
 8008d34:	2301      	movs	r3, #1
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	68b9      	ldr	r1, [r7, #8]
 8008d3a:	f7ff ffd6 	bl	8008cea <shape>
}
 8008d3e:	68f8      	ldr	r0, [r7, #12]
 8008d40:	3710      	adds	r7, #16
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <stride>:
nnom_3d_shape_t stride(size_t h, size_t w)
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b084      	sub	sp, #16
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	60f8      	str	r0, [r7, #12]
 8008d4e:	60b9      	str	r1, [r7, #8]
 8008d50:	607a      	str	r2, [r7, #4]
	return shape(h, w, 1);
 8008d52:	68f8      	ldr	r0, [r7, #12]
 8008d54:	2301      	movs	r3, #1
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	68b9      	ldr	r1, [r7, #8]
 8008d5a:	f7ff ffc6 	bl	8008cea <shape>
}
 8008d5e:	68f8      	ldr	r0, [r7, #12]
 8008d60:	3710      	adds	r7, #16
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}

08008d66 <dilation>:
nnom_3d_shape_t dilation(size_t h, size_t w)
{
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b084      	sub	sp, #16
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	60f8      	str	r0, [r7, #12]
 8008d6e:	60b9      	str	r1, [r7, #8]
 8008d70:	607a      	str	r2, [r7, #4]
	return shape(h, w, 1);
 8008d72:	68f8      	ldr	r0, [r7, #12]
 8008d74:	2301      	movs	r3, #1
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	68b9      	ldr	r1, [r7, #8]
 8008d7a:	f7ff ffb6 	bl	8008cea <shape>
}
 8008d7e:	68f8      	ldr	r0, [r7, #12]
 8008d80:	3710      	adds	r7, #16
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <io_init>:
}

// this function has to be used while assign a io for a layer.
// because the io needs to know who is its owner.
nnom_layer_io_t *io_init(void *owner_layer, nnom_layer_io_t *io)
{
 8008d86:	b480      	push	{r7}
 8008d88:	b083      	sub	sp, #12
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
 8008d8e:	6039      	str	r1, [r7, #0]
	io->owner = (nnom_layer_t *)owner_layer;
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	615a      	str	r2, [r3, #20]
	return io;
 8008d96:	683b      	ldr	r3, [r7, #0]
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <tensor_size>:
#include "nnom.h"
#include "nnom_tensor.h"

 // tensor size
size_t tensor_size(nnom_tensor_t* t)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b085      	sub	sp, #20
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
	size_t size = 0;
 8008dac:	2300      	movs	r3, #0
 8008dae:	60fb      	str	r3, [r7, #12]
	if (t != NULL)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d01a      	beq.n	8008dec <tensor_size+0x48>
	{
		size = t->dim[0];
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	881b      	ldrh	r3, [r3, #0]
 8008dbc:	60fb      	str	r3, [r7, #12]
		for (int i = 1; i < t->num_dim; i++)
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	60bb      	str	r3, [r7, #8]
 8008dc2:	e00d      	b.n	8008de0 <tensor_size+0x3c>
			size *= t->dim[i];
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	685a      	ldr	r2, [r3, #4]
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	005b      	lsls	r3, r3, #1
 8008dcc:	4413      	add	r3, r2
 8008dce:	881b      	ldrh	r3, [r3, #0]
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	fb02 f303 	mul.w	r3, r2, r3
 8008dd8:	60fb      	str	r3, [r7, #12]
		for (int i = 1; i < t->num_dim; i++)
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	3301      	adds	r3, #1
 8008dde:	60bb      	str	r3, [r7, #8]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	7c5b      	ldrb	r3, [r3, #17]
 8008de4:	461a      	mov	r2, r3
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	4293      	cmp	r3, r2
 8008dea:	dbeb      	blt.n	8008dc4 <tensor_size+0x20>
	}
	return size;
 8008dec:	68fb      	ldr	r3, [r7, #12]
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3714      	adds	r7, #20
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr

08008dfa <tensor_get_num_channel>:


size_t tensor_get_num_channel(nnom_tensor_t* t)
{
 8008dfa:	b480      	push	{r7}
 8008dfc:	b083      	sub	sp, #12
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
	// channel first
	//return t->dim[0];
	return t->dim[t->num_dim -1];		// we are always using hwc to describe even our data is in CHW
#else
	// channel last
	return t->dim[t->num_dim -1];
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	685a      	ldr	r2, [r3, #4]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	7c5b      	ldrb	r3, [r3, #17]
 8008e0a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008e0e:	3b01      	subs	r3, #1
 8008e10:	005b      	lsls	r3, r3, #1
 8008e12:	4413      	add	r3, r2
 8008e14:	881b      	ldrh	r3, [r3, #0]
#endif
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	370c      	adds	r7, #12
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr
	...

08008e24 <new_tensor>:

// initialise/create new tensor
nnom_tensor_t* new_tensor(nnom_qtype_t type, uint32_t num_dim, uint32_t num_channel)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b086      	sub	sp, #24
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	607a      	str	r2, [r7, #4]
 8008e30:	73fb      	strb	r3, [r7, #15]
	nnom_tensor_t* t = NULL;
 8008e32:	2300      	movs	r3, #0
 8008e34:	613b      	str	r3, [r7, #16]
	uint32_t q_len;
	if(type == NNOM_QTYPE_PER_AXIS)
 8008e36:	7bfb      	ldrb	r3, [r7, #15]
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d102      	bne.n	8008e42 <new_tensor+0x1e>
	{
		q_len = num_channel;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	617b      	str	r3, [r7, #20]
 8008e40:	e00a      	b.n	8008e58 <new_tensor+0x34>
	}
	else if (type == NNOM_QTYPE_PER_TENSOR)
 8008e42:	7bfb      	ldrb	r3, [r7, #15]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d102      	bne.n	8008e4e <new_tensor+0x2a>
	{
		q_len = 1;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	617b      	str	r3, [r7, #20]
 8008e4c:	e004      	b.n	8008e58 <new_tensor+0x34>
	}
	else
	{
		NNOM_LOG("ERROR: tensor type not specified\n");
 8008e4e:	481c      	ldr	r0, [pc, #112]	; (8008ec0 <new_tensor+0x9c>)
 8008e50:	f002 fb2e 	bl	800b4b0 <puts>
		return NULL;
 8008e54:	2300      	movs	r3, #0
 8008e56:	e02e      	b.n	8008eb6 <new_tensor+0x92>
	}

	t = nnom_mem(nnom_alignto(sizeof(nnom_tensor_t), 4) 
 8008e58:	2104      	movs	r1, #4
 8008e5a:	2014      	movs	r0, #20
 8008e5c:	f7fe ff88 	bl	8007d70 <nnom_alignto>
 8008e60:	4601      	mov	r1, r0
							+ num_dim*sizeof(nnom_shape_data_t) 
							+ q_len*sizeof(nnom_qformat_param_t)*2);
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	009a      	lsls	r2, r3, #2
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	4413      	add	r3, r2
 8008e6a:	005b      	lsls	r3, r3, #1
 8008e6c:	440b      	add	r3, r1
	t = nnom_mem(nnom_alignto(sizeof(nnom_tensor_t), 4) 
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f7fe ff3c 	bl	8007cec <nnom_mem>
 8008e74:	6138      	str	r0, [r7, #16]
	if(t == NULL)
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d101      	bne.n	8008e80 <new_tensor+0x5c>
		return t;
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	e01a      	b.n	8008eb6 <new_tensor+0x92>
	t->dim = (nnom_shape_data_t*)((uint8_t*)t + sizeof(nnom_tensor_t));	// should add alignment
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	f103 0214 	add.w	r2, r3, #20
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	605a      	str	r2, [r3, #4]
	t->q_dec = (nnom_qformat_param_t*)((uint8_t*)t->dim + num_dim*sizeof(nnom_shape_data_t));
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	685a      	ldr	r2, [r3, #4]
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	005b      	lsls	r3, r3, #1
 8008e92:	441a      	add	r2, r3
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	609a      	str	r2, [r3, #8]
	t->q_offset = (nnom_qformat_param_t*)((uint8_t*)t->q_dec + q_len*sizeof(nnom_qformat_param_t));
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	689a      	ldr	r2, [r3, #8]
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	009b      	lsls	r3, r3, #2
 8008ea0:	441a      	add	r2, r3
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	60da      	str	r2, [r3, #12]
	t->num_dim = num_dim;
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	b2da      	uxtb	r2, r3
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	745a      	strb	r2, [r3, #17]
	t->qtype = type;
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	7bfa      	ldrb	r2, [r7, #15]
 8008eb2:	741a      	strb	r2, [r3, #16]

	return t;
 8008eb4:	693b      	ldr	r3, [r7, #16]
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3718      	adds	r7, #24
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop
 8008ec0:	0800ee7c 	.word	0x0800ee7c

08008ec4 <tensor_set_attr_v>:

// set tensor by value
// for tensor with quantized type NNOM_QTYPE_PER_TENSOR
nnom_tensor_t* tensor_set_attr_v(nnom_tensor_t* t, 
		nnom_qformat_param_t dec_bit, nnom_qformat_param_t offset, nnom_shape_data_t* dim, uint32_t num_dim, uint8_t bitwidth)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	60f8      	str	r0, [r7, #12]
 8008ecc:	60b9      	str	r1, [r7, #8]
 8008ece:	607a      	str	r2, [r7, #4]
 8008ed0:	603b      	str	r3, [r7, #0]
	// copy dim
	t->num_dim = num_dim;
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	b2da      	uxtb	r2, r3
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	745a      	strb	r2, [r3, #17]
	memcpy(t->dim, dim, sizeof(nnom_shape_data_t) * num_dim);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	6858      	ldr	r0, [r3, #4]
 8008ede:	69bb      	ldr	r3, [r7, #24]
 8008ee0:	005b      	lsls	r3, r3, #1
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	6839      	ldr	r1, [r7, #0]
 8008ee6:	f001 fb49 	bl	800a57c <memcpy>

	// bitwidth
	t->bitwidth = bitwidth;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	7f3a      	ldrb	r2, [r7, #28]
 8008eee:	749a      	strb	r2, [r3, #18]
	// copy the offset and q format
	*(t->q_dec) = dec_bit;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	68ba      	ldr	r2, [r7, #8]
 8008ef6:	601a      	str	r2, [r3, #0]
	*(t->q_offset) = offset;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	68db      	ldr	r3, [r3, #12]
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	601a      	str	r2, [r3, #0]
	return t;
 8008f00:	68fb      	ldr	r3, [r7, #12]
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3710      	adds	r7, #16
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}

08008f0a <tensor_set_attr>:

// set tensor by pointer
// for tensor with quantized type NNOM_QTYPE_PER_AXIS
nnom_tensor_t* tensor_set_attr(nnom_tensor_t* t, 
		nnom_qformat_param_t*dec_bit, nnom_qformat_param_t *offset, nnom_shape_data_t* dim, uint32_t num_dim, uint8_t bitwidth)
{
 8008f0a:	b580      	push	{r7, lr}
 8008f0c:	b086      	sub	sp, #24
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	60f8      	str	r0, [r7, #12]
 8008f12:	60b9      	str	r1, [r7, #8]
 8008f14:	607a      	str	r2, [r7, #4]
 8008f16:	603b      	str	r3, [r7, #0]
	size_t size;
		
	// copy dim
	t->num_dim = num_dim;
 8008f18:	6a3b      	ldr	r3, [r7, #32]
 8008f1a:	b2da      	uxtb	r2, r3
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	745a      	strb	r2, [r3, #17]
	memcpy(t->dim, dim, sizeof(nnom_shape_data_t) * num_dim);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	6858      	ldr	r0, [r3, #4]
 8008f24:	6a3b      	ldr	r3, [r7, #32]
 8008f26:	005b      	lsls	r3, r3, #1
 8008f28:	461a      	mov	r2, r3
 8008f2a:	6839      	ldr	r1, [r7, #0]
 8008f2c:	f001 fb26 	bl	800a57c <memcpy>
	
	// get the q format data size
	if(t->qtype == NNOM_QTYPE_PER_AXIS)
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	7c1b      	ldrb	r3, [r3, #16]
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d106      	bne.n	8008f46 <tensor_set_attr+0x3c>
		size = sizeof(nnom_qformat_param_t) * tensor_get_num_channel(t);
 8008f38:	68f8      	ldr	r0, [r7, #12]
 8008f3a:	f7ff ff5e 	bl	8008dfa <tensor_get_num_channel>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	617b      	str	r3, [r7, #20]
 8008f44:	e001      	b.n	8008f4a <tensor_set_attr+0x40>
	else
		size = sizeof(nnom_qformat_param_t);
 8008f46:	2304      	movs	r3, #4
 8008f48:	617b      	str	r3, [r7, #20]

	// bitwidth
	t->bitwidth = bitwidth;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8008f50:	749a      	strb	r2, [r3, #18]
	// copy the offset and q format
	memcpy(t->q_dec, dec_bit, size);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	689b      	ldr	r3, [r3, #8]
 8008f56:	697a      	ldr	r2, [r7, #20]
 8008f58:	68b9      	ldr	r1, [r7, #8]
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f001 fb0e 	bl	800a57c <memcpy>
	memcpy(t->q_offset, offset, size);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	68db      	ldr	r3, [r3, #12]
 8008f64:	697a      	ldr	r2, [r7, #20]
 8008f66:	6879      	ldr	r1, [r7, #4]
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f001 fb07 	bl	800a57c <memcpy>
	return t;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3718      	adds	r7, #24
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <tensor_cpy_attr>:

// this method copy the attributes of a tensor to a new tensor
// before that, src and des tensor must already have QTYPE and NUM_OF_DIM set. 
// Note, the tensors must have the same lenght. this method wont cpy the memory pointer data (we will assign memory later after building)
nnom_tensor_t* tensor_cpy_attr(nnom_tensor_t* des, nnom_tensor_t* src)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	6039      	str	r1, [r7, #0]
	size_t size;
	if(src->qtype != des->qtype || src->num_dim != des->num_dim)
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	7c1a      	ldrb	r2, [r3, #16]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	7c1b      	ldrb	r3, [r3, #16]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d105      	bne.n	8008f9a <tensor_cpy_attr+0x22>
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	7c5a      	ldrb	r2, [r3, #17]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	7c5b      	ldrb	r3, [r3, #17]
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d001      	beq.n	8008f9e <tensor_cpy_attr+0x26>
		return NULL;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	e02f      	b.n	8008ffe <tensor_cpy_attr+0x86>
	
	if(src->qtype == NNOM_QTYPE_PER_AXIS)
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	7c1b      	ldrb	r3, [r3, #16]
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d106      	bne.n	8008fb4 <tensor_cpy_attr+0x3c>
		size = sizeof(nnom_qformat_param_t) * tensor_get_num_channel(src);
 8008fa6:	6838      	ldr	r0, [r7, #0]
 8008fa8:	f7ff ff27 	bl	8008dfa <tensor_get_num_channel>
 8008fac:	4603      	mov	r3, r0
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	60fb      	str	r3, [r7, #12]
 8008fb2:	e001      	b.n	8008fb8 <tensor_cpy_attr+0x40>
	else
		size = sizeof(nnom_qformat_param_t);
 8008fb4:	2304      	movs	r3, #4
 8008fb6:	60fb      	str	r3, [r7, #12]
		
	// bit
	des->bitwidth = src->bitwidth;
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	7c9a      	ldrb	r2, [r3, #18]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	749a      	strb	r2, [r3, #18]
	// copy quantisation parameters
	memcpy(des->q_dec, src->q_dec, size);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6898      	ldr	r0, [r3, #8]
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	68fa      	ldr	r2, [r7, #12]
 8008fca:	4619      	mov	r1, r3
 8008fcc:	f001 fad6 	bl	800a57c <memcpy>
	memcpy(des->q_offset, src->q_offset, size);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	68d8      	ldr	r0, [r3, #12]
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	68db      	ldr	r3, [r3, #12]
 8008fd8:	68fa      	ldr	r2, [r7, #12]
 8008fda:	4619      	mov	r1, r3
 8008fdc:	f001 face 	bl	800a57c <memcpy>

	// copy number of dimension
	des->num_dim = src->num_dim;
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	7c5a      	ldrb	r2, [r3, #17]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	745a      	strb	r2, [r3, #17]
	memcpy(des->dim, src->dim, src->num_dim * sizeof(nnom_shape_data_t));
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6858      	ldr	r0, [r3, #4]
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	6859      	ldr	r1, [r3, #4]
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	7c5b      	ldrb	r3, [r3, #17]
 8008ff4:	005b      	lsls	r3, r3, #1
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	f001 fac0 	bl	800a57c <memcpy>
	return des;
 8008ffc:	687b      	ldr	r3, [r7, #4]
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3710      	adds	r7, #16
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <relu_run>:
	return act_tensor_run(cl->act, layer->in->tensor);
}

// porting
static nnom_status_t relu_run(nnom_activation_t* act)
{
 8009006:	b590      	push	{r4, r7, lr}
 8009008:	b083      	sub	sp, #12
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
#ifdef NNOM_USING_CMSIS_NN
	arm_relu_q7(act->tensor->p_data, tensor_size(act->tensor));
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	681c      	ldr	r4, [r3, #0]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	4618      	mov	r0, r3
 800901a:	f7ff fec3 	bl	8008da4 <tensor_size>
 800901e:	4603      	mov	r3, r0
 8009020:	b29b      	uxth	r3, r3
 8009022:	4619      	mov	r1, r3
 8009024:	4620      	mov	r0, r4
 8009026:	f7f8 fd5a 	bl	8001ade <arm_relu_q7>
#else
	local_relu_q7(act->tensor->p_data, tensor_size(act->tensor));
#endif
	return NN_SUCCESS;
 800902a:	2300      	movs	r3, #0
}
 800902c:	4618      	mov	r0, r3
 800902e:	370c      	adds	r7, #12
 8009030:	46bd      	mov	sp, r7
 8009032:	bd90      	pop	{r4, r7, pc}

08009034 <act_relu>:
	return NN_SUCCESS;
}

//
nnom_activation_t* act_relu(void)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
	nnom_activation_t* act = nnom_mem(sizeof(nnom_activation_t));
 800903a:	200c      	movs	r0, #12
 800903c:	f7fe fe56 	bl	8007cec <nnom_mem>
 8009040:	6078      	str	r0, [r7, #4]
	act->run = relu_run;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	4a04      	ldr	r2, [pc, #16]	; (8009058 <act_relu+0x24>)
 8009046:	601a      	str	r2, [r3, #0]
	act->type = ACT_RELU;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	721a      	strb	r2, [r3, #8]
	return act;
 800904e:	687b      	ldr	r3, [r7, #4]
}
 8009050:	4618      	mov	r0, r3
 8009052:	3708      	adds	r7, #8
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}
 8009058:	08009007 	.word	0x08009007

0800905c <default_build>:

// this is call while output shape is not defined.
// this will set the output shape same as input shape, and it set only the primary IO
// this cannot be used as first layer, of course...
nnom_status_t default_build(nnom_layer_t *layer)
{
 800905c:	b5b0      	push	{r4, r5, r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
	// get the last layer's output as input shape
	layer->in->tensor = layer->in->hook.io->tensor;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6a1b      	ldr	r3, [r3, #32]
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6a1b      	ldr	r3, [r3, #32]
 800906e:	68d2      	ldr	r2, [r2, #12]
 8009070:	60da      	str	r2, [r3, #12]
	// output tensor
	// 1. allocate a new tensor for output
	// 2. set the same dim, qfmt to the new tensor.
	layer->out->tensor = new_tensor(NNOM_QTYPE_PER_TENSOR,layer->in->tensor->num_dim, tensor_get_num_channel(layer->in->tensor));
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6a1b      	ldr	r3, [r3, #32]
 8009076:	68db      	ldr	r3, [r3, #12]
 8009078:	7c5b      	ldrb	r3, [r3, #17]
 800907a:	461d      	mov	r5, r3
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6a1b      	ldr	r3, [r3, #32]
 8009080:	68db      	ldr	r3, [r3, #12]
 8009082:	4618      	mov	r0, r3
 8009084:	f7ff feb9 	bl	8008dfa <tensor_get_num_channel>
 8009088:	4602      	mov	r2, r0
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800908e:	4629      	mov	r1, r5
 8009090:	2000      	movs	r0, #0
 8009092:	f7ff fec7 	bl	8008e24 <new_tensor>
 8009096:	4603      	mov	r3, r0
 8009098:	60e3      	str	r3, [r4, #12]
	tensor_cpy_attr(layer->out->tensor, layer->in->tensor);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909e:	68da      	ldr	r2, [r3, #12]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6a1b      	ldr	r3, [r3, #32]
 80090a4:	68db      	ldr	r3, [r3, #12]
 80090a6:	4619      	mov	r1, r3
 80090a8:	4610      	mov	r0, r2
 80090aa:	f7ff ff65 	bl	8008f78 <tensor_cpy_attr>

	// now this build has passed the input tensors (shapes, formats) to the new tensors. 
	return NN_SUCCESS;
 80090ae:	2300      	movs	r3, #0
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3708      	adds	r7, #8
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bdb0      	pop	{r4, r5, r7, pc}

080090b8 <Conv2D>:
// Conv2D
// multiplier of (output/input channel),
// shape of kernal, shape of strides, weight struct, bias struct
nnom_layer_t *Conv2D(uint32_t filters, nnom_3d_shape_t k, nnom_3d_shape_t s, nnom_3d_shape_t d,  nnom_padding_t pad_type,
					 const nnom_weight_t *w, const nnom_bias_t *b)
{
 80090b8:	b082      	sub	sp, #8
 80090ba:	b580      	push	{r7, lr}
 80090bc:	b08c      	sub	sp, #48	; 0x30
 80090be:	af00      	add	r7, sp, #0
 80090c0:	60f8      	str	r0, [r7, #12]
 80090c2:	1d38      	adds	r0, r7, #4
 80090c4:	e880 0006 	stmia.w	r0, {r1, r2}
 80090c8:	63fb      	str	r3, [r7, #60]	; 0x3c
	nnom_conv2d_layer_t *layer;
	nnom_buf_t *comp;
	nnom_layer_io_t *in, *out;
	// apply a block memory for all the sub handles.
	size_t mem_size = sizeof(nnom_conv2d_layer_t) + sizeof(nnom_layer_io_t) * 2 + sizeof(nnom_buf_t);
 80090ca:	23a4      	movs	r3, #164	; 0xa4
 80090cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	layer = nnom_mem(mem_size);
 80090ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80090d0:	f7fe fe0c 	bl	8007cec <nnom_mem>
 80090d4:	62b8      	str	r0, [r7, #40]	; 0x28
	if (layer == NULL)
 80090d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d101      	bne.n	80090e0 <Conv2D+0x28>
		return NULL;
 80090dc:	2300      	movs	r3, #0
 80090de:	e0b6      	b.n	800924e <Conv2D+0x196>

	// distribut the memory to sub handles.
	in = (void *)((uint8_t*)layer + sizeof(nnom_conv2d_layer_t));
 80090e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e2:	3360      	adds	r3, #96	; 0x60
 80090e4:	627b      	str	r3, [r7, #36]	; 0x24
	out = (void *)((uint8_t*)in + sizeof(nnom_layer_io_t));
 80090e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e8:	331c      	adds	r3, #28
 80090ea:	623b      	str	r3, [r7, #32]
	comp = (void *)((uint8_t*)out + sizeof(nnom_layer_io_t));
 80090ec:	6a3b      	ldr	r3, [r7, #32]
 80090ee:	331c      	adds	r3, #28
 80090f0:	61fb      	str	r3, [r7, #28]

	// set type in layer parent
	layer->super.type = NNOM_CONV_2D;
 80090f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f4:	2204      	movs	r2, #4
 80090f6:	771a      	strb	r2, [r3, #28]
	// set buf state
	in->type = NNOM_TENSOR_BUF_TEMP;
 80090f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fa:	2201      	movs	r2, #1
 80090fc:	761a      	strb	r2, [r3, #24]
	out->type = NNOM_TENSOR_BUF_TEMP;
 80090fe:	6a3b      	ldr	r3, [r7, #32]
 8009100:	2201      	movs	r2, #1
 8009102:	761a      	strb	r2, [r3, #24]
	comp->type = NNOM_TENSOR_BUF_TEMP;
 8009104:	69fb      	ldr	r3, [r7, #28]
 8009106:	2201      	movs	r2, #1
 8009108:	721a      	strb	r2, [r3, #8]
	// put in & out on the layer.
	layer->super.in = io_init(layer, in);
 800910a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800910c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800910e:	f7ff fe3a 	bl	8008d86 <io_init>
 8009112:	4602      	mov	r2, r0
 8009114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009116:	621a      	str	r2, [r3, #32]
	layer->super.out = io_init(layer, out);
 8009118:	6a39      	ldr	r1, [r7, #32]
 800911a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800911c:	f7ff fe33 	bl	8008d86 <io_init>
 8009120:	4602      	mov	r2, r0
 8009122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009124:	625a      	str	r2, [r3, #36]	; 0x24
	#ifdef NNOM_USING_CMSIS_NN
	layer->super.comp = comp;
 8009126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009128:	69fa      	ldr	r2, [r7, #28]
 800912a:	611a      	str	r2, [r3, #16]
	#endif
	// set run method & output shape
	layer->super.run = conv2d_run;
 800912c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800912e:	4a4b      	ldr	r2, [pc, #300]	; (800925c <Conv2D+0x1a4>)
 8009130:	605a      	str	r2, [r3, #4]
	layer->super.build = conv2d_build;
 8009132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009134:	4a4a      	ldr	r2, [pc, #296]	; (8009260 <Conv2D+0x1a8>)
 8009136:	609a      	str	r2, [r3, #8]

	// get the private parameters
	layer->kernel = k;
 8009138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800913a:	3330      	adds	r3, #48	; 0x30
 800913c:	1d3a      	adds	r2, r7, #4
 800913e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009142:	6018      	str	r0, [r3, #0]
 8009144:	3304      	adds	r3, #4
 8009146:	8019      	strh	r1, [r3, #0]
	layer->stride = s;
 8009148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914a:	3336      	adds	r3, #54	; 0x36
 800914c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8009150:	6810      	ldr	r0, [r2, #0]
 8009152:	6018      	str	r0, [r3, #0]
 8009154:	8892      	ldrh	r2, [r2, #4]
 8009156:	809a      	strh	r2, [r3, #4]
	layer->dilation = d; 	
 8009158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800915a:	3342      	adds	r3, #66	; 0x42
 800915c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8009160:	6810      	ldr	r0, [r2, #0]
 8009162:	6018      	str	r0, [r3, #0]
 8009164:	8892      	ldrh	r2, [r2, #4]
 8009166:	809a      	strh	r2, [r3, #4]
	layer->filter_mult = filters; 		// for convs, this means filter number
 8009168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800916a:	68fa      	ldr	r2, [r7, #12]
 800916c:	64da      	str	r2, [r3, #76]	; 0x4c
	layer->padding_type = pad_type;
 800916e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009170:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8009174:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	// create weight and bias tensor
	layer->weight = new_tensor(NNOM_QTYPE_PER_TENSOR, 4, filters);
 8009178:	68fa      	ldr	r2, [r7, #12]
 800917a:	2104      	movs	r1, #4
 800917c:	2000      	movs	r0, #0
 800917e:	f7ff fe51 	bl	8008e24 <new_tensor>
 8009182:	4602      	mov	r2, r0
 8009184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009186:	651a      	str	r2, [r3, #80]	; 0x50
	layer->bias = new_tensor(NNOM_QTYPE_PER_TENSOR, 1, filters);
 8009188:	68fa      	ldr	r2, [r7, #12]
 800918a:	2101      	movs	r1, #1
 800918c:	2000      	movs	r0, #0
 800918e:	f7ff fe49 	bl	8008e24 <new_tensor>
 8009192:	4602      	mov	r2, r0
 8009194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009196:	655a      	str	r2, [r3, #84]	; 0x54

	// configure weight tensor manually to support new tensor based backends. 
	// needs to be very careful
	{
		// config weight 
		nnom_shape_data_t dim[4] = {k.h, k.w, k.c, filters};
 8009198:	88bb      	ldrh	r3, [r7, #4]
 800919a:	82bb      	strh	r3, [r7, #20]
 800919c:	88fb      	ldrh	r3, [r7, #6]
 800919e:	82fb      	strh	r3, [r7, #22]
 80091a0:	893b      	ldrh	r3, [r7, #8]
 80091a2:	833b      	strh	r3, [r7, #24]
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	837b      	strh	r3, [r7, #26]
		*(layer->weight->q_offset) = 0;			// we have no support of offset here
 80091aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091ae:	68db      	ldr	r3, [r3, #12]
 80091b0:	2200      	movs	r2, #0
 80091b2:	601a      	str	r2, [r3, #0]
		*(layer->weight->q_dec) = 0;		// not using it
 80091b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	2200      	movs	r2, #0
 80091bc:	601a      	str	r2, [r3, #0]
		layer->weight->p_data = (void*)w->p_value;
 80091be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80091c4:	6812      	ldr	r2, [r2, #0]
 80091c6:	601a      	str	r2, [r3, #0]
		layer->weight->bitwidth = 8;
 80091c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091cc:	2208      	movs	r2, #8
 80091ce:	749a      	strb	r2, [r3, #18]
		layer->weight->qtype = NNOM_QTYPE_PER_TENSOR;
 80091d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091d4:	2200      	movs	r2, #0
 80091d6:	741a      	strb	r2, [r3, #16]
		memcpy(layer->weight->dim, dim, layer->weight->num_dim * sizeof(nnom_shape_data_t));
 80091d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091dc:	6858      	ldr	r0, [r3, #4]
 80091de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091e2:	7c5b      	ldrb	r3, [r3, #17]
 80091e4:	005a      	lsls	r2, r3, #1
 80091e6:	f107 0314 	add.w	r3, r7, #20
 80091ea:	4619      	mov	r1, r3
 80091ec:	f001 f9c6 	bl	800a57c <memcpy>

		// config bias 
		dim[0] = filters;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	82bb      	strh	r3, [r7, #20]
		*(layer->bias->q_offset) = 0;			// we have no support of offset here
 80091f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091fa:	68db      	ldr	r3, [r3, #12]
 80091fc:	2200      	movs	r2, #0
 80091fe:	601a      	str	r2, [r3, #0]
		*(layer->bias->q_dec) = 0;		// not using it
 8009200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009204:	689b      	ldr	r3, [r3, #8]
 8009206:	2200      	movs	r2, #0
 8009208:	601a      	str	r2, [r3, #0]
		layer->bias->p_data = (void*) b->p_value;
 800920a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800920e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009210:	6812      	ldr	r2, [r2, #0]
 8009212:	601a      	str	r2, [r3, #0]
		layer->bias->bitwidth = 8;
 8009214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009218:	2208      	movs	r2, #8
 800921a:	749a      	strb	r2, [r3, #18]
		layer->weight->qtype = NNOM_QTYPE_PER_TENSOR;
 800921c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009220:	2200      	movs	r2, #0
 8009222:	741a      	strb	r2, [r3, #16]
		memcpy(layer->bias->dim, dim, layer->bias->num_dim * sizeof(nnom_shape_data_t));
 8009224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009228:	6858      	ldr	r0, [r3, #4]
 800922a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800922e:	7c5b      	ldrb	r3, [r3, #17]
 8009230:	005a      	lsls	r2, r3, #1
 8009232:	f107 0314 	add.w	r3, r7, #20
 8009236:	4619      	mov	r1, r3
 8009238:	f001 f9a0 	bl	800a57c <memcpy>
		
		// output shift and bias shift
		layer->output_rshift = (nnom_qformat_param_t *)&w->shift;
 800923c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800923e:	1d1a      	adds	r2, r3, #4
 8009240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009242:	659a      	str	r2, [r3, #88]	; 0x58
		layer->bias_lshift = (nnom_qformat_param_t *)&b->shift;
 8009244:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009246:	1d1a      	adds	r2, r3, #4
 8009248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924a:	65da      	str	r2, [r3, #92]	; 0x5c
	}

	return (nnom_layer_t *)layer;
 800924c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800924e:	4618      	mov	r0, r3
 8009250:	3730      	adds	r7, #48	; 0x30
 8009252:	46bd      	mov	sp, r7
 8009254:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009258:	b002      	add	sp, #8
 800925a:	4770      	bx	lr
 800925c:	08009443 	.word	0x08009443
 8009260:	080092bd 	.word	0x080092bd

08009264 <conv_output_length>:

// keras's implementation. 
// source: https://github.com/keras-team/keras/blob/7a39b6c62d43c25472b2c2476bd2a8983ae4f682/keras/utils/conv_utils.py#L85
uint32_t conv_output_length(uint32_t input_length, uint32_t filter_size, nnom_padding_t padding, uint32_t stride, uint32_t dilation)
{
 8009264:	b480      	push	{r7}
 8009266:	b087      	sub	sp, #28
 8009268:	af00      	add	r7, sp, #0
 800926a:	60f8      	str	r0, [r7, #12]
 800926c:	60b9      	str	r1, [r7, #8]
 800926e:	603b      	str	r3, [r7, #0]
 8009270:	4613      	mov	r3, r2
 8009272:	71fb      	strb	r3, [r7, #7]
    if (input_length == 0)
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d101      	bne.n	800927e <conv_output_length+0x1a>
        return 0;
 800927a:	2300      	movs	r3, #0
 800927c:	e018      	b.n	80092b0 <conv_output_length+0x4c>
    uint32_t dilated_filter_size = (filter_size - 1) * dilation + 1;
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	3b01      	subs	r3, #1
 8009282:	6a3a      	ldr	r2, [r7, #32]
 8009284:	fb02 f303 	mul.w	r3, r2, r3
 8009288:	3301      	adds	r3, #1
 800928a:	613b      	str	r3, [r7, #16]
	uint32_t output_length;
    if(padding == PADDING_SAME)
 800928c:	79fb      	ldrb	r3, [r7, #7]
 800928e:	2b01      	cmp	r3, #1
 8009290:	d102      	bne.n	8009298 <conv_output_length+0x34>
        output_length = input_length;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	617b      	str	r3, [r7, #20]
 8009296:	e004      	b.n	80092a2 <conv_output_length+0x3e>
    else
        output_length = input_length - dilated_filter_size + 1;
 8009298:	68fa      	ldr	r2, [r7, #12]
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	1ad3      	subs	r3, r2, r3
 800929e:	3301      	adds	r3, #1
 80092a0:	617b      	str	r3, [r7, #20]
    return (output_length + stride - 1) / stride;
 80092a2:	697a      	ldr	r2, [r7, #20]
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	4413      	add	r3, r2
 80092a8:	1e5a      	subs	r2, r3, #1
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	371c      	adds	r7, #28
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr

080092bc <conv2d_build>:

nnom_status_t conv2d_build(nnom_layer_t *layer)
{
 80092bc:	b590      	push	{r4, r7, lr}
 80092be:	b087      	sub	sp, #28
 80092c0:	af02      	add	r7, sp, #8
 80092c2:	6078      	str	r0, [r7, #4]
	nnom_conv2d_layer_t *cl = (nnom_conv2d_layer_t *)layer;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	60fb      	str	r3, [r7, #12]

	// get the tensor from last layer's output
	layer->in->tensor = layer->in->hook.io->tensor;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6a1b      	ldr	r3, [r3, #32]
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6a1b      	ldr	r3, [r3, #32]
 80092d2:	68d2      	ldr	r2, [r2, #12]
 80092d4:	60da      	str	r2, [r3, #12]

	// create new tensor for the output
	layer->out->tensor = new_tensor(NNOM_QTYPE_PER_TENSOR, layer->in->tensor->num_dim, cl->filter_mult);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6a1b      	ldr	r3, [r3, #32]
 80092da:	68db      	ldr	r3, [r3, #12]
 80092dc:	7c5b      	ldrb	r3, [r3, #17]
 80092de:	4619      	mov	r1, r3
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80092e8:	2000      	movs	r0, #0
 80092ea:	f7ff fd9b 	bl	8008e24 <new_tensor>
 80092ee:	4603      	mov	r3, r0
 80092f0:	60e3      	str	r3, [r4, #12]
	// copy then change later. 
	tensor_cpy_attr(layer->out->tensor, layer->in->tensor);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f6:	68da      	ldr	r2, [r3, #12]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6a1b      	ldr	r3, [r3, #32]
 80092fc:	68db      	ldr	r3, [r3, #12]
 80092fe:	4619      	mov	r1, r3
 8009300:	4610      	mov	r0, r2
 8009302:	f7ff fe39 	bl	8008f78 <tensor_cpy_attr>
	
	// now we set up the tensor shape, always HWC format
	layer->out->tensor->dim[0] = conv_output_length(layer->in->tensor->dim[0], cl->kernel.h, cl->padding_type, cl->stride.h, cl->dilation.h);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6a1b      	ldr	r3, [r3, #32]
 800930a:	68db      	ldr	r3, [r3, #12]
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	881b      	ldrh	r3, [r3, #0]
 8009310:	4618      	mov	r0, r3
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8009316:	4619      	mov	r1, r3
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009322:	461c      	mov	r4, r3
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800932a:	9300      	str	r3, [sp, #0]
 800932c:	4623      	mov	r3, r4
 800932e:	f7ff ff99 	bl	8009264 <conv_output_length>
 8009332:	4602      	mov	r2, r0
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	b292      	uxth	r2, r2
 800933e:	801a      	strh	r2, [r3, #0]
	layer->out->tensor->dim[1] = conv_output_length(layer->in->tensor->dim[1], cl->kernel.w, cl->padding_type, cl->stride.w, cl->dilation.w);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6a1b      	ldr	r3, [r3, #32]
 8009344:	68db      	ldr	r3, [r3, #12]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	3302      	adds	r3, #2
 800934a:	881b      	ldrh	r3, [r3, #0]
 800934c:	4618      	mov	r0, r3
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009352:	4619      	mov	r1, r3
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800935e:	461c      	mov	r4, r3
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009366:	9300      	str	r3, [sp, #0]
 8009368:	4623      	mov	r3, r4
 800936a:	f7ff ff7b 	bl	8009264 <conv_output_length>
 800936e:	4602      	mov	r2, r0
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009374:	68db      	ldr	r3, [r3, #12]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	3302      	adds	r3, #2
 800937a:	b292      	uxth	r2, r2
 800937c:	801a      	strh	r2, [r3, #0]
	layer->out->tensor->dim[2] = cl->filter_mult; // channel stays the same
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009386:	68db      	ldr	r3, [r3, #12]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	3304      	adds	r3, #4
 800938c:	b292      	uxth	r2, r2
 800938e:	801a      	strh	r2, [r3, #0]
	
	// fill padding
	if (cl->padding_type == PADDING_SAME)
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8009396:	2b01      	cmp	r3, #1
 8009398:	d121      	bne.n	80093de <conv2d_build+0x122>
	{
		cl->pad.w = cl->dilation.w * (cl->kernel.w - 1) / 2;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80093a0:	461a      	mov	r2, r3
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80093a6:	3b01      	subs	r3, #1
 80093a8:	fb03 f302 	mul.w	r3, r3, r2
 80093ac:	0fda      	lsrs	r2, r3, #31
 80093ae:	4413      	add	r3, r2
 80093b0:	105b      	asrs	r3, r3, #1
 80093b2:	b29a      	uxth	r2, r3
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	87da      	strh	r2, [r3, #62]	; 0x3e
		cl->pad.h = cl->dilation.h * (cl->kernel.h - 1) / 2;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80093be:	461a      	mov	r2, r3
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80093c4:	3b01      	subs	r3, #1
 80093c6:	fb03 f302 	mul.w	r3, r3, r2
 80093ca:	0fda      	lsrs	r2, r3, #31
 80093cc:	4413      	add	r3, r2
 80093ce:	105b      	asrs	r3, r3, #1
 80093d0:	b29a      	uxth	r2, r3
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	879a      	strh	r2, [r3, #60]	; 0x3c
		cl->pad.c = 0;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2200      	movs	r2, #0
 80093da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	}

	#ifdef NNOM_USING_CMSIS_NN
	// bufferA size: (1D shape)
	// 2*ch_im_in*dim_kernel*dim_kernel
	layer->comp->size = 2 * 2 * layer->in->tensor->dim[2] * cl->kernel.w * cl->kernel.h;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6a1b      	ldr	r3, [r3, #32]
 80093e2:	68db      	ldr	r3, [r3, #12]
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	3304      	adds	r3, #4
 80093e8:	881b      	ldrh	r3, [r3, #0]
 80093ea:	009b      	lsls	r3, r3, #2
 80093ec:	68fa      	ldr	r2, [r7, #12]
 80093ee:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80093f0:	fb02 f303 	mul.w	r3, r2, r3
 80093f4:	68fa      	ldr	r2, [r7, #12]
 80093f6:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 80093f8:	fb02 f203 	mul.w	r2, r2, r3
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	691b      	ldr	r3, [r3, #16]
 8009400:	605a      	str	r2, [r3, #4]
	#endif
	// computational cost: K x K x Cin x Hour x Wout x Cout
	layer->stat.macc = cl->kernel.w * cl->kernel.h * layer->in->tensor->dim[2] * tensor_size(layer->out->tensor);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009406:	461a      	mov	r2, r3
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800940c:	fb03 f302 	mul.w	r3, r3, r2
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	6a12      	ldr	r2, [r2, #32]
 8009414:	68d2      	ldr	r2, [r2, #12]
 8009416:	6852      	ldr	r2, [r2, #4]
 8009418:	3204      	adds	r2, #4
 800941a:	8812      	ldrh	r2, [r2, #0]
 800941c:	fb02 f303 	mul.w	r3, r2, r3
 8009420:	461c      	mov	r4, r3
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009426:	68db      	ldr	r3, [r3, #12]
 8009428:	4618      	mov	r0, r3
 800942a:	f7ff fcbb 	bl	8008da4 <tensor_size>
 800942e:	4603      	mov	r3, r0
 8009430:	fb03 f204 	mul.w	r2, r3, r4
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	629a      	str	r2, [r3, #40]	; 0x28
	return NN_SUCCESS;
 8009438:	2300      	movs	r3, #0
}
 800943a:	4618      	mov	r0, r3
 800943c:	3714      	adds	r7, #20
 800943e:	46bd      	mov	sp, r7
 8009440:	bd90      	pop	{r4, r7, pc}

08009442 <conv2d_run>:
	return NN_SUCCESS;
}


nnom_status_t conv2d_run(nnom_layer_t *layer)
{
 8009442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009446:	b0a4      	sub	sp, #144	; 0x90
 8009448:	af14      	add	r7, sp, #80	; 0x50
 800944a:	6378      	str	r0, [r7, #52]	; 0x34
	nnom_conv2d_layer_t *cl = (nnom_conv2d_layer_t *)layer;
 800944c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800944e:	63fb      	str	r3, [r7, #60]	; 0x3c
	return NN_SUCCESS;
#else
	// HWC format
	#ifdef NNOM_USING_CMSIS_NN
	// current cmsis nn does not support dilation
	if(cl->dilation.w == 1 && cl->dilation.h == 1 && cl->weight->qtype == NNOM_QTYPE_PER_TENSOR)
 8009450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009452:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009456:	2b01      	cmp	r3, #1
 8009458:	f040 833c 	bne.w	8009ad4 <conv2d_run+0x692>
 800945c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800945e:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8009462:	2b01      	cmp	r3, #1
 8009464:	f040 8336 	bne.w	8009ad4 <conv2d_run+0x692>
 8009468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800946a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800946c:	7c1b      	ldrb	r3, [r3, #16]
 800946e:	2b00      	cmp	r3, #0
 8009470:	f040 8330 	bne.w	8009ad4 <conv2d_run+0x692>
	{
		//RGB
		// ch_im_in = 3, w = h
		if (layer->in->tensor->dim[2] == 3 && layer->in->tensor->dim[0] == layer->in->tensor->dim[1])
 8009474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009476:	6a1b      	ldr	r3, [r3, #32]
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	3304      	adds	r3, #4
 800947e:	881b      	ldrh	r3, [r3, #0]
 8009480:	2b03      	cmp	r3, #3
 8009482:	d17a      	bne.n	800957a <conv2d_run+0x138>
 8009484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009486:	6a1b      	ldr	r3, [r3, #32]
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	881a      	ldrh	r2, [r3, #0]
 800948e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009490:	6a1b      	ldr	r3, [r3, #32]
 8009492:	68db      	ldr	r3, [r3, #12]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	3302      	adds	r3, #2
 8009498:	881b      	ldrh	r3, [r3, #0]
 800949a:	429a      	cmp	r2, r3
 800949c:	d16d      	bne.n	800957a <conv2d_run+0x138>
			// squared
			if((cl->kernel.w == cl->kernel.h) && (cl->pad.w == cl->pad.h) && (cl->stride.w == cl->stride.h))
 800949e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094a0:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80094a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094a4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d167      	bne.n	800957a <conv2d_run+0x138>
 80094aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094ac:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80094ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094b0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d161      	bne.n	800957a <conv2d_run+0x138>
 80094b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094b8:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80094ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094be:	429a      	cmp	r2, r3
 80094c0:	d15b      	bne.n	800957a <conv2d_run+0x138>
				return (nnom_status_t)arm_convolve_HWC_q7_RGB(
					layer->in->tensor->p_data, layer->in->tensor->dim[1], layer->in->tensor->dim[2],
 80094c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094c4:	6a1b      	ldr	r3, [r3, #32]
 80094c6:	68db      	ldr	r3, [r3, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	633b      	str	r3, [r7, #48]	; 0x30
 80094cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094ce:	6a1b      	ldr	r3, [r3, #32]
 80094d0:	68db      	ldr	r3, [r3, #12]
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	3302      	adds	r3, #2
				return (nnom_status_t)arm_convolve_HWC_q7_RGB(
 80094d6:	f8b3 c000 	ldrh.w	ip, [r3]
					layer->in->tensor->p_data, layer->in->tensor->dim[1], layer->in->tensor->dim[2],
 80094da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094dc:	6a1b      	ldr	r3, [r3, #32]
 80094de:	68db      	ldr	r3, [r3, #12]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	3304      	adds	r3, #4
				return (nnom_status_t)arm_convolve_HWC_q7_RGB(
 80094e4:	f8b3 e000 	ldrh.w	lr, [r3]
					cl->weight->p_data,
 80094e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	62fa      	str	r2, [r7, #44]	; 0x2c
					layer->out->tensor->dim[2],
 80094f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f4:	68db      	ldr	r3, [r3, #12]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	3304      	adds	r3, #4
				return (nnom_status_t)arm_convolve_HWC_q7_RGB(
 80094fa:	8819      	ldrh	r1, [r3, #0]
 80094fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094fe:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 8009500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009502:	8fdc      	ldrh	r4, [r3, #62]	; 0x3e
 8009504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009506:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
					cl->kernel.w, cl->pad.w, cl->stride.w,
					cl->bias->p_data, cl->bias_lshift[0],
 8009508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800950a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800950c:	681e      	ldr	r6, [r3, #0]
 800950e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009512:	681b      	ldr	r3, [r3, #0]
				return (nnom_status_t)arm_convolve_HWC_q7_RGB(
 8009514:	b29a      	uxth	r2, r3
 8009516:	62ba      	str	r2, [r7, #40]	; 0x28
					cl->output_rshift[0], layer->out->tensor->p_data, layer->out->tensor->dim[1],
 8009518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800951a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800951c:	681b      	ldr	r3, [r3, #0]
				return (nnom_status_t)arm_convolve_HWC_q7_RGB(
 800951e:	fa1f f883 	uxth.w	r8, r3
 8009522:	4643      	mov	r3, r8
 8009524:	627b      	str	r3, [r7, #36]	; 0x24
					cl->output_rshift[0], layer->out->tensor->p_data, layer->out->tensor->dim[1],
 8009526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800952a:	68db      	ldr	r3, [r3, #12]
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	623a      	str	r2, [r7, #32]
 8009530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009534:	68db      	ldr	r3, [r3, #12]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	3302      	adds	r3, #2
				return (nnom_status_t)arm_convolve_HWC_q7_RGB(
 800953a:	f8b3 8000 	ldrh.w	r8, [r3]
 800953e:	4643      	mov	r3, r8
 8009540:	61fb      	str	r3, [r7, #28]
					(q15_t *)(layer->comp->mem->blk), NULL);
 8009542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009544:	691b      	ldr	r3, [r3, #16]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	681a      	ldr	r2, [r3, #0]
				return (nnom_status_t)arm_convolve_HWC_q7_RGB(
 800954a:	2300      	movs	r3, #0
 800954c:	930a      	str	r3, [sp, #40]	; 0x28
 800954e:	9209      	str	r2, [sp, #36]	; 0x24
 8009550:	69fb      	ldr	r3, [r7, #28]
 8009552:	9308      	str	r3, [sp, #32]
 8009554:	6a3a      	ldr	r2, [r7, #32]
 8009556:	9207      	str	r2, [sp, #28]
 8009558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800955a:	9306      	str	r3, [sp, #24]
 800955c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800955e:	9205      	str	r2, [sp, #20]
 8009560:	9604      	str	r6, [sp, #16]
 8009562:	9503      	str	r5, [sp, #12]
 8009564:	9402      	str	r4, [sp, #8]
 8009566:	9001      	str	r0, [sp, #4]
 8009568:	9100      	str	r1, [sp, #0]
 800956a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800956c:	4672      	mov	r2, lr
 800956e:	4661      	mov	r1, ip
 8009570:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009572:	f7f8 fcb9 	bl	8001ee8 <arm_convolve_HWC_q7_RGB>
 8009576:	4603      	mov	r3, r0
 8009578:	e32b      	b.n	8009bd2 <conv2d_run+0x790>

		// check if can use optimized function
		//	ch_im_in is multiple of 4
		//	ch_im_out is multiple of 2
		if ((layer->in->tensor->dim[2] % 4 == 0) && (layer->out->tensor->dim[2] % 2 == 0))
 800957a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800957c:	6a1b      	ldr	r3, [r3, #32]
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	3304      	adds	r3, #4
 8009584:	881b      	ldrh	r3, [r3, #0]
 8009586:	f003 0303 	and.w	r3, r3, #3
 800958a:	b29b      	uxth	r3, r3
 800958c:	2b00      	cmp	r3, #0
 800958e:	f040 81a2 	bne.w	80098d6 <conv2d_run+0x494>
 8009592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	3304      	adds	r3, #4
 800959c:	881b      	ldrh	r3, [r3, #0]
 800959e:	f003 0301 	and.w	r3, r3, #1
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	f040 8196 	bne.w	80098d6 <conv2d_run+0x494>
		{
			// squared
			if((layer->in->tensor->dim[0] == layer->in->tensor->dim[1])
 80095aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095ac:	6a1b      	ldr	r3, [r3, #32]
 80095ae:	68db      	ldr	r3, [r3, #12]
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	881a      	ldrh	r2, [r3, #0]
 80095b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095b6:	6a1b      	ldr	r3, [r3, #32]
 80095b8:	68db      	ldr	r3, [r3, #12]
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	3302      	adds	r3, #2
 80095be:	881b      	ldrh	r3, [r3, #0]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	f040 8111 	bne.w	80097e8 <conv2d_run+0x3a6>
			&& (layer->out->tensor->dim[0] == layer->out->tensor->dim[1])
 80095c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ca:	68db      	ldr	r3, [r3, #12]
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	881a      	ldrh	r2, [r3, #0]
 80095d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d4:	68db      	ldr	r3, [r3, #12]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	3302      	adds	r3, #2
 80095da:	881b      	ldrh	r3, [r3, #0]
 80095dc:	429a      	cmp	r2, r3
 80095de:	f040 8103 	bne.w	80097e8 <conv2d_run+0x3a6>
			&& (cl->kernel.w == cl->kernel.h) && (cl->pad.w == cl->pad.h) && (cl->stride.w == cl->stride.h))
 80095e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095e4:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80095e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095e8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80095ea:	429a      	cmp	r2, r3
 80095ec:	f040 80fc 	bne.w	80097e8 <conv2d_run+0x3a6>
 80095f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095f2:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80095f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095f6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80095f8:	429a      	cmp	r2, r3
 80095fa:	f040 80f5 	bne.w	80097e8 <conv2d_run+0x3a6>
 80095fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009600:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8009602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009604:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009606:	429a      	cmp	r2, r3
 8009608:	f040 80ee 	bne.w	80097e8 <conv2d_run+0x3a6>
			{
				// 1x1 fast
				/*modification
				 * change if (cl->kernel.w == 1 && cl->kernel.h == 1) by if (cl->kernel.w == 1 && cl->kernel.h == 1 && cl->stride.w == 1 && cl->strid.h == 1 && cl->pad.w == 0 && cl->pad.h == 0)
				 */
				if (cl->kernel.w == 1 && cl->kernel.h == 1 && cl->stride.w == 1 && cl->stride.h == 1 && cl->pad.w == 0 && cl->pad.h == 0)
 800960c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800960e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009610:	2b01      	cmp	r3, #1
 8009612:	f040 808d 	bne.w	8009730 <conv2d_run+0x2ee>
 8009616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009618:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800961a:	2b01      	cmp	r3, #1
 800961c:	f040 8088 	bne.w	8009730 <conv2d_run+0x2ee>
 8009620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009622:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8009624:	2b01      	cmp	r3, #1
 8009626:	f040 8083 	bne.w	8009730 <conv2d_run+0x2ee>
 800962a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800962c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800962e:	2b01      	cmp	r3, #1
 8009630:	d17e      	bne.n	8009730 <conv2d_run+0x2ee>
 8009632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009636:	2b00      	cmp	r3, #0
 8009638:	d17a      	bne.n	8009730 <conv2d_run+0x2ee>
 800963a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800963c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800963e:	2b00      	cmp	r3, #0
 8009640:	d176      	bne.n	8009730 <conv2d_run+0x2ee>
					return (nnom_status_t)arm_convolve_1x1_HWC_q7_fast_nonsquare(
						layer->in->tensor->p_data,
 8009642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009644:	6a1b      	ldr	r3, [r3, #32]
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	633b      	str	r3, [r7, #48]	; 0x30
						layer->in->tensor->dim[1], layer->in->tensor->dim[0], layer->in->tensor->dim[2],
 800964c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800964e:	6a1b      	ldr	r3, [r3, #32]
 8009650:	68db      	ldr	r3, [r3, #12]
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	3302      	adds	r3, #2
					return (nnom_status_t)arm_convolve_1x1_HWC_q7_fast_nonsquare(
 8009656:	f8b3 c000 	ldrh.w	ip, [r3]
						layer->in->tensor->dim[1], layer->in->tensor->dim[0], layer->in->tensor->dim[2],
 800965a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800965c:	6a1b      	ldr	r3, [r3, #32]
 800965e:	68db      	ldr	r3, [r3, #12]
 8009660:	685b      	ldr	r3, [r3, #4]
					return (nnom_status_t)arm_convolve_1x1_HWC_q7_fast_nonsquare(
 8009662:	f8b3 e000 	ldrh.w	lr, [r3]
						layer->in->tensor->dim[1], layer->in->tensor->dim[0], layer->in->tensor->dim[2],
 8009666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009668:	6a1b      	ldr	r3, [r3, #32]
 800966a:	68db      	ldr	r3, [r3, #12]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	3304      	adds	r3, #4
					return (nnom_status_t)arm_convolve_1x1_HWC_q7_fast_nonsquare(
 8009670:	f8b3 8000 	ldrh.w	r8, [r3]
						cl->weight->p_data,
 8009674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	62fa      	str	r2, [r7, #44]	; 0x2c
						layer->out->tensor->dim[2],
 800967c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800967e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009680:	68db      	ldr	r3, [r3, #12]
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	3304      	adds	r3, #4
					return (nnom_status_t)arm_convolve_1x1_HWC_q7_fast_nonsquare(
 8009686:	8819      	ldrh	r1, [r3, #0]
 8009688:	62b9      	str	r1, [r7, #40]	; 0x28
 800968a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800968c:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800968e:	627c      	str	r4, [r7, #36]	; 0x24
 8009690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009692:	8e1d      	ldrh	r5, [r3, #48]	; 0x30
 8009694:	623d      	str	r5, [r7, #32]
 8009696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009698:	8fde      	ldrh	r6, [r3, #62]	; 0x3e
 800969a:	61fe      	str	r6, [r7, #28]
 800969c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800969e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80096a0:	61bb      	str	r3, [r7, #24]
 80096a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096a4:	8f18      	ldrh	r0, [r3, #56]	; 0x38
 80096a6:	6178      	str	r0, [r7, #20]
 80096a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096aa:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 80096ac:	613a      	str	r2, [r7, #16]
						cl->kernel.w, cl->kernel.h, cl->pad.w, cl->pad.h, cl->stride.w, cl->stride.h,
						cl->bias->p_data, cl->bias_lshift[0],
 80096ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096b2:	6819      	ldr	r1, [r3, #0]
 80096b4:	60f9      	str	r1, [r7, #12]
 80096b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096ba:	681b      	ldr	r3, [r3, #0]
					return (nnom_status_t)arm_convolve_1x1_HWC_q7_fast_nonsquare(
 80096bc:	b29e      	uxth	r6, r3
						cl->output_rshift[0], layer->out->tensor->p_data, layer->out->tensor->dim[1], layer->out->tensor->dim[0],
 80096be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096c2:	681b      	ldr	r3, [r3, #0]
					return (nnom_status_t)arm_convolve_1x1_HWC_q7_fast_nonsquare(
 80096c4:	b29d      	uxth	r5, r3
						cl->output_rshift[0], layer->out->tensor->p_data, layer->out->tensor->dim[1], layer->out->tensor->dim[0],
 80096c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ca:	68db      	ldr	r3, [r3, #12]
 80096cc:	681c      	ldr	r4, [r3, #0]
 80096ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d2:	68db      	ldr	r3, [r3, #12]
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	3302      	adds	r3, #2
					return (nnom_status_t)arm_convolve_1x1_HWC_q7_fast_nonsquare(
 80096d8:	8818      	ldrh	r0, [r3, #0]
						cl->output_rshift[0], layer->out->tensor->p_data, layer->out->tensor->dim[1], layer->out->tensor->dim[0],
 80096da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096de:	68db      	ldr	r3, [r3, #12]
 80096e0:	685b      	ldr	r3, [r3, #4]
					return (nnom_status_t)arm_convolve_1x1_HWC_q7_fast_nonsquare(
 80096e2:	8819      	ldrh	r1, [r3, #0]
						(q15_t *)(layer->comp->mem->blk), NULL);
 80096e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096e6:	691b      	ldr	r3, [r3, #16]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	681a      	ldr	r2, [r3, #0]
					return (nnom_status_t)arm_convolve_1x1_HWC_q7_fast_nonsquare(
 80096ec:	2300      	movs	r3, #0
 80096ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80096f0:	920e      	str	r2, [sp, #56]	; 0x38
 80096f2:	910d      	str	r1, [sp, #52]	; 0x34
 80096f4:	900c      	str	r0, [sp, #48]	; 0x30
 80096f6:	940b      	str	r4, [sp, #44]	; 0x2c
 80096f8:	950a      	str	r5, [sp, #40]	; 0x28
 80096fa:	9609      	str	r6, [sp, #36]	; 0x24
 80096fc:	68f9      	ldr	r1, [r7, #12]
 80096fe:	9108      	str	r1, [sp, #32]
 8009700:	693a      	ldr	r2, [r7, #16]
 8009702:	9207      	str	r2, [sp, #28]
 8009704:	6978      	ldr	r0, [r7, #20]
 8009706:	9006      	str	r0, [sp, #24]
 8009708:	69bb      	ldr	r3, [r7, #24]
 800970a:	9305      	str	r3, [sp, #20]
 800970c:	69fe      	ldr	r6, [r7, #28]
 800970e:	9604      	str	r6, [sp, #16]
 8009710:	6a3d      	ldr	r5, [r7, #32]
 8009712:	9503      	str	r5, [sp, #12]
 8009714:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8009716:	9402      	str	r4, [sp, #8]
 8009718:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800971a:	9101      	str	r1, [sp, #4]
 800971c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800971e:	9200      	str	r2, [sp, #0]
 8009720:	4643      	mov	r3, r8
 8009722:	4672      	mov	r2, lr
 8009724:	4661      	mov	r1, ip
 8009726:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009728:	f7f8 fa39 	bl	8001b9e <arm_convolve_1x1_HWC_q7_fast_nonsquare>
 800972c:	4603      	mov	r3, r0
 800972e:	e250      	b.n	8009bd2 <conv2d_run+0x790>
				// opt square shape
				else
					return (nnom_status_t)arm_convolve_HWC_q7_fast(
						layer->in->tensor->p_data, layer->in->tensor->dim[1], layer->in->tensor->dim[2],
 8009730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009732:	6a1b      	ldr	r3, [r3, #32]
 8009734:	68db      	ldr	r3, [r3, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	633b      	str	r3, [r7, #48]	; 0x30
 800973a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800973c:	6a1b      	ldr	r3, [r3, #32]
 800973e:	68db      	ldr	r3, [r3, #12]
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	3302      	adds	r3, #2
					return (nnom_status_t)arm_convolve_HWC_q7_fast(
 8009744:	f8b3 c000 	ldrh.w	ip, [r3]
						layer->in->tensor->p_data, layer->in->tensor->dim[1], layer->in->tensor->dim[2],
 8009748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800974a:	6a1b      	ldr	r3, [r3, #32]
 800974c:	68db      	ldr	r3, [r3, #12]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	3304      	adds	r3, #4
					return (nnom_status_t)arm_convolve_HWC_q7_fast(
 8009752:	f8b3 e000 	ldrh.w	lr, [r3]
						cl->weight->p_data,
 8009756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	62fa      	str	r2, [r7, #44]	; 0x2c
						layer->out->tensor->dim[2], cl->kernel.w, cl->pad.w, cl->stride.w,
 800975e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009762:	68db      	ldr	r3, [r3, #12]
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	3304      	adds	r3, #4
					return (nnom_status_t)arm_convolve_HWC_q7_fast(
 8009768:	8819      	ldrh	r1, [r3, #0]
 800976a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800976c:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800976e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009770:	8fdc      	ldrh	r4, [r3, #62]	; 0x3e
 8009772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009774:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
						cl->bias->p_data, cl->bias_lshift[0],
 8009776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800977a:	681e      	ldr	r6, [r3, #0]
 800977c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800977e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009780:	681b      	ldr	r3, [r3, #0]
					return (nnom_status_t)arm_convolve_HWC_q7_fast(
 8009782:	b29a      	uxth	r2, r3
 8009784:	62ba      	str	r2, [r7, #40]	; 0x28
						cl->output_rshift[0], layer->out->tensor->p_data,
 8009786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800978a:	681b      	ldr	r3, [r3, #0]
					return (nnom_status_t)arm_convolve_HWC_q7_fast(
 800978c:	fa1f f883 	uxth.w	r8, r3
 8009790:	4643      	mov	r3, r8
 8009792:	627b      	str	r3, [r7, #36]	; 0x24
						cl->output_rshift[0], layer->out->tensor->p_data,
 8009794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009798:	68db      	ldr	r3, [r3, #12]
 800979a:	681a      	ldr	r2, [r3, #0]
 800979c:	623a      	str	r2, [r7, #32]
						layer->out->tensor->dim[1], (q15_t *)(layer->comp->mem->blk), NULL);
 800979e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a2:	68db      	ldr	r3, [r3, #12]
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	3302      	adds	r3, #2
					return (nnom_status_t)arm_convolve_HWC_q7_fast(
 80097a8:	f8b3 8000 	ldrh.w	r8, [r3]
 80097ac:	4643      	mov	r3, r8
 80097ae:	61fb      	str	r3, [r7, #28]
						layer->out->tensor->dim[1], (q15_t *)(layer->comp->mem->blk), NULL);
 80097b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097b2:	691b      	ldr	r3, [r3, #16]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	681a      	ldr	r2, [r3, #0]
					return (nnom_status_t)arm_convolve_HWC_q7_fast(
 80097b8:	2300      	movs	r3, #0
 80097ba:	930a      	str	r3, [sp, #40]	; 0x28
 80097bc:	9209      	str	r2, [sp, #36]	; 0x24
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	9308      	str	r3, [sp, #32]
 80097c2:	6a3a      	ldr	r2, [r7, #32]
 80097c4:	9207      	str	r2, [sp, #28]
 80097c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c8:	9306      	str	r3, [sp, #24]
 80097ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097cc:	9205      	str	r2, [sp, #20]
 80097ce:	9604      	str	r6, [sp, #16]
 80097d0:	9503      	str	r5, [sp, #12]
 80097d2:	9402      	str	r4, [sp, #8]
 80097d4:	9001      	str	r0, [sp, #4]
 80097d6:	9100      	str	r1, [sp, #0]
 80097d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097da:	4672      	mov	r2, lr
 80097dc:	4661      	mov	r1, ip
 80097de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097e0:	f7f9 f9aa 	bl	8002b38 <arm_convolve_HWC_q7_fast>
 80097e4:	4603      	mov	r3, r0
 80097e6:	e1f4      	b.n	8009bd2 <conv2d_run+0x790>
			}
			// opt none square shape
			else
				return (nnom_status_t)arm_convolve_HWC_q7_fast_nonsquare(
					layer->in->tensor->p_data,
 80097e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097ea:	6a1b      	ldr	r3, [r3, #32]
 80097ec:	68db      	ldr	r3, [r3, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	633b      	str	r3, [r7, #48]	; 0x30
					layer->in->tensor->dim[1], layer->in->tensor->dim[0], layer->in->tensor->dim[2],
 80097f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097f4:	6a1b      	ldr	r3, [r3, #32]
 80097f6:	68db      	ldr	r3, [r3, #12]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	3302      	adds	r3, #2
				return (nnom_status_t)arm_convolve_HWC_q7_fast_nonsquare(
 80097fc:	f8b3 c000 	ldrh.w	ip, [r3]
					layer->in->tensor->dim[1], layer->in->tensor->dim[0], layer->in->tensor->dim[2],
 8009800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009802:	6a1b      	ldr	r3, [r3, #32]
 8009804:	68db      	ldr	r3, [r3, #12]
 8009806:	685b      	ldr	r3, [r3, #4]
				return (nnom_status_t)arm_convolve_HWC_q7_fast_nonsquare(
 8009808:	f8b3 e000 	ldrh.w	lr, [r3]
					layer->in->tensor->dim[1], layer->in->tensor->dim[0], layer->in->tensor->dim[2],
 800980c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800980e:	6a1b      	ldr	r3, [r3, #32]
 8009810:	68db      	ldr	r3, [r3, #12]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	3304      	adds	r3, #4
				return (nnom_status_t)arm_convolve_HWC_q7_fast_nonsquare(
 8009816:	f8b3 8000 	ldrh.w	r8, [r3]
					cl->weight->p_data, layer->out->tensor->dim[2],
 800981a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800981c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009826:	68db      	ldr	r3, [r3, #12]
 8009828:	685b      	ldr	r3, [r3, #4]
 800982a:	3304      	adds	r3, #4
				return (nnom_status_t)arm_convolve_HWC_q7_fast_nonsquare(
 800982c:	8819      	ldrh	r1, [r3, #0]
 800982e:	62b9      	str	r1, [r7, #40]	; 0x28
 8009830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009832:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009834:	627c      	str	r4, [r7, #36]	; 0x24
 8009836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009838:	8e1d      	ldrh	r5, [r3, #48]	; 0x30
 800983a:	623d      	str	r5, [r7, #32]
 800983c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800983e:	8fde      	ldrh	r6, [r3, #62]	; 0x3e
 8009840:	61fe      	str	r6, [r7, #28]
 8009842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009844:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8009846:	61bb      	str	r3, [r7, #24]
 8009848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800984a:	8f18      	ldrh	r0, [r3, #56]	; 0x38
 800984c:	6178      	str	r0, [r7, #20]
 800984e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009850:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8009852:	613a      	str	r2, [r7, #16]
					cl->kernel.w, cl->kernel.h, cl->pad.w, cl->pad.h, cl->stride.w, cl->stride.h,
					cl->bias->p_data, cl->bias_lshift[0], cl->output_rshift[0],
 8009854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009858:	6819      	ldr	r1, [r3, #0]
 800985a:	60f9      	str	r1, [r7, #12]
 800985c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800985e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009860:	681b      	ldr	r3, [r3, #0]
				return (nnom_status_t)arm_convolve_HWC_q7_fast_nonsquare(
 8009862:	b29e      	uxth	r6, r3
					cl->bias->p_data, cl->bias_lshift[0], cl->output_rshift[0],
 8009864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009868:	681b      	ldr	r3, [r3, #0]
				return (nnom_status_t)arm_convolve_HWC_q7_fast_nonsquare(
 800986a:	b29d      	uxth	r5, r3
					layer->out->tensor->p_data,
 800986c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800986e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009870:	68db      	ldr	r3, [r3, #12]
 8009872:	681c      	ldr	r4, [r3, #0]
					layer->out->tensor->dim[1], layer->out->tensor->dim[0], (q15_t *)(layer->comp->mem->blk), NULL);
 8009874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	3302      	adds	r3, #2
				return (nnom_status_t)arm_convolve_HWC_q7_fast_nonsquare(
 800987e:	8818      	ldrh	r0, [r3, #0]
					layer->out->tensor->dim[1], layer->out->tensor->dim[0], (q15_t *)(layer->comp->mem->blk), NULL);
 8009880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009884:	68db      	ldr	r3, [r3, #12]
 8009886:	685b      	ldr	r3, [r3, #4]
				return (nnom_status_t)arm_convolve_HWC_q7_fast_nonsquare(
 8009888:	8819      	ldrh	r1, [r3, #0]
					layer->out->tensor->dim[1], layer->out->tensor->dim[0], (q15_t *)(layer->comp->mem->blk), NULL);
 800988a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800988c:	691b      	ldr	r3, [r3, #16]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	681a      	ldr	r2, [r3, #0]
				return (nnom_status_t)arm_convolve_HWC_q7_fast_nonsquare(
 8009892:	2300      	movs	r3, #0
 8009894:	930f      	str	r3, [sp, #60]	; 0x3c
 8009896:	920e      	str	r2, [sp, #56]	; 0x38
 8009898:	910d      	str	r1, [sp, #52]	; 0x34
 800989a:	900c      	str	r0, [sp, #48]	; 0x30
 800989c:	940b      	str	r4, [sp, #44]	; 0x2c
 800989e:	950a      	str	r5, [sp, #40]	; 0x28
 80098a0:	9609      	str	r6, [sp, #36]	; 0x24
 80098a2:	68f9      	ldr	r1, [r7, #12]
 80098a4:	9108      	str	r1, [sp, #32]
 80098a6:	693a      	ldr	r2, [r7, #16]
 80098a8:	9207      	str	r2, [sp, #28]
 80098aa:	6978      	ldr	r0, [r7, #20]
 80098ac:	9006      	str	r0, [sp, #24]
 80098ae:	69bb      	ldr	r3, [r7, #24]
 80098b0:	9305      	str	r3, [sp, #20]
 80098b2:	69fe      	ldr	r6, [r7, #28]
 80098b4:	9604      	str	r6, [sp, #16]
 80098b6:	6a3d      	ldr	r5, [r7, #32]
 80098b8:	9503      	str	r5, [sp, #12]
 80098ba:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80098bc:	9402      	str	r4, [sp, #8]
 80098be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80098c0:	9101      	str	r1, [sp, #4]
 80098c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098c4:	9200      	str	r2, [sp, #0]
 80098c6:	4643      	mov	r3, r8
 80098c8:	4672      	mov	r2, lr
 80098ca:	4661      	mov	r1, ip
 80098cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098ce:	f7f9 fe21 	bl	8003514 <arm_convolve_HWC_q7_fast_nonsquare>
 80098d2:	4603      	mov	r3, r0
 80098d4:	e17d      	b.n	8009bd2 <conv2d_run+0x790>
		}
		// none optimized
		else
		{
			// none opt square shape
			if ((layer->in->tensor->dim[0] == layer->in->tensor->dim[1] && 
 80098d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098d8:	6a1b      	ldr	r3, [r3, #32]
 80098da:	68db      	ldr	r3, [r3, #12]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	881a      	ldrh	r2, [r3, #0]
 80098e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098e2:	6a1b      	ldr	r3, [r3, #32]
 80098e4:	68db      	ldr	r3, [r3, #12]
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	3302      	adds	r3, #2
 80098ea:	881b      	ldrh	r3, [r3, #0]
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d17a      	bne.n	80099e6 <conv2d_run+0x5a4>
				layer->out->tensor->dim[0] == layer->out->tensor->dim[1]) &&
 80098f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f4:	68db      	ldr	r3, [r3, #12]
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	881a      	ldrh	r2, [r3, #0]
 80098fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098fe:	68db      	ldr	r3, [r3, #12]
 8009900:	685b      	ldr	r3, [r3, #4]
 8009902:	3302      	adds	r3, #2
 8009904:	881b      	ldrh	r3, [r3, #0]
			if ((layer->in->tensor->dim[0] == layer->in->tensor->dim[1] && 
 8009906:	429a      	cmp	r2, r3
 8009908:	d16d      	bne.n	80099e6 <conv2d_run+0x5a4>
				(cl->kernel.w == cl->kernel.h) && (cl->pad.w == cl->pad.h) && (cl->stride.w == cl->stride.h))
 800990a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800990c:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800990e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009910:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
				layer->out->tensor->dim[0] == layer->out->tensor->dim[1]) &&
 8009912:	429a      	cmp	r2, r3
 8009914:	d167      	bne.n	80099e6 <conv2d_run+0x5a4>
				(cl->kernel.w == cl->kernel.h) && (cl->pad.w == cl->pad.h) && (cl->stride.w == cl->stride.h))
 8009916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009918:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800991a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800991c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800991e:	429a      	cmp	r2, r3
 8009920:	d161      	bne.n	80099e6 <conv2d_run+0x5a4>
 8009922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009924:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8009926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009928:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800992a:	429a      	cmp	r2, r3
 800992c:	d15b      	bne.n	80099e6 <conv2d_run+0x5a4>
				return (nnom_status_t)arm_convolve_HWC_q7_basic(
					layer->in->tensor->p_data, layer->in->tensor->dim[1], layer->in->tensor->dim[2],
 800992e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009930:	6a1b      	ldr	r3, [r3, #32]
 8009932:	68db      	ldr	r3, [r3, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	633b      	str	r3, [r7, #48]	; 0x30
 8009938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800993a:	6a1b      	ldr	r3, [r3, #32]
 800993c:	68db      	ldr	r3, [r3, #12]
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	3302      	adds	r3, #2
				return (nnom_status_t)arm_convolve_HWC_q7_basic(
 8009942:	f8b3 c000 	ldrh.w	ip, [r3]
					layer->in->tensor->p_data, layer->in->tensor->dim[1], layer->in->tensor->dim[2],
 8009946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009948:	6a1b      	ldr	r3, [r3, #32]
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	3304      	adds	r3, #4
				return (nnom_status_t)arm_convolve_HWC_q7_basic(
 8009950:	f8b3 e000 	ldrh.w	lr, [r3]
					cl->weight->p_data,
 8009954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	62fa      	str	r2, [r7, #44]	; 0x2c
					layer->out->tensor->dim[2], cl->kernel.w, cl->pad.w, cl->stride.w,
 800995c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800995e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009960:	68db      	ldr	r3, [r3, #12]
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	3304      	adds	r3, #4
				return (nnom_status_t)arm_convolve_HWC_q7_basic(
 8009966:	8819      	ldrh	r1, [r3, #0]
 8009968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800996a:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800996c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800996e:	8fdc      	ldrh	r4, [r3, #62]	; 0x3e
 8009970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009972:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
					cl->bias->p_data, cl->bias_lshift[0],
 8009974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009978:	681e      	ldr	r6, [r3, #0]
 800997a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800997c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800997e:	681b      	ldr	r3, [r3, #0]
				return (nnom_status_t)arm_convolve_HWC_q7_basic(
 8009980:	b29a      	uxth	r2, r3
 8009982:	62ba      	str	r2, [r7, #40]	; 0x28
					cl->output_rshift[0], layer->out->tensor->p_data,
 8009984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009988:	681b      	ldr	r3, [r3, #0]
				return (nnom_status_t)arm_convolve_HWC_q7_basic(
 800998a:	fa1f f883 	uxth.w	r8, r3
 800998e:	4643      	mov	r3, r8
 8009990:	627b      	str	r3, [r7, #36]	; 0x24
					cl->output_rshift[0], layer->out->tensor->p_data,
 8009992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009996:	68db      	ldr	r3, [r3, #12]
 8009998:	681a      	ldr	r2, [r3, #0]
 800999a:	623a      	str	r2, [r7, #32]
					layer->out->tensor->dim[1], (q15_t *)(layer->comp->mem->blk), NULL);
 800999c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800999e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a0:	68db      	ldr	r3, [r3, #12]
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	3302      	adds	r3, #2
				return (nnom_status_t)arm_convolve_HWC_q7_basic(
 80099a6:	f8b3 8000 	ldrh.w	r8, [r3]
 80099aa:	4643      	mov	r3, r8
 80099ac:	61fb      	str	r3, [r7, #28]
					layer->out->tensor->dim[1], (q15_t *)(layer->comp->mem->blk), NULL);
 80099ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099b0:	691b      	ldr	r3, [r3, #16]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	681a      	ldr	r2, [r3, #0]
				return (nnom_status_t)arm_convolve_HWC_q7_basic(
 80099b6:	2300      	movs	r3, #0
 80099b8:	930a      	str	r3, [sp, #40]	; 0x28
 80099ba:	9209      	str	r2, [sp, #36]	; 0x24
 80099bc:	69fb      	ldr	r3, [r7, #28]
 80099be:	9308      	str	r3, [sp, #32]
 80099c0:	6a3a      	ldr	r2, [r7, #32]
 80099c2:	9207      	str	r2, [sp, #28]
 80099c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c6:	9306      	str	r3, [sp, #24]
 80099c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099ca:	9205      	str	r2, [sp, #20]
 80099cc:	9604      	str	r6, [sp, #16]
 80099ce:	9503      	str	r5, [sp, #12]
 80099d0:	9402      	str	r4, [sp, #8]
 80099d2:	9001      	str	r0, [sp, #4]
 80099d4:	9100      	str	r1, [sp, #0]
 80099d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d8:	4672      	mov	r2, lr
 80099da:	4661      	mov	r1, ip
 80099dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099de:	f7f8 fcc3 	bl	8002368 <arm_convolve_HWC_q7_basic>
 80099e2:	4603      	mov	r3, r0
 80099e4:	e0f5      	b.n	8009bd2 <conv2d_run+0x790>
			// none opt none square shape
			else
				return (nnom_status_t)arm_convolve_HWC_q7_basic_nonsquare(
					layer->in->tensor->p_data,
 80099e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099e8:	6a1b      	ldr	r3, [r3, #32]
 80099ea:	68db      	ldr	r3, [r3, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	633b      	str	r3, [r7, #48]	; 0x30
					layer->in->tensor->dim[1], layer->in->tensor->dim[0], layer->in->tensor->dim[2],
 80099f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099f2:	6a1b      	ldr	r3, [r3, #32]
 80099f4:	68db      	ldr	r3, [r3, #12]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	3302      	adds	r3, #2
				return (nnom_status_t)arm_convolve_HWC_q7_basic_nonsquare(
 80099fa:	f8b3 c000 	ldrh.w	ip, [r3]
					layer->in->tensor->dim[1], layer->in->tensor->dim[0], layer->in->tensor->dim[2],
 80099fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a00:	6a1b      	ldr	r3, [r3, #32]
 8009a02:	68db      	ldr	r3, [r3, #12]
 8009a04:	685b      	ldr	r3, [r3, #4]
				return (nnom_status_t)arm_convolve_HWC_q7_basic_nonsquare(
 8009a06:	f8b3 e000 	ldrh.w	lr, [r3]
					layer->in->tensor->dim[1], layer->in->tensor->dim[0], layer->in->tensor->dim[2],
 8009a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a0c:	6a1b      	ldr	r3, [r3, #32]
 8009a0e:	68db      	ldr	r3, [r3, #12]
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	3304      	adds	r3, #4
				return (nnom_status_t)arm_convolve_HWC_q7_basic_nonsquare(
 8009a14:	f8b3 8000 	ldrh.w	r8, [r3]
					cl->weight->p_data, layer->out->tensor->dim[2],
 8009a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a1c:	681a      	ldr	r2, [r3, #0]
 8009a1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a24:	68db      	ldr	r3, [r3, #12]
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	3304      	adds	r3, #4
				return (nnom_status_t)arm_convolve_HWC_q7_basic_nonsquare(
 8009a2a:	8819      	ldrh	r1, [r3, #0]
 8009a2c:	62b9      	str	r1, [r7, #40]	; 0x28
 8009a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a30:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009a32:	627c      	str	r4, [r7, #36]	; 0x24
 8009a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a36:	8e1d      	ldrh	r5, [r3, #48]	; 0x30
 8009a38:	623d      	str	r5, [r7, #32]
 8009a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a3c:	8fde      	ldrh	r6, [r3, #62]	; 0x3e
 8009a3e:	61fe      	str	r6, [r7, #28]
 8009a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a42:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8009a44:	61bb      	str	r3, [r7, #24]
 8009a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a48:	8f18      	ldrh	r0, [r3, #56]	; 0x38
 8009a4a:	6178      	str	r0, [r7, #20]
 8009a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a4e:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8009a50:	613a      	str	r2, [r7, #16]
					cl->kernel.w, cl->kernel.h, cl->pad.w, cl->pad.h, cl->stride.w, cl->stride.h,
					cl->bias->p_data, cl->bias_lshift[0], cl->output_rshift[0],
 8009a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a56:	6819      	ldr	r1, [r3, #0]
 8009a58:	60f9      	str	r1, [r7, #12]
 8009a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a5e:	681b      	ldr	r3, [r3, #0]
				return (nnom_status_t)arm_convolve_HWC_q7_basic_nonsquare(
 8009a60:	b29e      	uxth	r6, r3
					cl->bias->p_data, cl->bias_lshift[0], cl->output_rshift[0],
 8009a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a66:	681b      	ldr	r3, [r3, #0]
				return (nnom_status_t)arm_convolve_HWC_q7_basic_nonsquare(
 8009a68:	b29d      	uxth	r5, r3
					layer->out->tensor->p_data,
 8009a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a6e:	68db      	ldr	r3, [r3, #12]
 8009a70:	681c      	ldr	r4, [r3, #0]
					layer->out->tensor->dim[1], layer->out->tensor->dim[0], (q15_t *)(layer->comp->mem->blk), NULL);
 8009a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a76:	68db      	ldr	r3, [r3, #12]
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	3302      	adds	r3, #2
				return (nnom_status_t)arm_convolve_HWC_q7_basic_nonsquare(
 8009a7c:	8818      	ldrh	r0, [r3, #0]
					layer->out->tensor->dim[1], layer->out->tensor->dim[0], (q15_t *)(layer->comp->mem->blk), NULL);
 8009a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a82:	68db      	ldr	r3, [r3, #12]
 8009a84:	685b      	ldr	r3, [r3, #4]
				return (nnom_status_t)arm_convolve_HWC_q7_basic_nonsquare(
 8009a86:	8819      	ldrh	r1, [r3, #0]
					layer->out->tensor->dim[1], layer->out->tensor->dim[0], (q15_t *)(layer->comp->mem->blk), NULL);
 8009a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a8a:	691b      	ldr	r3, [r3, #16]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	681a      	ldr	r2, [r3, #0]
				return (nnom_status_t)arm_convolve_HWC_q7_basic_nonsquare(
 8009a90:	2300      	movs	r3, #0
 8009a92:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a94:	920e      	str	r2, [sp, #56]	; 0x38
 8009a96:	910d      	str	r1, [sp, #52]	; 0x34
 8009a98:	900c      	str	r0, [sp, #48]	; 0x30
 8009a9a:	940b      	str	r4, [sp, #44]	; 0x2c
 8009a9c:	950a      	str	r5, [sp, #40]	; 0x28
 8009a9e:	9609      	str	r6, [sp, #36]	; 0x24
 8009aa0:	68f9      	ldr	r1, [r7, #12]
 8009aa2:	9108      	str	r1, [sp, #32]
 8009aa4:	693a      	ldr	r2, [r7, #16]
 8009aa6:	9207      	str	r2, [sp, #28]
 8009aa8:	6978      	ldr	r0, [r7, #20]
 8009aaa:	9006      	str	r0, [sp, #24]
 8009aac:	69bb      	ldr	r3, [r7, #24]
 8009aae:	9305      	str	r3, [sp, #20]
 8009ab0:	69fe      	ldr	r6, [r7, #28]
 8009ab2:	9604      	str	r6, [sp, #16]
 8009ab4:	6a3d      	ldr	r5, [r7, #32]
 8009ab6:	9503      	str	r5, [sp, #12]
 8009ab8:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8009aba:	9402      	str	r4, [sp, #8]
 8009abc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009abe:	9101      	str	r1, [sp, #4]
 8009ac0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ac2:	9200      	str	r2, [sp, #0]
 8009ac4:	4643      	mov	r3, r8
 8009ac6:	4672      	mov	r2, lr
 8009ac8:	4661      	mov	r1, ip
 8009aca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009acc:	f7f8 fe3d 	bl	800274a <arm_convolve_HWC_q7_basic_nonsquare>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	e07e      	b.n	8009bd2 <conv2d_run+0x790>
	else
	#endif // NNOM_USING_CMSIS_NN
	{
		// local implementation
		local_convolve_HWC_q7_nonsquare(
					layer->in->tensor->p_data,
 8009ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ad6:	6a1b      	ldr	r3, [r3, #32]
 8009ad8:	68db      	ldr	r3, [r3, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	633b      	str	r3, [r7, #48]	; 0x30
					layer->in->tensor->dim[1], layer->in->tensor->dim[0], layer->in->tensor->dim[2],
 8009ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ae0:	6a1b      	ldr	r3, [r3, #32]
 8009ae2:	68db      	ldr	r3, [r3, #12]
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	3302      	adds	r3, #2
		local_convolve_HWC_q7_nonsquare(
 8009ae8:	f8b3 c000 	ldrh.w	ip, [r3]
					layer->in->tensor->dim[1], layer->in->tensor->dim[0], layer->in->tensor->dim[2],
 8009aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aee:	6a1b      	ldr	r3, [r3, #32]
 8009af0:	68db      	ldr	r3, [r3, #12]
 8009af2:	685b      	ldr	r3, [r3, #4]
		local_convolve_HWC_q7_nonsquare(
 8009af4:	f8b3 e000 	ldrh.w	lr, [r3]
					layer->in->tensor->dim[1], layer->in->tensor->dim[0], layer->in->tensor->dim[2],
 8009af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009afa:	6a1b      	ldr	r3, [r3, #32]
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	3304      	adds	r3, #4
		local_convolve_HWC_q7_nonsquare(
 8009b02:	f8b3 8000 	ldrh.w	r8, [r3]
					cl->weight->p_data, layer->out->tensor->dim[2],
 8009b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b0a:	681a      	ldr	r2, [r3, #0]
 8009b0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b12:	68db      	ldr	r3, [r3, #12]
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	3304      	adds	r3, #4
		local_convolve_HWC_q7_nonsquare(
 8009b18:	8819      	ldrh	r1, [r3, #0]
 8009b1a:	62b9      	str	r1, [r7, #40]	; 0x28
 8009b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b1e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009b20:	627c      	str	r4, [r7, #36]	; 0x24
 8009b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b24:	8e1d      	ldrh	r5, [r3, #48]	; 0x30
 8009b26:	623d      	str	r5, [r7, #32]
 8009b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b2a:	8fde      	ldrh	r6, [r3, #62]	; 0x3e
 8009b2c:	61fe      	str	r6, [r7, #28]
 8009b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b30:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8009b32:	61bb      	str	r3, [r7, #24]
 8009b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b36:	8f18      	ldrh	r0, [r3, #56]	; 0x38
 8009b38:	6178      	str	r0, [r7, #20]
 8009b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b3c:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8009b3e:	613a      	str	r2, [r7, #16]
 8009b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b42:	f8b3 1044 	ldrh.w	r1, [r3, #68]	; 0x44
 8009b46:	60f9      	str	r1, [r7, #12]
 8009b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b4a:	f8b3 4042 	ldrh.w	r4, [r3, #66]	; 0x42
 8009b4e:	60bc      	str	r4, [r7, #8]
					cl->kernel.w, cl->kernel.h, cl->pad.w, cl->pad.h, cl->stride.w, cl->stride.h, cl->dilation.w, cl->dilation.h,
					cl->bias->p_data, cl->bias_lshift, cl->output_rshift, cl->weight->qtype,
 8009b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b54:	681d      	ldr	r5, [r3, #0]
 8009b56:	607d      	str	r5, [r7, #4]
 8009b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b5a:	6dde      	ldr	r6, [r3, #92]	; 0x5c
 8009b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b5e:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8009b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
		local_convolve_HWC_q7_nonsquare(
 8009b64:	7c1c      	ldrb	r4, [r3, #16]
					layer->out->tensor->p_data,
 8009b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	6818      	ldr	r0, [r3, #0]
					layer->out->tensor->dim[1], layer->out->tensor->dim[0], NULL, NULL);
 8009b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	3302      	adds	r3, #2
		local_convolve_HWC_q7_nonsquare(
 8009b78:	8819      	ldrh	r1, [r3, #0]
					layer->out->tensor->dim[1], layer->out->tensor->dim[0], NULL, NULL);
 8009b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7e:	68db      	ldr	r3, [r3, #12]
 8009b80:	685b      	ldr	r3, [r3, #4]
		local_convolve_HWC_q7_nonsquare(
 8009b82:	881a      	ldrh	r2, [r3, #0]
 8009b84:	2300      	movs	r3, #0
 8009b86:	9312      	str	r3, [sp, #72]	; 0x48
 8009b88:	2300      	movs	r3, #0
 8009b8a:	9311      	str	r3, [sp, #68]	; 0x44
 8009b8c:	9210      	str	r2, [sp, #64]	; 0x40
 8009b8e:	910f      	str	r1, [sp, #60]	; 0x3c
 8009b90:	900e      	str	r0, [sp, #56]	; 0x38
 8009b92:	940d      	str	r4, [sp, #52]	; 0x34
 8009b94:	950c      	str	r5, [sp, #48]	; 0x30
 8009b96:	960b      	str	r6, [sp, #44]	; 0x2c
 8009b98:	687d      	ldr	r5, [r7, #4]
 8009b9a:	950a      	str	r5, [sp, #40]	; 0x28
 8009b9c:	68bc      	ldr	r4, [r7, #8]
 8009b9e:	9409      	str	r4, [sp, #36]	; 0x24
 8009ba0:	68f9      	ldr	r1, [r7, #12]
 8009ba2:	9108      	str	r1, [sp, #32]
 8009ba4:	693a      	ldr	r2, [r7, #16]
 8009ba6:	9207      	str	r2, [sp, #28]
 8009ba8:	6978      	ldr	r0, [r7, #20]
 8009baa:	9006      	str	r0, [sp, #24]
 8009bac:	69bb      	ldr	r3, [r7, #24]
 8009bae:	9305      	str	r3, [sp, #20]
 8009bb0:	69fe      	ldr	r6, [r7, #28]
 8009bb2:	9604      	str	r6, [sp, #16]
 8009bb4:	6a3d      	ldr	r5, [r7, #32]
 8009bb6:	9503      	str	r5, [sp, #12]
 8009bb8:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8009bba:	9402      	str	r4, [sp, #8]
 8009bbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009bbe:	9101      	str	r1, [sp, #4]
 8009bc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009bc2:	9200      	str	r2, [sp, #0]
 8009bc4:	4643      	mov	r3, r8
 8009bc6:	4672      	mov	r2, lr
 8009bc8:	4661      	mov	r1, ip
 8009bca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009bcc:	f7fd fee2 	bl	8007994 <local_convolve_HWC_q7_nonsquare>
		return NN_SUCCESS;
 8009bd0:	2300      	movs	r3, #0
	}
#endif // end of CHW/HWC
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3740      	adds	r7, #64	; 0x40
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009bdc <Dense>:

	return (nnom_layer_t *)layer;
}

nnom_layer_t *Dense(size_t output_unit, const nnom_weight_t *w, const nnom_bias_t *b)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b08a      	sub	sp, #40	; 0x28
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	60f8      	str	r0, [r7, #12]
 8009be4:	60b9      	str	r1, [r7, #8]
 8009be6:	607a      	str	r2, [r7, #4]
	nnom_dense_layer_t *layer;
	nnom_buf_t *comp;
	nnom_layer_io_t *in, *out;

	// apply a block memory for all the sub handles.
	size_t mem_size = sizeof(nnom_dense_layer_t) + sizeof(nnom_layer_io_t) * 2 + sizeof(nnom_buf_t);
 8009be8:	2388      	movs	r3, #136	; 0x88
 8009bea:	627b      	str	r3, [r7, #36]	; 0x24
	layer = nnom_mem(mem_size);
 8009bec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009bee:	f7fe f87d 	bl	8007cec <nnom_mem>
 8009bf2:	6238      	str	r0, [r7, #32]
	if (layer == NULL)
 8009bf4:	6a3b      	ldr	r3, [r7, #32]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d101      	bne.n	8009bfe <Dense+0x22>
		return NULL;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	e095      	b.n	8009d2a <Dense+0x14e>

	// distribut the memory to sub handles.
	in = (void *)((uint8_t*)layer + sizeof(nnom_dense_layer_t));
 8009bfe:	6a3b      	ldr	r3, [r7, #32]
 8009c00:	3344      	adds	r3, #68	; 0x44
 8009c02:	61fb      	str	r3, [r7, #28]
	out = (void *)((uint8_t*)in + sizeof(nnom_layer_io_t));
 8009c04:	69fb      	ldr	r3, [r7, #28]
 8009c06:	331c      	adds	r3, #28
 8009c08:	61bb      	str	r3, [r7, #24]
	comp = (void *)((uint8_t*)out + sizeof(nnom_layer_io_t));
 8009c0a:	69bb      	ldr	r3, [r7, #24]
 8009c0c:	331c      	adds	r3, #28
 8009c0e:	617b      	str	r3, [r7, #20]

	// set type in layer parent
	layer->super.type = NNOM_DENSE;
 8009c10:	6a3b      	ldr	r3, [r7, #32]
 8009c12:	2208      	movs	r2, #8
 8009c14:	771a      	strb	r2, [r3, #28]
	// set buf state
	in->type = NNOM_TENSOR_BUF_TEMP;
 8009c16:	69fb      	ldr	r3, [r7, #28]
 8009c18:	2201      	movs	r2, #1
 8009c1a:	761a      	strb	r2, [r3, #24]
	out->type = NNOM_TENSOR_BUF_TEMP;
 8009c1c:	69bb      	ldr	r3, [r7, #24]
 8009c1e:	2201      	movs	r2, #1
 8009c20:	761a      	strb	r2, [r3, #24]
	comp->type = NNOM_TENSOR_BUF_TEMP;
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	2201      	movs	r2, #1
 8009c26:	721a      	strb	r2, [r3, #8]
	// put in & out on the layer.
	layer->super.in = io_init(layer, in);
 8009c28:	69f9      	ldr	r1, [r7, #28]
 8009c2a:	6a38      	ldr	r0, [r7, #32]
 8009c2c:	f7ff f8ab 	bl	8008d86 <io_init>
 8009c30:	4602      	mov	r2, r0
 8009c32:	6a3b      	ldr	r3, [r7, #32]
 8009c34:	621a      	str	r2, [r3, #32]
	layer->super.out = io_init(layer, out);
 8009c36:	69b9      	ldr	r1, [r7, #24]
 8009c38:	6a38      	ldr	r0, [r7, #32]
 8009c3a:	f7ff f8a4 	bl	8008d86 <io_init>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	6a3b      	ldr	r3, [r7, #32]
 8009c42:	625a      	str	r2, [r3, #36]	; 0x24
	layer->super.comp = comp;
 8009c44:	6a3b      	ldr	r3, [r7, #32]
 8009c46:	697a      	ldr	r2, [r7, #20]
 8009c48:	611a      	str	r2, [r3, #16]
	// set run and outshape methods
	layer->super.run = dense_run;
 8009c4a:	6a3b      	ldr	r3, [r7, #32]
 8009c4c:	4a39      	ldr	r2, [pc, #228]	; (8009d34 <Dense+0x158>)
 8009c4e:	605a      	str	r2, [r3, #4]
	layer->super.build = dense_build;
 8009c50:	6a3b      	ldr	r3, [r7, #32]
 8009c52:	4a39      	ldr	r2, [pc, #228]	; (8009d38 <Dense+0x15c>)
 8009c54:	609a      	str	r2, [r3, #8]

	// set parameters
	layer->output_unit = output_unit; // this is no longer needed. the information is contained in the weight tensor. 
 8009c56:	6a3b      	ldr	r3, [r7, #32]
 8009c58:	68fa      	ldr	r2, [r7, #12]
 8009c5a:	631a      	str	r2, [r3, #48]	; 0x30

	layer->weight = new_tensor(NNOM_QTYPE_PER_TENSOR, 2, output_unit);
 8009c5c:	68fa      	ldr	r2, [r7, #12]
 8009c5e:	2102      	movs	r1, #2
 8009c60:	2000      	movs	r0, #0
 8009c62:	f7ff f8df 	bl	8008e24 <new_tensor>
 8009c66:	4602      	mov	r2, r0
 8009c68:	6a3b      	ldr	r3, [r7, #32]
 8009c6a:	635a      	str	r2, [r3, #52]	; 0x34
	layer->bias = new_tensor(NNOM_QTYPE_PER_TENSOR, 1, output_unit);
 8009c6c:	68fa      	ldr	r2, [r7, #12]
 8009c6e:	2101      	movs	r1, #1
 8009c70:	2000      	movs	r0, #0
 8009c72:	f7ff f8d7 	bl	8008e24 <new_tensor>
 8009c76:	4602      	mov	r2, r0
 8009c78:	6a3b      	ldr	r3, [r7, #32]
 8009c7a:	639a      	str	r2, [r3, #56]	; 0x38

	// configure weight tensor manually to support new tensor-based backends. 
	// needs to be very careful
	{
		// config weight 
		nnom_shape_data_t dim[2] = {0, output_unit}; // the first dim doesnt matter here. will be file in later. 
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	823b      	strh	r3, [r7, #16]
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	827b      	strh	r3, [r7, #18]
		*(layer->weight->q_offset) = 0;			// we have no support of offset here
 8009c86:	6a3b      	ldr	r3, [r7, #32]
 8009c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	601a      	str	r2, [r3, #0]
		*(layer->weight->q_dec) = 0;		// this is not even correct
 8009c90:	6a3b      	ldr	r3, [r7, #32]
 8009c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c94:	689b      	ldr	r3, [r3, #8]
 8009c96:	2200      	movs	r2, #0
 8009c98:	601a      	str	r2, [r3, #0]
		layer->weight->p_data = (void*)w->p_value;
 8009c9a:	6a3b      	ldr	r3, [r7, #32]
 8009c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c9e:	68ba      	ldr	r2, [r7, #8]
 8009ca0:	6812      	ldr	r2, [r2, #0]
 8009ca2:	601a      	str	r2, [r3, #0]
		layer->weight->bitwidth = 8;
 8009ca4:	6a3b      	ldr	r3, [r7, #32]
 8009ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ca8:	2208      	movs	r2, #8
 8009caa:	749a      	strb	r2, [r3, #18]
		layer->weight->qtype = NNOM_QTYPE_PER_TENSOR;
 8009cac:	6a3b      	ldr	r3, [r7, #32]
 8009cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	741a      	strb	r2, [r3, #16]
		memcpy(layer->weight->dim, dim, layer->weight->num_dim * sizeof(nnom_shape_data_t));
 8009cb4:	6a3b      	ldr	r3, [r7, #32]
 8009cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cb8:	6858      	ldr	r0, [r3, #4]
 8009cba:	6a3b      	ldr	r3, [r7, #32]
 8009cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cbe:	7c5b      	ldrb	r3, [r3, #17]
 8009cc0:	005a      	lsls	r2, r3, #1
 8009cc2:	f107 0310 	add.w	r3, r7, #16
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	f000 fc58 	bl	800a57c <memcpy>

		// config bias 
		dim[0] = output_unit;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	b29b      	uxth	r3, r3
 8009cd0:	823b      	strh	r3, [r7, #16]
		*(layer->bias->q_offset) = 0;			// we have no support of offset here
 8009cd2:	6a3b      	ldr	r3, [r7, #32]
 8009cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cd6:	68db      	ldr	r3, [r3, #12]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	601a      	str	r2, [r3, #0]
		*(layer->bias->q_dec) = 0;		// this is not even correct
 8009cdc:	6a3b      	ldr	r3, [r7, #32]
 8009cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ce0:	689b      	ldr	r3, [r3, #8]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	601a      	str	r2, [r3, #0]
		layer->bias->p_data = (void*)b->p_value;
 8009ce6:	6a3b      	ldr	r3, [r7, #32]
 8009ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cea:	687a      	ldr	r2, [r7, #4]
 8009cec:	6812      	ldr	r2, [r2, #0]
 8009cee:	601a      	str	r2, [r3, #0]
		layer->bias->bitwidth = 8;
 8009cf0:	6a3b      	ldr	r3, [r7, #32]
 8009cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cf4:	2208      	movs	r2, #8
 8009cf6:	749a      	strb	r2, [r3, #18]
		layer->weight->qtype = NNOM_QTYPE_PER_TENSOR;
 8009cf8:	6a3b      	ldr	r3, [r7, #32]
 8009cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	741a      	strb	r2, [r3, #16]
		memcpy(layer->bias->dim, dim, layer->bias->num_dim * sizeof(nnom_shape_data_t));
 8009d00:	6a3b      	ldr	r3, [r7, #32]
 8009d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d04:	6858      	ldr	r0, [r3, #4]
 8009d06:	6a3b      	ldr	r3, [r7, #32]
 8009d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d0a:	7c5b      	ldrb	r3, [r3, #17]
 8009d0c:	005a      	lsls	r2, r3, #1
 8009d0e:	f107 0310 	add.w	r3, r7, #16
 8009d12:	4619      	mov	r1, r3
 8009d14:	f000 fc32 	bl	800a57c <memcpy>
	}

	// set output shifts
	layer->output_rshift = (nnom_qformat_param_t *)&w->shift;
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	1d1a      	adds	r2, r3, #4
 8009d1c:	6a3b      	ldr	r3, [r7, #32]
 8009d1e:	63da      	str	r2, [r3, #60]	; 0x3c
	layer->bias_lshift = (nnom_qformat_param_t *)&b->shift;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	1d1a      	adds	r2, r3, #4
 8009d24:	6a3b      	ldr	r3, [r7, #32]
 8009d26:	641a      	str	r2, [r3, #64]	; 0x40

	return (nnom_layer_t *)layer;
 8009d28:	6a3b      	ldr	r3, [r7, #32]
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3728      	adds	r7, #40	; 0x28
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop
 8009d34:	08009de5 	.word	0x08009de5
 8009d38:	08009d3d 	.word	0x08009d3d

08009d3c <dense_build>:

nnom_status_t dense_build(nnom_layer_t *layer)
{
 8009d3c:	b590      	push	{r4, r7, lr}
 8009d3e:	b087      	sub	sp, #28
 8009d40:	af02      	add	r7, sp, #8
 8009d42:	6078      	str	r0, [r7, #4]
	nnom_dense_layer_t *cl = (nnom_dense_layer_t *)layer;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	60fb      	str	r3, [r7, #12]

	// get the tensor from last layer's output
	layer->in->tensor = layer->in->hook.io->tensor;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6a1b      	ldr	r3, [r3, #32]
 8009d4c:	681a      	ldr	r2, [r3, #0]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6a1b      	ldr	r3, [r3, #32]
 8009d52:	68d2      	ldr	r2, [r2, #12]
 8009d54:	60da      	str	r2, [r3, #12]

	// create new tensor for output
	layer->out->tensor = new_tensor(NNOM_QTYPE_PER_TENSOR, 1, tensor_get_num_channel(layer->in->tensor));
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6a1b      	ldr	r3, [r3, #32]
 8009d5a:	68db      	ldr	r3, [r3, #12]
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f7ff f84c 	bl	8008dfa <tensor_get_num_channel>
 8009d62:	4602      	mov	r2, r0
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009d68:	2101      	movs	r1, #1
 8009d6a:	2000      	movs	r0, #0
 8009d6c:	f7ff f85a 	bl	8008e24 <new_tensor>
 8009d70:	4603      	mov	r3, r0
 8009d72:	60e3      	str	r3, [r4, #12]
	// setup new tensor
	nnom_shape_data_t dim[1] = {cl->output_unit};
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d78:	b29b      	uxth	r3, r3
 8009d7a:	813b      	strh	r3, [r7, #8]
	tensor_set_attr(layer->out->tensor, cl->weight->q_dec, cl->weight->q_offset, dim, 1, 8); // test, this is not correct
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d80:	68d8      	ldr	r0, [r3, #12]
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d86:	6899      	ldr	r1, [r3, #8]
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d8c:	68da      	ldr	r2, [r3, #12]
 8009d8e:	f107 0408 	add.w	r4, r7, #8
 8009d92:	2308      	movs	r3, #8
 8009d94:	9301      	str	r3, [sp, #4]
 8009d96:	2301      	movs	r3, #1
 8009d98:	9300      	str	r3, [sp, #0]
 8009d9a:	4623      	mov	r3, r4
 8009d9c:	f7ff f8b5 	bl	8008f0a <tensor_set_attr>

	// vec_buffer size: dim_vec (*2, q7->q15) ? I am not sure this is right
	layer->comp->size = tensor_size(layer->in->tensor)*2;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6a1b      	ldr	r3, [r3, #32]
 8009da4:	68db      	ldr	r3, [r3, #12]
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7fe fffc 	bl	8008da4 <tensor_size>
 8009dac:	4602      	mov	r2, r0
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	691b      	ldr	r3, [r3, #16]
 8009db2:	0052      	lsls	r2, r2, #1
 8009db4:	605a      	str	r2, [r3, #4]

	// computational cost: In * out
	layer->stat.macc = tensor_size(layer->in->tensor) * tensor_size(layer->out->tensor);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6a1b      	ldr	r3, [r3, #32]
 8009dba:	68db      	ldr	r3, [r3, #12]
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f7fe fff1 	bl	8008da4 <tensor_size>
 8009dc2:	4604      	mov	r4, r0
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc8:	68db      	ldr	r3, [r3, #12]
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7fe ffea 	bl	8008da4 <tensor_size>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	fb03 f204 	mul.w	r2, r3, r4
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	629a      	str	r2, [r3, #40]	; 0x28
	return NN_SUCCESS;
 8009dda:	2300      	movs	r3, #0
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3714      	adds	r7, #20
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd90      	pop	{r4, r7, pc}

08009de4 <dense_run>:

	return NN_SUCCESS;
}

nnom_status_t dense_run(nnom_layer_t *layer)
{
 8009de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009de6:	b08d      	sub	sp, #52	; 0x34
 8009de8:	af06      	add	r7, sp, #24
 8009dea:	6078      	str	r0, [r7, #4]
	nnom_status_t result = NN_SUCCESS;
 8009dec:	2300      	movs	r3, #0
 8009dee:	75fb      	strb	r3, [r7, #23]
	nnom_dense_layer_t *cl = (nnom_dense_layer_t *)(layer);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	613b      	str	r3, [r7, #16]
	nnom_qformat_param_t bias_shift = cl->bias_lshift[0];			// this is not correct but a temporary fix solution for backward compatibility.
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	60fb      	str	r3, [r7, #12]
	nnom_qformat_param_t output_shift = cl->output_rshift[0];
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	60bb      	str	r3, [r7, #8]
		result = (nnom_status_t)arm_fully_connected_q7_opt(
	#else
		local_fully_connected_q7_opt(
	#endif
#endif
			layer->in->tensor->p_data,
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6a1b      	ldr	r3, [r3, #32]
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	681d      	ldr	r5, [r3, #0]
			cl->weight->p_data,
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e10:	681e      	ldr	r6, [r3, #0]
			tensor_size(layer->in->tensor), layer->out->tensor->dim[0],
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6a1b      	ldr	r3, [r3, #32]
 8009e16:	68db      	ldr	r3, [r3, #12]
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f7fe ffc3 	bl	8008da4 <tensor_size>
 8009e1e:	4603      	mov	r3, r0
		result = (nnom_status_t)arm_fully_connected_q7_opt(
 8009e20:	fa1f fc83 	uxth.w	ip, r3
			tensor_size(layer->in->tensor), layer->out->tensor->dim[0],
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e28:	68db      	ldr	r3, [r3, #12]
 8009e2a:	685b      	ldr	r3, [r3, #4]
		result = (nnom_status_t)arm_fully_connected_q7_opt(
 8009e2c:	f8b3 e000 	ldrh.w	lr, [r3]
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	b29b      	uxth	r3, r3
 8009e34:	68ba      	ldr	r2, [r7, #8]
 8009e36:	b292      	uxth	r2, r2
			bias_shift, output_shift,
			cl->bias->p_data,
 8009e38:	6939      	ldr	r1, [r7, #16]
 8009e3a:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8009e3c:	6809      	ldr	r1, [r1, #0]
			layer->out->tensor->p_data, (q15_t *)(layer->comp->mem->blk));
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8009e42:	68c0      	ldr	r0, [r0, #12]
 8009e44:	6800      	ldr	r0, [r0, #0]
 8009e46:	687c      	ldr	r4, [r7, #4]
 8009e48:	6924      	ldr	r4, [r4, #16]
 8009e4a:	6824      	ldr	r4, [r4, #0]
 8009e4c:	6824      	ldr	r4, [r4, #0]
		result = (nnom_status_t)arm_fully_connected_q7_opt(
 8009e4e:	9404      	str	r4, [sp, #16]
 8009e50:	9003      	str	r0, [sp, #12]
 8009e52:	9102      	str	r1, [sp, #8]
 8009e54:	9201      	str	r2, [sp, #4]
 8009e56:	9300      	str	r3, [sp, #0]
 8009e58:	4673      	mov	r3, lr
 8009e5a:	4662      	mov	r2, ip
 8009e5c:	4631      	mov	r1, r6
 8009e5e:	4628      	mov	r0, r5
 8009e60:	f7fb f8cd 	bl	8004ffe <arm_fully_connected_q7_opt>
 8009e64:	4603      	mov	r3, r0
 8009e66:	75fb      	strb	r3, [r7, #23]


	return result;
 8009e68:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	371c      	adds	r7, #28
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009e74 <Input>:
	tensor_set_attr_v(layer->super.in->tensor, layer->dec_bit, 0, dim, sizeof(dim)/sizeof(nnom_shape_data_t), 8);
	return (nnom_layer_t *)layer;
}

nnom_layer_t *Input(nnom_3d_shape_t input_shape, void *p_buf)
{
 8009e74:	b590      	push	{r4, r7, lr}
 8009e76:	b08d      	sub	sp, #52	; 0x34
 8009e78:	af02      	add	r7, sp, #8
 8009e7a:	f107 0308 	add.w	r3, r7, #8
 8009e7e:	e883 0003 	stmia.w	r3, {r0, r1}
 8009e82:	607a      	str	r2, [r7, #4]
	nnom_io_layer_t *layer;
	nnom_layer_io_t *in, *out;

	// apply a block memory for all the sub handles.
	layer = nnom_mem(sizeof(nnom_io_layer_t) + sizeof(nnom_layer_io_t) * 2);
 8009e84:	2078      	movs	r0, #120	; 0x78
 8009e86:	f7fd ff31 	bl	8007cec <nnom_mem>
 8009e8a:	6278      	str	r0, [r7, #36]	; 0x24
	if (layer == NULL)
 8009e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d101      	bne.n	8009e96 <Input+0x22>
		return NULL;
 8009e92:	2300      	movs	r3, #0
 8009e94:	e051      	b.n	8009f3a <Input+0xc6>

	// distribut the memory to sub handles.
	in = (void *)((uint8_t*)layer + sizeof(nnom_io_layer_t));
 8009e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e98:	3340      	adds	r3, #64	; 0x40
 8009e9a:	623b      	str	r3, [r7, #32]
	out = (void *)((uint8_t*)in + sizeof(nnom_layer_io_t));
 8009e9c:	6a3b      	ldr	r3, [r7, #32]
 8009e9e:	331c      	adds	r3, #28
 8009ea0:	61fb      	str	r3, [r7, #28]

	// set type in layer parent
	layer->super.type = NNOM_INPUT;
 8009ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea4:	2202      	movs	r2, #2
 8009ea6:	771a      	strb	r2, [r3, #28]
	layer->super.run = input_run;
 8009ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eaa:	4a26      	ldr	r2, [pc, #152]	; (8009f44 <Input+0xd0>)
 8009eac:	605a      	str	r2, [r3, #4]
	layer->super.build = input_build;
 8009eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb0:	4a25      	ldr	r2, [pc, #148]	; (8009f48 <Input+0xd4>)
 8009eb2:	609a      	str	r2, [r3, #8]
	// set buf state
	in->type = NNOM_TENSOR_BUF_TEMP;
 8009eb4:	6a3b      	ldr	r3, [r7, #32]
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	761a      	strb	r2, [r3, #24]
	out->type = NNOM_TENSOR_BUF_NULL;
 8009eba:	69fb      	ldr	r3, [r7, #28]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	761a      	strb	r2, [r3, #24]
	// put in & out on the layer.
	layer->super.in = io_init(layer, in);
 8009ec0:	6a39      	ldr	r1, [r7, #32]
 8009ec2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ec4:	f7fe ff5f 	bl	8008d86 <io_init>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ecc:	621a      	str	r2, [r3, #32]
	layer->super.out = io_init(layer, out);
 8009ece:	69f9      	ldr	r1, [r7, #28]
 8009ed0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ed2:	f7fe ff58 	bl	8008d86 <io_init>
 8009ed6:	4602      	mov	r2, r0
 8009ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eda:	625a      	str	r2, [r3, #36]	; 0x24

	// set parameters
	layer->shape = input_shape;
 8009edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ede:	3330      	adds	r3, #48	; 0x30
 8009ee0:	f107 0208 	add.w	r2, r7, #8
 8009ee4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009ee8:	6018      	str	r0, [r3, #0]
 8009eea:	3304      	adds	r3, #4
 8009eec:	8019      	strh	r1, [r3, #0]
	layer->buf = p_buf;
 8009eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef0:	687a      	ldr	r2, [r7, #4]
 8009ef2:	63da      	str	r2, [r3, #60]	; 0x3c
	layer->dec_bit = 7;
 8009ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef6:	2207      	movs	r2, #7
 8009ef8:	639a      	str	r2, [r3, #56]	; 0x38

	// experimental: fixed input dim to 3
	// input normally dont have a tensor, so we create one to store the initial data. 
	nnom_shape_data_t dim[3] = { input_shape.h, input_shape.w, input_shape.c };
 8009efa:	893b      	ldrh	r3, [r7, #8]
 8009efc:	82bb      	strh	r3, [r7, #20]
 8009efe:	897b      	ldrh	r3, [r7, #10]
 8009f00:	82fb      	strh	r3, [r7, #22]
 8009f02:	89bb      	ldrh	r3, [r7, #12]
 8009f04:	833b      	strh	r3, [r7, #24]
	layer->super.in->tensor = new_tensor(NNOM_QTYPE_PER_TENSOR, 3, input_shape.c);
 8009f06:	89bb      	ldrh	r3, [r7, #12]
 8009f08:	461a      	mov	r2, r3
 8009f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f0c:	6a1c      	ldr	r4, [r3, #32]
 8009f0e:	2103      	movs	r1, #3
 8009f10:	2000      	movs	r0, #0
 8009f12:	f7fe ff87 	bl	8008e24 <new_tensor>
 8009f16:	4603      	mov	r3, r0
 8009f18:	60e3      	str	r3, [r4, #12]
	tensor_set_attr_v(layer->super.in->tensor, layer->dec_bit, 0, dim, sizeof(dim)/sizeof(nnom_shape_data_t), 8);
 8009f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f1c:	6a1b      	ldr	r3, [r3, #32]
 8009f1e:	68d8      	ldr	r0, [r3, #12]
 8009f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f22:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8009f24:	f107 0214 	add.w	r2, r7, #20
 8009f28:	2308      	movs	r3, #8
 8009f2a:	9301      	str	r3, [sp, #4]
 8009f2c:	2303      	movs	r3, #3
 8009f2e:	9300      	str	r3, [sp, #0]
 8009f30:	4613      	mov	r3, r2
 8009f32:	2200      	movs	r2, #0
 8009f34:	f7fe ffc6 	bl	8008ec4 <tensor_set_attr_v>
	return (nnom_layer_t *)layer;
 8009f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	372c      	adds	r7, #44	; 0x2c
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd90      	pop	{r4, r7, pc}
 8009f42:	bf00      	nop
 8009f44:	08009f9b 	.word	0x08009f9b
 8009f48:	08009f4d 	.word	0x08009f4d

08009f4c <input_build>:

nnom_status_t input_build(nnom_layer_t* layer)
{
 8009f4c:	b5b0      	push	{r4, r5, r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
	// the input tensor of inputlayer has assigned previously 

	// output tensor
	// 1. allocate a new tensor for output
	// 2. set the same dim, qfmt to the new tensor.
	layer->out->tensor = new_tensor(NNOM_QTYPE_PER_TENSOR, layer->in->tensor->num_dim, tensor_get_num_channel(layer->in->tensor));
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6a1b      	ldr	r3, [r3, #32]
 8009f58:	68db      	ldr	r3, [r3, #12]
 8009f5a:	7c5b      	ldrb	r3, [r3, #17]
 8009f5c:	461d      	mov	r5, r3
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6a1b      	ldr	r3, [r3, #32]
 8009f62:	68db      	ldr	r3, [r3, #12]
 8009f64:	4618      	mov	r0, r3
 8009f66:	f7fe ff48 	bl	8008dfa <tensor_get_num_channel>
 8009f6a:	4602      	mov	r2, r0
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009f70:	4629      	mov	r1, r5
 8009f72:	2000      	movs	r0, #0
 8009f74:	f7fe ff56 	bl	8008e24 <new_tensor>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	60e3      	str	r3, [r4, #12]
	tensor_cpy_attr(layer->out->tensor, layer->in->tensor);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f80:	68da      	ldr	r2, [r3, #12]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6a1b      	ldr	r3, [r3, #32]
 8009f86:	68db      	ldr	r3, [r3, #12]
 8009f88:	4619      	mov	r1, r3
 8009f8a:	4610      	mov	r0, r2
 8009f8c:	f7fe fff4 	bl	8008f78 <tensor_cpy_attr>

	// now this build has passed the input tensors (shapes, formats) to the new tensors. 
	return NN_SUCCESS;
 8009f90:	2300      	movs	r3, #0
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3708      	adds	r7, #8
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bdb0      	pop	{r4, r5, r7, pc}

08009f9a <input_run>:


nnom_status_t input_run(nnom_layer_t *layer)
{
 8009f9a:	b5b0      	push	{r4, r5, r7, lr}
 8009f9c:	b084      	sub	sp, #16
 8009f9e:	af00      	add	r7, sp, #0
 8009fa0:	6078      	str	r0, [r7, #4]
	nnom_io_layer_t *cl = (nnom_io_layer_t *)layer;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	60fb      	str	r3, [r7, #12]
#ifdef NNOM_USING_CHW
	//tensor_hwc2chw_q7(layer->out->tensor, layer->in->tensor); 	// this is not correct. both in and out tensor is the same tensor. 
	nnom_3d_shape_t shape = {layer->in->tensor->dim[0], layer->in->tensor->dim[1], layer->in->tensor->dim[2]};
	hwc2chw_q7(shape, cl->buf, layer->in->tensor->p_data);
#else
	memcpy(layer->in->tensor->p_data, cl->buf, tensor_size(layer->in->tensor));
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6a1b      	ldr	r3, [r3, #32]
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	681c      	ldr	r4, [r3, #0]
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6a1b      	ldr	r3, [r3, #32]
 8009fb6:	68db      	ldr	r3, [r3, #12]
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f7fe fef3 	bl	8008da4 <tensor_size>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	461a      	mov	r2, r3
 8009fc2:	4629      	mov	r1, r5
 8009fc4:	4620      	mov	r0, r4
 8009fc6:	f000 fad9 	bl	800a57c <memcpy>
#endif
	return NN_SUCCESS;
 8009fca:	2300      	movs	r3, #0
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3710      	adds	r7, #16
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bdb0      	pop	{r4, r5, r7, pc}

08009fd4 <MaxPool>:
		layer->config = (void*) config;
	return layer;
}

nnom_layer_t *MaxPool(nnom_3d_shape_t k, nnom_3d_shape_t s, nnom_padding_t pad_type)
{
 8009fd4:	b590      	push	{r4, r7, lr}
 8009fd6:	b08b      	sub	sp, #44	; 0x2c
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	f107 0408 	add.w	r4, r7, #8
 8009fde:	e884 0003 	stmia.w	r4, {r0, r1}
 8009fe2:	4639      	mov	r1, r7
 8009fe4:	e881 000c 	stmia.w	r1, {r2, r3}
	nnom_maxpool_layer_t *layer;
	nnom_buf_t *comp;
	nnom_layer_io_t *in, *out;

	// apply a block memory for all the sub handles.
	size_t mem_size = sizeof(nnom_maxpool_layer_t) + sizeof(nnom_layer_io_t) * 2 + sizeof(nnom_buf_t);
 8009fe8:	238c      	movs	r3, #140	; 0x8c
 8009fea:	627b      	str	r3, [r7, #36]	; 0x24
	layer = nnom_mem(mem_size);
 8009fec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009fee:	f7fd fe7d 	bl	8007cec <nnom_mem>
 8009ff2:	6238      	str	r0, [r7, #32]
	if (layer == NULL)
 8009ff4:	6a3b      	ldr	r3, [r7, #32]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d101      	bne.n	8009ffe <MaxPool+0x2a>
		return NULL;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	e065      	b.n	800a0ca <MaxPool+0xf6>

	// distribut the memory to sub handles.
	in = (void *)((uint8_t*)layer + sizeof(nnom_maxpool_layer_t));
 8009ffe:	6a3b      	ldr	r3, [r7, #32]
 800a000:	3348      	adds	r3, #72	; 0x48
 800a002:	61fb      	str	r3, [r7, #28]
	out = (void *)((uint8_t*)in + sizeof(nnom_layer_io_t));
 800a004:	69fb      	ldr	r3, [r7, #28]
 800a006:	331c      	adds	r3, #28
 800a008:	61bb      	str	r3, [r7, #24]
	comp = (void *)((uint8_t*)out + sizeof(nnom_layer_io_t));
 800a00a:	69bb      	ldr	r3, [r7, #24]
 800a00c:	331c      	adds	r3, #28
 800a00e:	617b      	str	r3, [r7, #20]

	// set type in layer parent
	layer->super.type = NNOM_MAXPOOL;
 800a010:	6a3b      	ldr	r3, [r7, #32]
 800a012:	2212      	movs	r2, #18
 800a014:	771a      	strb	r2, [r3, #28]
	layer->super.run = maxpool_run;
 800a016:	6a3b      	ldr	r3, [r7, #32]
 800a018:	4a2e      	ldr	r2, [pc, #184]	; (800a0d4 <MaxPool+0x100>)
 800a01a:	605a      	str	r2, [r3, #4]
	layer->super.build = maxpool_build;
 800a01c:	6a3b      	ldr	r3, [r7, #32]
 800a01e:	4a2e      	ldr	r2, [pc, #184]	; (800a0d8 <MaxPool+0x104>)
 800a020:	609a      	str	r2, [r3, #8]
	// set buf state
	in->type = NNOM_TENSOR_BUF_TEMP;
 800a022:	69fb      	ldr	r3, [r7, #28]
 800a024:	2201      	movs	r2, #1
 800a026:	761a      	strb	r2, [r3, #24]
	out->type = NNOM_TENSOR_BUF_TEMP;
 800a028:	69bb      	ldr	r3, [r7, #24]
 800a02a:	2201      	movs	r2, #1
 800a02c:	761a      	strb	r2, [r3, #24]
	comp->type = NNOM_TENSOR_BUF_TEMP;
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	2201      	movs	r2, #1
 800a032:	721a      	strb	r2, [r3, #8]
	// put in & out on the layer.
	layer->super.in = io_init(layer, in);
 800a034:	69f9      	ldr	r1, [r7, #28]
 800a036:	6a38      	ldr	r0, [r7, #32]
 800a038:	f7fe fea5 	bl	8008d86 <io_init>
 800a03c:	4602      	mov	r2, r0
 800a03e:	6a3b      	ldr	r3, [r7, #32]
 800a040:	621a      	str	r2, [r3, #32]
	layer->super.out = io_init(layer, out);
 800a042:	69b9      	ldr	r1, [r7, #24]
 800a044:	6a38      	ldr	r0, [r7, #32]
 800a046:	f7fe fe9e 	bl	8008d86 <io_init>
 800a04a:	4602      	mov	r2, r0
 800a04c:	6a3b      	ldr	r3, [r7, #32]
 800a04e:	625a      	str	r2, [r3, #36]	; 0x24
	layer->super.comp = comp;
 800a050:	6a3b      	ldr	r3, [r7, #32]
 800a052:	697a      	ldr	r2, [r7, #20]
 800a054:	611a      	str	r2, [r3, #16]

	// set parameters
	layer->kernel = k;
 800a056:	6a3b      	ldr	r3, [r7, #32]
 800a058:	3330      	adds	r3, #48	; 0x30
 800a05a:	f107 0208 	add.w	r2, r7, #8
 800a05e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a062:	6018      	str	r0, [r3, #0]
 800a064:	3304      	adds	r3, #4
 800a066:	8019      	strh	r1, [r3, #0]
	layer->stride = s;
 800a068:	6a3b      	ldr	r3, [r7, #32]
 800a06a:	3336      	adds	r3, #54	; 0x36
 800a06c:	463a      	mov	r2, r7
 800a06e:	6810      	ldr	r0, [r2, #0]
 800a070:	6018      	str	r0, [r3, #0]
 800a072:	8892      	ldrh	r2, [r2, #4]
 800a074:	809a      	strh	r2, [r3, #4]
	layer->padding_type = pad_type;
 800a076:	6a3b      	ldr	r3, [r7, #32]
 800a078:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a07c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

	// padding
	if (layer->padding_type == PADDING_SAME)
 800a080:	6a3b      	ldr	r3, [r7, #32]
 800a082:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a086:	2b01      	cmp	r3, #1
 800a088:	d114      	bne.n	800a0b4 <MaxPool+0xe0>
	{
		layer->pad.h = (k.h - 1) / 2;
 800a08a:	893b      	ldrh	r3, [r7, #8]
 800a08c:	3b01      	subs	r3, #1
 800a08e:	0fda      	lsrs	r2, r3, #31
 800a090:	4413      	add	r3, r2
 800a092:	105b      	asrs	r3, r3, #1
 800a094:	b29a      	uxth	r2, r3
 800a096:	6a3b      	ldr	r3, [r7, #32]
 800a098:	879a      	strh	r2, [r3, #60]	; 0x3c
		layer->pad.w = (k.w - 1) / 2;
 800a09a:	897b      	ldrh	r3, [r7, #10]
 800a09c:	3b01      	subs	r3, #1
 800a09e:	0fda      	lsrs	r2, r3, #31
 800a0a0:	4413      	add	r3, r2
 800a0a2:	105b      	asrs	r3, r3, #1
 800a0a4:	b29a      	uxth	r2, r3
 800a0a6:	6a3b      	ldr	r3, [r7, #32]
 800a0a8:	87da      	strh	r2, [r3, #62]	; 0x3e
		layer->pad.c = 1; // no meaning
 800a0aa:	6a3b      	ldr	r3, [r7, #32]
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800a0b2:	e009      	b.n	800a0c8 <MaxPool+0xf4>
	}
	else
	{
		layer->pad.h = 0;
 800a0b4:	6a3b      	ldr	r3, [r7, #32]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	879a      	strh	r2, [r3, #60]	; 0x3c
		layer->pad.w = 0;
 800a0ba:	6a3b      	ldr	r3, [r7, #32]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	87da      	strh	r2, [r3, #62]	; 0x3e
		layer->pad.c = 0;
 800a0c0:	6a3b      	ldr	r3, [r7, #32]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	}
	return (nnom_layer_t *)layer;
 800a0c8:	6a3b      	ldr	r3, [r7, #32]
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	372c      	adds	r7, #44	; 0x2c
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd90      	pop	{r4, r7, pc}
 800a0d2:	bf00      	nop
 800a0d4:	0800a22d 	.word	0x0800a22d
 800a0d8:	0800a0dd 	.word	0x0800a0dd

0800a0dc <maxpool_build>:

nnom_status_t maxpool_build(nnom_layer_t *layer)
{
 800a0dc:	b5b0      	push	{r4, r5, r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
	nnom_maxpool_layer_t *cl = (nnom_maxpool_layer_t *)layer;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	60fb      	str	r3, [r7, #12]

	// get the tensor from last layer's output
	layer->in->tensor = layer->in->hook.io->tensor;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6a1b      	ldr	r3, [r3, #32]
 800a0ec:	681a      	ldr	r2, [r3, #0]
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6a1b      	ldr	r3, [r3, #32]
 800a0f2:	68d2      	ldr	r2, [r2, #12]
 800a0f4:	60da      	str	r2, [r3, #12]

	// create new tensor for output
	layer->out->tensor = new_tensor(NNOM_QTYPE_PER_TENSOR, layer->in->tensor->num_dim, tensor_get_num_channel(layer->in->tensor));
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6a1b      	ldr	r3, [r3, #32]
 800a0fa:	68db      	ldr	r3, [r3, #12]
 800a0fc:	7c5b      	ldrb	r3, [r3, #17]
 800a0fe:	461d      	mov	r5, r3
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6a1b      	ldr	r3, [r3, #32]
 800a104:	68db      	ldr	r3, [r3, #12]
 800a106:	4618      	mov	r0, r3
 800a108:	f7fe fe77 	bl	8008dfa <tensor_get_num_channel>
 800a10c:	4602      	mov	r2, r0
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a112:	4629      	mov	r1, r5
 800a114:	2000      	movs	r0, #0
 800a116:	f7fe fe85 	bl	8008e24 <new_tensor>
 800a11a:	4603      	mov	r3, r0
 800a11c:	60e3      	str	r3, [r4, #12]
	// copy then change later. 
	tensor_cpy_attr(layer->out->tensor, layer->in->tensor);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a122:	68da      	ldr	r2, [r3, #12]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6a1b      	ldr	r3, [r3, #32]
 800a128:	68db      	ldr	r3, [r3, #12]
 800a12a:	4619      	mov	r1, r3
 800a12c:	4610      	mov	r0, r2
 800a12e:	f7fe ff23 	bl	8008f78 <tensor_cpy_attr>

	// now we set up the tensor shape, always HWC format
	if (cl->padding_type == PADDING_SAME)
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a138:	2b01      	cmp	r3, #1
 800a13a:	d135      	bne.n	800a1a8 <maxpool_build+0xcc>
	{
		layer->out->tensor->dim[0] = NN_CEILIF(layer->in->tensor->dim[0], cl->stride.h);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6a1b      	ldr	r3, [r3, #32]
 800a140:	68db      	ldr	r3, [r3, #12]
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	881b      	ldrh	r3, [r3, #0]
 800a146:	461a      	mov	r2, r3
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a14c:	4413      	add	r3, r2
 800a14e:	3b01      	subs	r3, #1
 800a150:	68fa      	ldr	r2, [r7, #12]
 800a152:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 800a154:	fb93 f2f2 	sdiv	r2, r3, r2
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a15c:	68db      	ldr	r3, [r3, #12]
 800a15e:	685b      	ldr	r3, [r3, #4]
 800a160:	b292      	uxth	r2, r2
 800a162:	801a      	strh	r2, [r3, #0]
		layer->out->tensor->dim[1] = NN_CEILIF(layer->in->tensor->dim[1], cl->stride.w);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6a1b      	ldr	r3, [r3, #32]
 800a168:	68db      	ldr	r3, [r3, #12]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	3302      	adds	r3, #2
 800a16e:	881b      	ldrh	r3, [r3, #0]
 800a170:	461a      	mov	r2, r3
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800a176:	4413      	add	r3, r2
 800a178:	3b01      	subs	r3, #1
 800a17a:	68fa      	ldr	r2, [r7, #12]
 800a17c:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800a17e:	fb93 f2f2 	sdiv	r2, r3, r2
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a186:	68db      	ldr	r3, [r3, #12]
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	3302      	adds	r3, #2
 800a18c:	b292      	uxth	r2, r2
 800a18e:	801a      	strh	r2, [r3, #0]
		layer->out->tensor->dim[2] = layer->in->tensor->dim[2]; // channel stays the same
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6a1b      	ldr	r3, [r3, #32]
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	685a      	ldr	r2, [r3, #4]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a19c:	68db      	ldr	r3, [r3, #12]
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	3304      	adds	r3, #4
 800a1a2:	8892      	ldrh	r2, [r2, #4]
 800a1a4:	801a      	strh	r2, [r3, #0]
 800a1a6:	e03c      	b.n	800a222 <maxpool_build+0x146>
	}
	else
	{
		layer->out->tensor->dim[0] = NN_CEILIF(layer->in->tensor->dim[0] - cl->kernel.h + 1, cl->stride.h);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6a1b      	ldr	r3, [r3, #32]
 800a1ac:	68db      	ldr	r3, [r3, #12]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	881b      	ldrh	r3, [r3, #0]
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800a1b8:	1ad3      	subs	r3, r2, r3
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	68fa      	ldr	r2, [r7, #12]
 800a1be:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 800a1c0:	4413      	add	r3, r2
 800a1c2:	3b01      	subs	r3, #1
 800a1c4:	68fa      	ldr	r2, [r7, #12]
 800a1c6:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 800a1c8:	fb93 f2f2 	sdiv	r2, r3, r2
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d0:	68db      	ldr	r3, [r3, #12]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	b292      	uxth	r2, r2
 800a1d6:	801a      	strh	r2, [r3, #0]
		layer->out->tensor->dim[1] = NN_CEILIF(layer->in->tensor->dim[1] - cl->kernel.w + 1, cl->stride.w);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6a1b      	ldr	r3, [r3, #32]
 800a1dc:	68db      	ldr	r3, [r3, #12]
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	3302      	adds	r3, #2
 800a1e2:	881b      	ldrh	r3, [r3, #0]
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a1ea:	1ad3      	subs	r3, r2, r3
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	68fa      	ldr	r2, [r7, #12]
 800a1f0:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800a1f2:	4413      	add	r3, r2
 800a1f4:	3b01      	subs	r3, #1
 800a1f6:	68fa      	ldr	r2, [r7, #12]
 800a1f8:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800a1fa:	fb93 f2f2 	sdiv	r2, r3, r2
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a202:	68db      	ldr	r3, [r3, #12]
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	3302      	adds	r3, #2
 800a208:	b292      	uxth	r2, r2
 800a20a:	801a      	strh	r2, [r3, #0]
		layer->out->tensor->dim[2] = layer->in->tensor->dim[2];
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6a1b      	ldr	r3, [r3, #32]
 800a210:	68db      	ldr	r3, [r3, #12]
 800a212:	685a      	ldr	r2, [r3, #4]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a218:	68db      	ldr	r3, [r3, #12]
 800a21a:	685b      	ldr	r3, [r3, #4]
 800a21c:	3304      	adds	r3, #4
 800a21e:	8892      	ldrh	r2, [r2, #4]
 800a220:	801a      	strh	r2, [r3, #0]
	}

	return NN_SUCCESS;
 800a222:	2300      	movs	r3, #0
}
 800a224:	4618      	mov	r0, r3
 800a226:	3710      	adds	r7, #16
 800a228:	46bd      	mov	sp, r7
 800a22a:	bdb0      	pop	{r4, r5, r7, pc}

0800a22c <maxpool_run>:

nnom_status_t maxpool_run(nnom_layer_t *layer)
{
 800a22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a230:	b08e      	sub	sp, #56	; 0x38
 800a232:	af0a      	add	r7, sp, #40	; 0x28
 800a234:	6078      	str	r0, [r7, #4]
	nnom_maxpool_layer_t *cl = (nnom_maxpool_layer_t *)(layer);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	60bb      	str	r3, [r7, #8]

	uint16_t out_x, out_y;

	// if global pooling
	if(layer->out->tensor->num_dim == 1)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a23e:	68db      	ldr	r3, [r3, #12]
 800a240:	7c5b      	ldrb	r3, [r3, #17]
 800a242:	2b01      	cmp	r3, #1
 800a244:	d104      	bne.n	800a250 <maxpool_run+0x24>
	{
		out_x = 1; out_y = 1;
 800a246:	2301      	movs	r3, #1
 800a248:	81fb      	strh	r3, [r7, #14]
 800a24a:	2301      	movs	r3, #1
 800a24c:	81bb      	strh	r3, [r7, #12]
 800a24e:	e00b      	b.n	800a268 <maxpool_run+0x3c>
	}
	else // normal pooling. 
	{
		out_x = layer->out->tensor->dim[1]; //W
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a254:	68db      	ldr	r3, [r3, #12]
 800a256:	685b      	ldr	r3, [r3, #4]
 800a258:	885b      	ldrh	r3, [r3, #2]
 800a25a:	81fb      	strh	r3, [r7, #14]
		out_y = layer->out->tensor->dim[0]; //h
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a260:	68db      	ldr	r3, [r3, #12]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	881b      	ldrh	r3, [r3, #0]
 800a266:	81bb      	strh	r3, [r7, #12]
			layer->out->tensor->p_data);
#else //end of CHW
	// HWC
	#ifdef NNOM_USING_CMSIS_NN
	// 2D, square
	if (layer->in->tensor->dim[1] == layer->in->tensor->dim[0] &&
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6a1b      	ldr	r3, [r3, #32]
 800a26c:	68db      	ldr	r3, [r3, #12]
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	3302      	adds	r3, #2
 800a272:	881a      	ldrh	r2, [r3, #0]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6a1b      	ldr	r3, [r3, #32]
 800a278:	68db      	ldr	r3, [r3, #12]
 800a27a:	685b      	ldr	r3, [r3, #4]
 800a27c:	881b      	ldrh	r3, [r3, #0]
 800a27e:	429a      	cmp	r2, r3
 800a280:	d13a      	bne.n	800a2f8 <maxpool_run+0xcc>
		layer->out->tensor->dim[1] == layer->out->tensor->dim[0])
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a286:	68db      	ldr	r3, [r3, #12]
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	3302      	adds	r3, #2
 800a28c:	881a      	ldrh	r2, [r3, #0]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a292:	68db      	ldr	r3, [r3, #12]
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	881b      	ldrh	r3, [r3, #0]
	if (layer->in->tensor->dim[1] == layer->in->tensor->dim[0] &&
 800a298:	429a      	cmp	r2, r3
 800a29a:	d12d      	bne.n	800a2f8 <maxpool_run+0xcc>
	{
		arm_maxpool_q7_HWC(
			layer->in->tensor->p_data,
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6a1b      	ldr	r3, [r3, #32]
 800a2a0:	68db      	ldr	r3, [r3, #12]
 800a2a2:	681c      	ldr	r4, [r3, #0]
			layer->in->tensor->dim[1], layer->in->tensor->dim[2],
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6a1b      	ldr	r3, [r3, #32]
 800a2a8:	68db      	ldr	r3, [r3, #12]
 800a2aa:	685b      	ldr	r3, [r3, #4]
 800a2ac:	3302      	adds	r3, #2
		arm_maxpool_q7_HWC(
 800a2ae:	881d      	ldrh	r5, [r3, #0]
			layer->in->tensor->dim[1], layer->in->tensor->dim[2],
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6a1b      	ldr	r3, [r3, #32]
 800a2b4:	68db      	ldr	r3, [r3, #12]
 800a2b6:	685b      	ldr	r3, [r3, #4]
 800a2b8:	3304      	adds	r3, #4
		arm_maxpool_q7_HWC(
 800a2ba:	881e      	ldrh	r6, [r3, #0]
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	f8b3 c032 	ldrh.w	ip, [r3, #50]	; 0x32
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2c6:	68ba      	ldr	r2, [r7, #8]
 800a2c8:	8f12      	ldrh	r2, [r2, #56]	; 0x38
			cl->kernel.w, cl->pad.w, cl->stride.w,
			layer->out->tensor->dim[1],
 800a2ca:	6879      	ldr	r1, [r7, #4]
 800a2cc:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800a2ce:	68c9      	ldr	r1, [r1, #12]
 800a2d0:	6849      	ldr	r1, [r1, #4]
 800a2d2:	3102      	adds	r1, #2
		arm_maxpool_q7_HWC(
 800a2d4:	8809      	ldrh	r1, [r1, #0]
			NULL,
			layer->out->tensor->p_data);
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800a2da:	68c0      	ldr	r0, [r0, #12]
 800a2dc:	6800      	ldr	r0, [r0, #0]
		arm_maxpool_q7_HWC(
 800a2de:	9004      	str	r0, [sp, #16]
 800a2e0:	2000      	movs	r0, #0
 800a2e2:	9003      	str	r0, [sp, #12]
 800a2e4:	9102      	str	r1, [sp, #8]
 800a2e6:	9201      	str	r2, [sp, #4]
 800a2e8:	9300      	str	r3, [sp, #0]
 800a2ea:	4663      	mov	r3, ip
 800a2ec:	4632      	mov	r2, r6
 800a2ee:	4629      	mov	r1, r5
 800a2f0:	4620      	mov	r0, r4
 800a2f2:	f7fb fc5b 	bl	8005bac <arm_maxpool_q7_HWC>
 800a2f6:	e03b      	b.n	800a370 <maxpool_run+0x144>
	// none square 2D, or 1D
	else
	#endif
	{
		// CMSIS-NN does not support none-square pooling, we have to use local implementation
		local_maxpool_q7_HWC(layer->in->tensor->p_data, 				
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6a1b      	ldr	r3, [r3, #32]
 800a2fc:	68db      	ldr	r3, [r3, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	603b      	str	r3, [r7, #0]
				layer->in->tensor->dim[1], layer->in->tensor->dim[0], layer->in->tensor->dim[2],
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6a1b      	ldr	r3, [r3, #32]
 800a306:	68db      	ldr	r3, [r3, #12]
 800a308:	685b      	ldr	r3, [r3, #4]
 800a30a:	3302      	adds	r3, #2
		local_maxpool_q7_HWC(layer->in->tensor->p_data, 				
 800a30c:	f8b3 c000 	ldrh.w	ip, [r3]
				layer->in->tensor->dim[1], layer->in->tensor->dim[0], layer->in->tensor->dim[2],
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6a1b      	ldr	r3, [r3, #32]
 800a314:	68db      	ldr	r3, [r3, #12]
 800a316:	685b      	ldr	r3, [r3, #4]
		local_maxpool_q7_HWC(layer->in->tensor->p_data, 				
 800a318:	f8b3 e000 	ldrh.w	lr, [r3]
				layer->in->tensor->dim[1], layer->in->tensor->dim[0], layer->in->tensor->dim[2],
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6a1b      	ldr	r3, [r3, #32]
 800a320:	68db      	ldr	r3, [r3, #12]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	3304      	adds	r3, #4
		local_maxpool_q7_HWC(layer->in->tensor->p_data, 				
 800a326:	f8b3 8000 	ldrh.w	r8, [r3]
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a32e:	68ba      	ldr	r2, [r7, #8]
 800a330:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 800a332:	68b9      	ldr	r1, [r7, #8]
 800a334:	8fc9      	ldrh	r1, [r1, #62]	; 0x3e
 800a336:	68b8      	ldr	r0, [r7, #8]
 800a338:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
 800a33a:	68bc      	ldr	r4, [r7, #8]
 800a33c:	8f24      	ldrh	r4, [r4, #56]	; 0x38
 800a33e:	68bd      	ldr	r5, [r7, #8]
 800a340:	8eed      	ldrh	r5, [r5, #54]	; 0x36
				cl->kernel.w, cl->kernel.h, 
				cl->pad.w, cl->pad.h,
				cl->stride.w, cl->stride.h,
				out_x, out_y,
				NULL,
				layer->out->tensor->p_data);
 800a342:	687e      	ldr	r6, [r7, #4]
 800a344:	6a76      	ldr	r6, [r6, #36]	; 0x24
 800a346:	68f6      	ldr	r6, [r6, #12]
 800a348:	6836      	ldr	r6, [r6, #0]
		local_maxpool_q7_HWC(layer->in->tensor->p_data, 				
 800a34a:	9609      	str	r6, [sp, #36]	; 0x24
 800a34c:	2600      	movs	r6, #0
 800a34e:	9608      	str	r6, [sp, #32]
 800a350:	89be      	ldrh	r6, [r7, #12]
 800a352:	9607      	str	r6, [sp, #28]
 800a354:	89fe      	ldrh	r6, [r7, #14]
 800a356:	9606      	str	r6, [sp, #24]
 800a358:	9505      	str	r5, [sp, #20]
 800a35a:	9404      	str	r4, [sp, #16]
 800a35c:	9003      	str	r0, [sp, #12]
 800a35e:	9102      	str	r1, [sp, #8]
 800a360:	9201      	str	r2, [sp, #4]
 800a362:	9300      	str	r3, [sp, #0]
 800a364:	4643      	mov	r3, r8
 800a366:	4672      	mov	r2, lr
 800a368:	4661      	mov	r1, ip
 800a36a:	6838      	ldr	r0, [r7, #0]
 800a36c:	f7fd fa42 	bl	80077f4 <local_maxpool_q7_HWC>
	}
#endif // CHW/HWC
	return NN_SUCCESS;
 800a370:	2300      	movs	r3, #0
}
 800a372:	4618      	mov	r0, r3
 800a374:	3710      	adds	r7, #16
 800a376:	46bd      	mov	sp, r7
 800a378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a37c <Output>:
	}
	return layer;
}

nnom_layer_t *Output(nnom_3d_shape_t output_shape, void *p_buf)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b086      	sub	sp, #24
 800a380:	af00      	add	r7, sp, #0
 800a382:	f107 0308 	add.w	r3, r7, #8
 800a386:	e883 0003 	stmia.w	r3, {r0, r1}
 800a38a:	607a      	str	r2, [r7, #4]
	// they are acturally the same.. expect the type defined
	nnom_layer_t *layer = Input(output_shape, p_buf);
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	f107 0308 	add.w	r3, r7, #8
 800a392:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a396:	f7ff fd6d 	bl	8009e74 <Input>
 800a39a:	6178      	str	r0, [r7, #20]
	if (layer != NULL)
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d008      	beq.n	800a3b4 <Output+0x38>
	{
		layer->type = NNOM_OUTPUT;
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	2203      	movs	r2, #3
 800a3a6:	771a      	strb	r2, [r3, #28]
		layer->run = output_run;
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	4a05      	ldr	r2, [pc, #20]	; (800a3c0 <Output+0x44>)
 800a3ac:	605a      	str	r2, [r3, #4]
		layer->build = default_build;
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	4a04      	ldr	r2, [pc, #16]	; (800a3c4 <Output+0x48>)
 800a3b2:	609a      	str	r2, [r3, #8]
	}
	return layer;
 800a3b4:	697b      	ldr	r3, [r7, #20]
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3718      	adds	r7, #24
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	0800a3c9 	.word	0x0800a3c9
 800a3c4:	0800905d 	.word	0x0800905d

0800a3c8 <output_run>:

nnom_status_t output_run(nnom_layer_t *layer)
{
 800a3c8:	b5b0      	push	{r4, r5, r7, lr}
 800a3ca:	b084      	sub	sp, #16
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
	nnom_io_layer_t *cl = (nnom_io_layer_t *)layer;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	60fb      	str	r3, [r7, #12]
	memcpy(cl->buf, layer->in->tensor->p_data, tensor_size(layer->out->tensor)); // in->memory -> user memory
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6a1b      	ldr	r3, [r3, #32]
 800a3dc:	68db      	ldr	r3, [r3, #12]
 800a3de:	681d      	ldr	r5, [r3, #0]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e4:	68db      	ldr	r3, [r3, #12]
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f7fe fcdc 	bl	8008da4 <tensor_size>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	4629      	mov	r1, r5
 800a3f2:	4620      	mov	r0, r4
 800a3f4:	f000 f8c2 	bl	800a57c <memcpy>
	return NN_SUCCESS;
 800a3f8:	2300      	movs	r3, #0
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3710      	adds	r7, #16
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a404 <Softmax>:
		layer->config = (void*) config;
	return layer;
}

nnom_layer_t *Softmax(void)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b084      	sub	sp, #16
 800a408:	af00      	add	r7, sp, #0
	nnom_layer_t *layer;
	nnom_layer_io_t *in, *out;

	// apply a block memory for all the sub handles.
	size_t mem_size = sizeof(nnom_layer_t) + sizeof(nnom_layer_io_t) * 2;
 800a40a:	2368      	movs	r3, #104	; 0x68
 800a40c:	60fb      	str	r3, [r7, #12]
	layer = nnom_mem(mem_size);
 800a40e:	68f8      	ldr	r0, [r7, #12]
 800a410:	f7fd fc6c 	bl	8007cec <nnom_mem>
 800a414:	60b8      	str	r0, [r7, #8]
	if (layer == NULL)
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d101      	bne.n	800a420 <Softmax+0x1c>
		return NULL;
 800a41c:	2300      	movs	r3, #0
 800a41e:	e023      	b.n	800a468 <Softmax+0x64>

	// distribut the memory to sub handles.
	in = (void *)((uint8_t*)layer + sizeof(nnom_layer_t));
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	3330      	adds	r3, #48	; 0x30
 800a424:	607b      	str	r3, [r7, #4]
	out = (void *)((uint8_t*)in + sizeof(nnom_layer_io_t));
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	331c      	adds	r3, #28
 800a42a:	603b      	str	r3, [r7, #0]

	// set type in layer parent
	layer->type = NNOM_SOFTMAX;
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	2211      	movs	r2, #17
 800a430:	771a      	strb	r2, [r3, #28]
	layer->run = softmax_run;
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	4a0e      	ldr	r2, [pc, #56]	; (800a470 <Softmax+0x6c>)
 800a436:	605a      	str	r2, [r3, #4]
	layer->build = softmax_build;
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	4a0e      	ldr	r2, [pc, #56]	; (800a474 <Softmax+0x70>)
 800a43c:	609a      	str	r2, [r3, #8]
	// set buf state
	in->type = NNOM_TENSOR_BUF_TEMP;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2201      	movs	r2, #1
 800a442:	761a      	strb	r2, [r3, #24]
	out->type = NNOM_TENSOR_BUF_TEMP;
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	2201      	movs	r2, #1
 800a448:	761a      	strb	r2, [r3, #24]
	// put in & out on the layer.
	layer->in = io_init(layer, in);
 800a44a:	6879      	ldr	r1, [r7, #4]
 800a44c:	68b8      	ldr	r0, [r7, #8]
 800a44e:	f7fe fc9a 	bl	8008d86 <io_init>
 800a452:	4602      	mov	r2, r0
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	621a      	str	r2, [r3, #32]
	layer->out = io_init(layer, out);
 800a458:	6839      	ldr	r1, [r7, #0]
 800a45a:	68b8      	ldr	r0, [r7, #8]
 800a45c:	f7fe fc93 	bl	8008d86 <io_init>
 800a460:	4602      	mov	r2, r0
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	625a      	str	r2, [r3, #36]	; 0x24

	return layer;
 800a466:	68bb      	ldr	r3, [r7, #8]
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3710      	adds	r7, #16
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}
 800a470:	0800a4e1 	.word	0x0800a4e1
 800a474:	0800a479 	.word	0x0800a479

0800a478 <softmax_build>:

nnom_status_t softmax_build(nnom_layer_t *layer)
{
 800a478:	b5b0      	push	{r4, r5, r7, lr}
 800a47a:	b082      	sub	sp, #8
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
	// get the last layer's output as input shape
	layer->in->tensor = layer->in->hook.io->tensor;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6a1b      	ldr	r3, [r3, #32]
 800a484:	681a      	ldr	r2, [r3, #0]
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6a1b      	ldr	r3, [r3, #32]
 800a48a:	68d2      	ldr	r2, [r2, #12]
 800a48c:	60da      	str	r2, [r3, #12]
	// output tensor
	layer->out->tensor = new_tensor(NNOM_QTYPE_PER_TENSOR, layer->in->tensor->num_dim, tensor_get_num_channel(layer->in->tensor));
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6a1b      	ldr	r3, [r3, #32]
 800a492:	68db      	ldr	r3, [r3, #12]
 800a494:	7c5b      	ldrb	r3, [r3, #17]
 800a496:	461d      	mov	r5, r3
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6a1b      	ldr	r3, [r3, #32]
 800a49c:	68db      	ldr	r3, [r3, #12]
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f7fe fcab 	bl	8008dfa <tensor_get_num_channel>
 800a4a4:	4602      	mov	r2, r0
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a4aa:	4629      	mov	r1, r5
 800a4ac:	2000      	movs	r0, #0
 800a4ae:	f7fe fcb9 	bl	8008e24 <new_tensor>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	60e3      	str	r3, [r4, #12]
	tensor_cpy_attr(layer->out->tensor, layer->in->tensor);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ba:	68da      	ldr	r2, [r3, #12]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6a1b      	ldr	r3, [r3, #32]
 800a4c0:	68db      	ldr	r3, [r3, #12]
 800a4c2:	4619      	mov	r1, r3
 800a4c4:	4610      	mov	r0, r2
 800a4c6:	f7fe fd57 	bl	8008f78 <tensor_cpy_attr>
	// softmax has fixed output dec bit
	layer->out->tensor->q_dec[0] = 7;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	689b      	ldr	r3, [r3, #8]
 800a4d2:	2207      	movs	r2, #7
 800a4d4:	601a      	str	r2, [r3, #0]
	return NN_SUCCESS;
 800a4d6:	2300      	movs	r3, #0
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3708      	adds	r7, #8
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bdb0      	pop	{r4, r5, r7, pc}

0800a4e0 <softmax_run>:

nnom_status_t softmax_run(nnom_layer_t *layer)
{
 800a4e0:	b590      	push	{r4, r7, lr}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
	// looks like the new version cause accuracy drop quite a lot. 
//	#ifdef NNOM_USING_CMSIS_NN
//	// temporary fixed for mutiple dimension input. 
//	arm_softmax_q7(layer->in->tensor->p_data, tensor_size(layer->out->tensor), layer->out->tensor->p_data);
//	#else
	local_softmax_q7(layer->in->tensor->p_data, tensor_size(layer->out->tensor), layer->out->tensor->p_data);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6a1b      	ldr	r3, [r3, #32]
 800a4ec:	68db      	ldr	r3, [r3, #12]
 800a4ee:	681c      	ldr	r4, [r3, #0]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f4:	68db      	ldr	r3, [r3, #12]
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7fe fc54 	bl	8008da4 <tensor_size>
 800a4fc:	4601      	mov	r1, r0
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a502:	68db      	ldr	r3, [r3, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	461a      	mov	r2, r3
 800a508:	4620      	mov	r0, r4
 800a50a:	f7fd fb5a 	bl	8007bc2 <local_softmax_q7>
	//#endif
	return NN_SUCCESS;
 800a50e:	2300      	movs	r3, #0
}
 800a510:	4618      	mov	r0, r3
 800a512:	370c      	adds	r7, #12
 800a514:	46bd      	mov	sp, r7
 800a516:	bd90      	pop	{r4, r7, pc}

0800a518 <__errno>:
 800a518:	4b01      	ldr	r3, [pc, #4]	; (800a520 <__errno+0x8>)
 800a51a:	6818      	ldr	r0, [r3, #0]
 800a51c:	4770      	bx	lr
 800a51e:	bf00      	nop
 800a520:	2000000c 	.word	0x2000000c

0800a524 <__libc_init_array>:
 800a524:	b570      	push	{r4, r5, r6, lr}
 800a526:	4e0d      	ldr	r6, [pc, #52]	; (800a55c <__libc_init_array+0x38>)
 800a528:	4c0d      	ldr	r4, [pc, #52]	; (800a560 <__libc_init_array+0x3c>)
 800a52a:	1ba4      	subs	r4, r4, r6
 800a52c:	10a4      	asrs	r4, r4, #2
 800a52e:	2500      	movs	r5, #0
 800a530:	42a5      	cmp	r5, r4
 800a532:	d109      	bne.n	800a548 <__libc_init_array+0x24>
 800a534:	4e0b      	ldr	r6, [pc, #44]	; (800a564 <__libc_init_array+0x40>)
 800a536:	4c0c      	ldr	r4, [pc, #48]	; (800a568 <__libc_init_array+0x44>)
 800a538:	f004 faa8 	bl	800ea8c <_init>
 800a53c:	1ba4      	subs	r4, r4, r6
 800a53e:	10a4      	asrs	r4, r4, #2
 800a540:	2500      	movs	r5, #0
 800a542:	42a5      	cmp	r5, r4
 800a544:	d105      	bne.n	800a552 <__libc_init_array+0x2e>
 800a546:	bd70      	pop	{r4, r5, r6, pc}
 800a548:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a54c:	4798      	blx	r3
 800a54e:	3501      	adds	r5, #1
 800a550:	e7ee      	b.n	800a530 <__libc_init_array+0xc>
 800a552:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a556:	4798      	blx	r3
 800a558:	3501      	adds	r5, #1
 800a55a:	e7f2      	b.n	800a542 <__libc_init_array+0x1e>
 800a55c:	0801f0f8 	.word	0x0801f0f8
 800a560:	0801f0f8 	.word	0x0801f0f8
 800a564:	0801f0f8 	.word	0x0801f0f8
 800a568:	0801f0fc 	.word	0x0801f0fc

0800a56c <malloc>:
 800a56c:	4b02      	ldr	r3, [pc, #8]	; (800a578 <malloc+0xc>)
 800a56e:	4601      	mov	r1, r0
 800a570:	6818      	ldr	r0, [r3, #0]
 800a572:	f000 b87d 	b.w	800a670 <_malloc_r>
 800a576:	bf00      	nop
 800a578:	2000000c 	.word	0x2000000c

0800a57c <memcpy>:
 800a57c:	b510      	push	{r4, lr}
 800a57e:	1e43      	subs	r3, r0, #1
 800a580:	440a      	add	r2, r1
 800a582:	4291      	cmp	r1, r2
 800a584:	d100      	bne.n	800a588 <memcpy+0xc>
 800a586:	bd10      	pop	{r4, pc}
 800a588:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a58c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a590:	e7f7      	b.n	800a582 <memcpy+0x6>

0800a592 <memmove>:
 800a592:	4288      	cmp	r0, r1
 800a594:	b510      	push	{r4, lr}
 800a596:	eb01 0302 	add.w	r3, r1, r2
 800a59a:	d807      	bhi.n	800a5ac <memmove+0x1a>
 800a59c:	1e42      	subs	r2, r0, #1
 800a59e:	4299      	cmp	r1, r3
 800a5a0:	d00a      	beq.n	800a5b8 <memmove+0x26>
 800a5a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5a6:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a5aa:	e7f8      	b.n	800a59e <memmove+0xc>
 800a5ac:	4283      	cmp	r3, r0
 800a5ae:	d9f5      	bls.n	800a59c <memmove+0xa>
 800a5b0:	1881      	adds	r1, r0, r2
 800a5b2:	1ad2      	subs	r2, r2, r3
 800a5b4:	42d3      	cmn	r3, r2
 800a5b6:	d100      	bne.n	800a5ba <memmove+0x28>
 800a5b8:	bd10      	pop	{r4, pc}
 800a5ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a5be:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a5c2:	e7f7      	b.n	800a5b4 <memmove+0x22>

0800a5c4 <memset>:
 800a5c4:	4402      	add	r2, r0
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d100      	bne.n	800a5ce <memset+0xa>
 800a5cc:	4770      	bx	lr
 800a5ce:	f803 1b01 	strb.w	r1, [r3], #1
 800a5d2:	e7f9      	b.n	800a5c8 <memset+0x4>

0800a5d4 <_free_r>:
 800a5d4:	b538      	push	{r3, r4, r5, lr}
 800a5d6:	4605      	mov	r5, r0
 800a5d8:	2900      	cmp	r1, #0
 800a5da:	d045      	beq.n	800a668 <_free_r+0x94>
 800a5dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5e0:	1f0c      	subs	r4, r1, #4
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	bfb8      	it	lt
 800a5e6:	18e4      	addlt	r4, r4, r3
 800a5e8:	f003 fa80 	bl	800daec <__malloc_lock>
 800a5ec:	4a1f      	ldr	r2, [pc, #124]	; (800a66c <_free_r+0x98>)
 800a5ee:	6813      	ldr	r3, [r2, #0]
 800a5f0:	4610      	mov	r0, r2
 800a5f2:	b933      	cbnz	r3, 800a602 <_free_r+0x2e>
 800a5f4:	6063      	str	r3, [r4, #4]
 800a5f6:	6014      	str	r4, [r2, #0]
 800a5f8:	4628      	mov	r0, r5
 800a5fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5fe:	f003 ba76 	b.w	800daee <__malloc_unlock>
 800a602:	42a3      	cmp	r3, r4
 800a604:	d90c      	bls.n	800a620 <_free_r+0x4c>
 800a606:	6821      	ldr	r1, [r4, #0]
 800a608:	1862      	adds	r2, r4, r1
 800a60a:	4293      	cmp	r3, r2
 800a60c:	bf04      	itt	eq
 800a60e:	681a      	ldreq	r2, [r3, #0]
 800a610:	685b      	ldreq	r3, [r3, #4]
 800a612:	6063      	str	r3, [r4, #4]
 800a614:	bf04      	itt	eq
 800a616:	1852      	addeq	r2, r2, r1
 800a618:	6022      	streq	r2, [r4, #0]
 800a61a:	6004      	str	r4, [r0, #0]
 800a61c:	e7ec      	b.n	800a5f8 <_free_r+0x24>
 800a61e:	4613      	mov	r3, r2
 800a620:	685a      	ldr	r2, [r3, #4]
 800a622:	b10a      	cbz	r2, 800a628 <_free_r+0x54>
 800a624:	42a2      	cmp	r2, r4
 800a626:	d9fa      	bls.n	800a61e <_free_r+0x4a>
 800a628:	6819      	ldr	r1, [r3, #0]
 800a62a:	1858      	adds	r0, r3, r1
 800a62c:	42a0      	cmp	r0, r4
 800a62e:	d10b      	bne.n	800a648 <_free_r+0x74>
 800a630:	6820      	ldr	r0, [r4, #0]
 800a632:	4401      	add	r1, r0
 800a634:	1858      	adds	r0, r3, r1
 800a636:	4282      	cmp	r2, r0
 800a638:	6019      	str	r1, [r3, #0]
 800a63a:	d1dd      	bne.n	800a5f8 <_free_r+0x24>
 800a63c:	6810      	ldr	r0, [r2, #0]
 800a63e:	6852      	ldr	r2, [r2, #4]
 800a640:	605a      	str	r2, [r3, #4]
 800a642:	4401      	add	r1, r0
 800a644:	6019      	str	r1, [r3, #0]
 800a646:	e7d7      	b.n	800a5f8 <_free_r+0x24>
 800a648:	d902      	bls.n	800a650 <_free_r+0x7c>
 800a64a:	230c      	movs	r3, #12
 800a64c:	602b      	str	r3, [r5, #0]
 800a64e:	e7d3      	b.n	800a5f8 <_free_r+0x24>
 800a650:	6820      	ldr	r0, [r4, #0]
 800a652:	1821      	adds	r1, r4, r0
 800a654:	428a      	cmp	r2, r1
 800a656:	bf04      	itt	eq
 800a658:	6811      	ldreq	r1, [r2, #0]
 800a65a:	6852      	ldreq	r2, [r2, #4]
 800a65c:	6062      	str	r2, [r4, #4]
 800a65e:	bf04      	itt	eq
 800a660:	1809      	addeq	r1, r1, r0
 800a662:	6021      	streq	r1, [r4, #0]
 800a664:	605c      	str	r4, [r3, #4]
 800a666:	e7c7      	b.n	800a5f8 <_free_r+0x24>
 800a668:	bd38      	pop	{r3, r4, r5, pc}
 800a66a:	bf00      	nop
 800a66c:	20000eb4 	.word	0x20000eb4

0800a670 <_malloc_r>:
 800a670:	b570      	push	{r4, r5, r6, lr}
 800a672:	1ccd      	adds	r5, r1, #3
 800a674:	f025 0503 	bic.w	r5, r5, #3
 800a678:	3508      	adds	r5, #8
 800a67a:	2d0c      	cmp	r5, #12
 800a67c:	bf38      	it	cc
 800a67e:	250c      	movcc	r5, #12
 800a680:	2d00      	cmp	r5, #0
 800a682:	4606      	mov	r6, r0
 800a684:	db01      	blt.n	800a68a <_malloc_r+0x1a>
 800a686:	42a9      	cmp	r1, r5
 800a688:	d903      	bls.n	800a692 <_malloc_r+0x22>
 800a68a:	230c      	movs	r3, #12
 800a68c:	6033      	str	r3, [r6, #0]
 800a68e:	2000      	movs	r0, #0
 800a690:	bd70      	pop	{r4, r5, r6, pc}
 800a692:	f003 fa2b 	bl	800daec <__malloc_lock>
 800a696:	4a21      	ldr	r2, [pc, #132]	; (800a71c <_malloc_r+0xac>)
 800a698:	6814      	ldr	r4, [r2, #0]
 800a69a:	4621      	mov	r1, r4
 800a69c:	b991      	cbnz	r1, 800a6c4 <_malloc_r+0x54>
 800a69e:	4c20      	ldr	r4, [pc, #128]	; (800a720 <_malloc_r+0xb0>)
 800a6a0:	6823      	ldr	r3, [r4, #0]
 800a6a2:	b91b      	cbnz	r3, 800a6ac <_malloc_r+0x3c>
 800a6a4:	4630      	mov	r0, r6
 800a6a6:	f000 ff0b 	bl	800b4c0 <_sbrk_r>
 800a6aa:	6020      	str	r0, [r4, #0]
 800a6ac:	4629      	mov	r1, r5
 800a6ae:	4630      	mov	r0, r6
 800a6b0:	f000 ff06 	bl	800b4c0 <_sbrk_r>
 800a6b4:	1c43      	adds	r3, r0, #1
 800a6b6:	d124      	bne.n	800a702 <_malloc_r+0x92>
 800a6b8:	230c      	movs	r3, #12
 800a6ba:	6033      	str	r3, [r6, #0]
 800a6bc:	4630      	mov	r0, r6
 800a6be:	f003 fa16 	bl	800daee <__malloc_unlock>
 800a6c2:	e7e4      	b.n	800a68e <_malloc_r+0x1e>
 800a6c4:	680b      	ldr	r3, [r1, #0]
 800a6c6:	1b5b      	subs	r3, r3, r5
 800a6c8:	d418      	bmi.n	800a6fc <_malloc_r+0x8c>
 800a6ca:	2b0b      	cmp	r3, #11
 800a6cc:	d90f      	bls.n	800a6ee <_malloc_r+0x7e>
 800a6ce:	600b      	str	r3, [r1, #0]
 800a6d0:	50cd      	str	r5, [r1, r3]
 800a6d2:	18cc      	adds	r4, r1, r3
 800a6d4:	4630      	mov	r0, r6
 800a6d6:	f003 fa0a 	bl	800daee <__malloc_unlock>
 800a6da:	f104 000b 	add.w	r0, r4, #11
 800a6de:	1d23      	adds	r3, r4, #4
 800a6e0:	f020 0007 	bic.w	r0, r0, #7
 800a6e4:	1ac3      	subs	r3, r0, r3
 800a6e6:	d0d3      	beq.n	800a690 <_malloc_r+0x20>
 800a6e8:	425a      	negs	r2, r3
 800a6ea:	50e2      	str	r2, [r4, r3]
 800a6ec:	e7d0      	b.n	800a690 <_malloc_r+0x20>
 800a6ee:	428c      	cmp	r4, r1
 800a6f0:	684b      	ldr	r3, [r1, #4]
 800a6f2:	bf16      	itet	ne
 800a6f4:	6063      	strne	r3, [r4, #4]
 800a6f6:	6013      	streq	r3, [r2, #0]
 800a6f8:	460c      	movne	r4, r1
 800a6fa:	e7eb      	b.n	800a6d4 <_malloc_r+0x64>
 800a6fc:	460c      	mov	r4, r1
 800a6fe:	6849      	ldr	r1, [r1, #4]
 800a700:	e7cc      	b.n	800a69c <_malloc_r+0x2c>
 800a702:	1cc4      	adds	r4, r0, #3
 800a704:	f024 0403 	bic.w	r4, r4, #3
 800a708:	42a0      	cmp	r0, r4
 800a70a:	d005      	beq.n	800a718 <_malloc_r+0xa8>
 800a70c:	1a21      	subs	r1, r4, r0
 800a70e:	4630      	mov	r0, r6
 800a710:	f000 fed6 	bl	800b4c0 <_sbrk_r>
 800a714:	3001      	adds	r0, #1
 800a716:	d0cf      	beq.n	800a6b8 <_malloc_r+0x48>
 800a718:	6025      	str	r5, [r4, #0]
 800a71a:	e7db      	b.n	800a6d4 <_malloc_r+0x64>
 800a71c:	20000eb4 	.word	0x20000eb4
 800a720:	20000eb8 	.word	0x20000eb8

0800a724 <__cvt>:
 800a724:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a728:	ec55 4b10 	vmov	r4, r5, d0
 800a72c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800a72e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a732:	2d00      	cmp	r5, #0
 800a734:	460e      	mov	r6, r1
 800a736:	4691      	mov	r9, r2
 800a738:	4619      	mov	r1, r3
 800a73a:	bfb8      	it	lt
 800a73c:	4622      	movlt	r2, r4
 800a73e:	462b      	mov	r3, r5
 800a740:	f027 0720 	bic.w	r7, r7, #32
 800a744:	bfbb      	ittet	lt
 800a746:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a74a:	461d      	movlt	r5, r3
 800a74c:	2300      	movge	r3, #0
 800a74e:	232d      	movlt	r3, #45	; 0x2d
 800a750:	bfb8      	it	lt
 800a752:	4614      	movlt	r4, r2
 800a754:	2f46      	cmp	r7, #70	; 0x46
 800a756:	700b      	strb	r3, [r1, #0]
 800a758:	d004      	beq.n	800a764 <__cvt+0x40>
 800a75a:	2f45      	cmp	r7, #69	; 0x45
 800a75c:	d100      	bne.n	800a760 <__cvt+0x3c>
 800a75e:	3601      	adds	r6, #1
 800a760:	2102      	movs	r1, #2
 800a762:	e000      	b.n	800a766 <__cvt+0x42>
 800a764:	2103      	movs	r1, #3
 800a766:	ab03      	add	r3, sp, #12
 800a768:	9301      	str	r3, [sp, #4]
 800a76a:	ab02      	add	r3, sp, #8
 800a76c:	9300      	str	r3, [sp, #0]
 800a76e:	4632      	mov	r2, r6
 800a770:	4653      	mov	r3, sl
 800a772:	ec45 4b10 	vmov	d0, r4, r5
 800a776:	f001 fed7 	bl	800c528 <_dtoa_r>
 800a77a:	2f47      	cmp	r7, #71	; 0x47
 800a77c:	4680      	mov	r8, r0
 800a77e:	d102      	bne.n	800a786 <__cvt+0x62>
 800a780:	f019 0f01 	tst.w	r9, #1
 800a784:	d026      	beq.n	800a7d4 <__cvt+0xb0>
 800a786:	2f46      	cmp	r7, #70	; 0x46
 800a788:	eb08 0906 	add.w	r9, r8, r6
 800a78c:	d111      	bne.n	800a7b2 <__cvt+0x8e>
 800a78e:	f898 3000 	ldrb.w	r3, [r8]
 800a792:	2b30      	cmp	r3, #48	; 0x30
 800a794:	d10a      	bne.n	800a7ac <__cvt+0x88>
 800a796:	2200      	movs	r2, #0
 800a798:	2300      	movs	r3, #0
 800a79a:	4620      	mov	r0, r4
 800a79c:	4629      	mov	r1, r5
 800a79e:	f7f6 f99b 	bl	8000ad8 <__aeabi_dcmpeq>
 800a7a2:	b918      	cbnz	r0, 800a7ac <__cvt+0x88>
 800a7a4:	f1c6 0601 	rsb	r6, r6, #1
 800a7a8:	f8ca 6000 	str.w	r6, [sl]
 800a7ac:	f8da 3000 	ldr.w	r3, [sl]
 800a7b0:	4499      	add	r9, r3
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	4620      	mov	r0, r4
 800a7b8:	4629      	mov	r1, r5
 800a7ba:	f7f6 f98d 	bl	8000ad8 <__aeabi_dcmpeq>
 800a7be:	b938      	cbnz	r0, 800a7d0 <__cvt+0xac>
 800a7c0:	2230      	movs	r2, #48	; 0x30
 800a7c2:	9b03      	ldr	r3, [sp, #12]
 800a7c4:	454b      	cmp	r3, r9
 800a7c6:	d205      	bcs.n	800a7d4 <__cvt+0xb0>
 800a7c8:	1c59      	adds	r1, r3, #1
 800a7ca:	9103      	str	r1, [sp, #12]
 800a7cc:	701a      	strb	r2, [r3, #0]
 800a7ce:	e7f8      	b.n	800a7c2 <__cvt+0x9e>
 800a7d0:	f8cd 900c 	str.w	r9, [sp, #12]
 800a7d4:	9b03      	ldr	r3, [sp, #12]
 800a7d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a7d8:	eba3 0308 	sub.w	r3, r3, r8
 800a7dc:	4640      	mov	r0, r8
 800a7de:	6013      	str	r3, [r2, #0]
 800a7e0:	b004      	add	sp, #16
 800a7e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a7e6 <__exponent>:
 800a7e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7e8:	2900      	cmp	r1, #0
 800a7ea:	4604      	mov	r4, r0
 800a7ec:	bfba      	itte	lt
 800a7ee:	4249      	neglt	r1, r1
 800a7f0:	232d      	movlt	r3, #45	; 0x2d
 800a7f2:	232b      	movge	r3, #43	; 0x2b
 800a7f4:	2909      	cmp	r1, #9
 800a7f6:	f804 2b02 	strb.w	r2, [r4], #2
 800a7fa:	7043      	strb	r3, [r0, #1]
 800a7fc:	dd20      	ble.n	800a840 <__exponent+0x5a>
 800a7fe:	f10d 0307 	add.w	r3, sp, #7
 800a802:	461f      	mov	r7, r3
 800a804:	260a      	movs	r6, #10
 800a806:	fb91 f5f6 	sdiv	r5, r1, r6
 800a80a:	fb06 1115 	mls	r1, r6, r5, r1
 800a80e:	3130      	adds	r1, #48	; 0x30
 800a810:	2d09      	cmp	r5, #9
 800a812:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a816:	f103 32ff 	add.w	r2, r3, #4294967295
 800a81a:	4629      	mov	r1, r5
 800a81c:	dc09      	bgt.n	800a832 <__exponent+0x4c>
 800a81e:	3130      	adds	r1, #48	; 0x30
 800a820:	3b02      	subs	r3, #2
 800a822:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a826:	42bb      	cmp	r3, r7
 800a828:	4622      	mov	r2, r4
 800a82a:	d304      	bcc.n	800a836 <__exponent+0x50>
 800a82c:	1a10      	subs	r0, r2, r0
 800a82e:	b003      	add	sp, #12
 800a830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a832:	4613      	mov	r3, r2
 800a834:	e7e7      	b.n	800a806 <__exponent+0x20>
 800a836:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a83a:	f804 2b01 	strb.w	r2, [r4], #1
 800a83e:	e7f2      	b.n	800a826 <__exponent+0x40>
 800a840:	2330      	movs	r3, #48	; 0x30
 800a842:	4419      	add	r1, r3
 800a844:	7083      	strb	r3, [r0, #2]
 800a846:	1d02      	adds	r2, r0, #4
 800a848:	70c1      	strb	r1, [r0, #3]
 800a84a:	e7ef      	b.n	800a82c <__exponent+0x46>

0800a84c <_printf_float>:
 800a84c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a850:	b08d      	sub	sp, #52	; 0x34
 800a852:	460c      	mov	r4, r1
 800a854:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800a858:	4616      	mov	r6, r2
 800a85a:	461f      	mov	r7, r3
 800a85c:	4605      	mov	r5, r0
 800a85e:	f003 f8c1 	bl	800d9e4 <_localeconv_r>
 800a862:	6803      	ldr	r3, [r0, #0]
 800a864:	9304      	str	r3, [sp, #16]
 800a866:	4618      	mov	r0, r3
 800a868:	f7f5 fcba 	bl	80001e0 <strlen>
 800a86c:	2300      	movs	r3, #0
 800a86e:	930a      	str	r3, [sp, #40]	; 0x28
 800a870:	f8d8 3000 	ldr.w	r3, [r8]
 800a874:	9005      	str	r0, [sp, #20]
 800a876:	3307      	adds	r3, #7
 800a878:	f023 0307 	bic.w	r3, r3, #7
 800a87c:	f103 0208 	add.w	r2, r3, #8
 800a880:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a884:	f8d4 b000 	ldr.w	fp, [r4]
 800a888:	f8c8 2000 	str.w	r2, [r8]
 800a88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a890:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a894:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a898:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a89c:	9307      	str	r3, [sp, #28]
 800a89e:	f8cd 8018 	str.w	r8, [sp, #24]
 800a8a2:	f04f 32ff 	mov.w	r2, #4294967295
 800a8a6:	4ba7      	ldr	r3, [pc, #668]	; (800ab44 <_printf_float+0x2f8>)
 800a8a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a8ac:	f7f6 f946 	bl	8000b3c <__aeabi_dcmpun>
 800a8b0:	bb70      	cbnz	r0, 800a910 <_printf_float+0xc4>
 800a8b2:	f04f 32ff 	mov.w	r2, #4294967295
 800a8b6:	4ba3      	ldr	r3, [pc, #652]	; (800ab44 <_printf_float+0x2f8>)
 800a8b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a8bc:	f7f6 f920 	bl	8000b00 <__aeabi_dcmple>
 800a8c0:	bb30      	cbnz	r0, 800a910 <_printf_float+0xc4>
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	4640      	mov	r0, r8
 800a8c8:	4649      	mov	r1, r9
 800a8ca:	f7f6 f90f 	bl	8000aec <__aeabi_dcmplt>
 800a8ce:	b110      	cbz	r0, 800a8d6 <_printf_float+0x8a>
 800a8d0:	232d      	movs	r3, #45	; 0x2d
 800a8d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8d6:	4a9c      	ldr	r2, [pc, #624]	; (800ab48 <_printf_float+0x2fc>)
 800a8d8:	4b9c      	ldr	r3, [pc, #624]	; (800ab4c <_printf_float+0x300>)
 800a8da:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a8de:	bf8c      	ite	hi
 800a8e0:	4690      	movhi	r8, r2
 800a8e2:	4698      	movls	r8, r3
 800a8e4:	2303      	movs	r3, #3
 800a8e6:	f02b 0204 	bic.w	r2, fp, #4
 800a8ea:	6123      	str	r3, [r4, #16]
 800a8ec:	6022      	str	r2, [r4, #0]
 800a8ee:	f04f 0900 	mov.w	r9, #0
 800a8f2:	9700      	str	r7, [sp, #0]
 800a8f4:	4633      	mov	r3, r6
 800a8f6:	aa0b      	add	r2, sp, #44	; 0x2c
 800a8f8:	4621      	mov	r1, r4
 800a8fa:	4628      	mov	r0, r5
 800a8fc:	f000 f9e6 	bl	800accc <_printf_common>
 800a900:	3001      	adds	r0, #1
 800a902:	f040 808d 	bne.w	800aa20 <_printf_float+0x1d4>
 800a906:	f04f 30ff 	mov.w	r0, #4294967295
 800a90a:	b00d      	add	sp, #52	; 0x34
 800a90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a910:	4642      	mov	r2, r8
 800a912:	464b      	mov	r3, r9
 800a914:	4640      	mov	r0, r8
 800a916:	4649      	mov	r1, r9
 800a918:	f7f6 f910 	bl	8000b3c <__aeabi_dcmpun>
 800a91c:	b110      	cbz	r0, 800a924 <_printf_float+0xd8>
 800a91e:	4a8c      	ldr	r2, [pc, #560]	; (800ab50 <_printf_float+0x304>)
 800a920:	4b8c      	ldr	r3, [pc, #560]	; (800ab54 <_printf_float+0x308>)
 800a922:	e7da      	b.n	800a8da <_printf_float+0x8e>
 800a924:	6861      	ldr	r1, [r4, #4]
 800a926:	1c4b      	adds	r3, r1, #1
 800a928:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800a92c:	a80a      	add	r0, sp, #40	; 0x28
 800a92e:	d13e      	bne.n	800a9ae <_printf_float+0x162>
 800a930:	2306      	movs	r3, #6
 800a932:	6063      	str	r3, [r4, #4]
 800a934:	2300      	movs	r3, #0
 800a936:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a93a:	ab09      	add	r3, sp, #36	; 0x24
 800a93c:	9300      	str	r3, [sp, #0]
 800a93e:	ec49 8b10 	vmov	d0, r8, r9
 800a942:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a946:	6022      	str	r2, [r4, #0]
 800a948:	f8cd a004 	str.w	sl, [sp, #4]
 800a94c:	6861      	ldr	r1, [r4, #4]
 800a94e:	4628      	mov	r0, r5
 800a950:	f7ff fee8 	bl	800a724 <__cvt>
 800a954:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800a958:	2b47      	cmp	r3, #71	; 0x47
 800a95a:	4680      	mov	r8, r0
 800a95c:	d109      	bne.n	800a972 <_printf_float+0x126>
 800a95e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a960:	1cd8      	adds	r0, r3, #3
 800a962:	db02      	blt.n	800a96a <_printf_float+0x11e>
 800a964:	6862      	ldr	r2, [r4, #4]
 800a966:	4293      	cmp	r3, r2
 800a968:	dd47      	ble.n	800a9fa <_printf_float+0x1ae>
 800a96a:	f1aa 0a02 	sub.w	sl, sl, #2
 800a96e:	fa5f fa8a 	uxtb.w	sl, sl
 800a972:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a976:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a978:	d824      	bhi.n	800a9c4 <_printf_float+0x178>
 800a97a:	3901      	subs	r1, #1
 800a97c:	4652      	mov	r2, sl
 800a97e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a982:	9109      	str	r1, [sp, #36]	; 0x24
 800a984:	f7ff ff2f 	bl	800a7e6 <__exponent>
 800a988:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a98a:	1813      	adds	r3, r2, r0
 800a98c:	2a01      	cmp	r2, #1
 800a98e:	4681      	mov	r9, r0
 800a990:	6123      	str	r3, [r4, #16]
 800a992:	dc02      	bgt.n	800a99a <_printf_float+0x14e>
 800a994:	6822      	ldr	r2, [r4, #0]
 800a996:	07d1      	lsls	r1, r2, #31
 800a998:	d501      	bpl.n	800a99e <_printf_float+0x152>
 800a99a:	3301      	adds	r3, #1
 800a99c:	6123      	str	r3, [r4, #16]
 800a99e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d0a5      	beq.n	800a8f2 <_printf_float+0xa6>
 800a9a6:	232d      	movs	r3, #45	; 0x2d
 800a9a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9ac:	e7a1      	b.n	800a8f2 <_printf_float+0xa6>
 800a9ae:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800a9b2:	f000 8177 	beq.w	800aca4 <_printf_float+0x458>
 800a9b6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a9ba:	d1bb      	bne.n	800a934 <_printf_float+0xe8>
 800a9bc:	2900      	cmp	r1, #0
 800a9be:	d1b9      	bne.n	800a934 <_printf_float+0xe8>
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	e7b6      	b.n	800a932 <_printf_float+0xe6>
 800a9c4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800a9c8:	d119      	bne.n	800a9fe <_printf_float+0x1b2>
 800a9ca:	2900      	cmp	r1, #0
 800a9cc:	6863      	ldr	r3, [r4, #4]
 800a9ce:	dd0c      	ble.n	800a9ea <_printf_float+0x19e>
 800a9d0:	6121      	str	r1, [r4, #16]
 800a9d2:	b913      	cbnz	r3, 800a9da <_printf_float+0x18e>
 800a9d4:	6822      	ldr	r2, [r4, #0]
 800a9d6:	07d2      	lsls	r2, r2, #31
 800a9d8:	d502      	bpl.n	800a9e0 <_printf_float+0x194>
 800a9da:	3301      	adds	r3, #1
 800a9dc:	440b      	add	r3, r1
 800a9de:	6123      	str	r3, [r4, #16]
 800a9e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9e2:	65a3      	str	r3, [r4, #88]	; 0x58
 800a9e4:	f04f 0900 	mov.w	r9, #0
 800a9e8:	e7d9      	b.n	800a99e <_printf_float+0x152>
 800a9ea:	b913      	cbnz	r3, 800a9f2 <_printf_float+0x1a6>
 800a9ec:	6822      	ldr	r2, [r4, #0]
 800a9ee:	07d0      	lsls	r0, r2, #31
 800a9f0:	d501      	bpl.n	800a9f6 <_printf_float+0x1aa>
 800a9f2:	3302      	adds	r3, #2
 800a9f4:	e7f3      	b.n	800a9de <_printf_float+0x192>
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	e7f1      	b.n	800a9de <_printf_float+0x192>
 800a9fa:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800a9fe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800aa02:	4293      	cmp	r3, r2
 800aa04:	db05      	blt.n	800aa12 <_printf_float+0x1c6>
 800aa06:	6822      	ldr	r2, [r4, #0]
 800aa08:	6123      	str	r3, [r4, #16]
 800aa0a:	07d1      	lsls	r1, r2, #31
 800aa0c:	d5e8      	bpl.n	800a9e0 <_printf_float+0x194>
 800aa0e:	3301      	adds	r3, #1
 800aa10:	e7e5      	b.n	800a9de <_printf_float+0x192>
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	bfd4      	ite	le
 800aa16:	f1c3 0302 	rsble	r3, r3, #2
 800aa1a:	2301      	movgt	r3, #1
 800aa1c:	4413      	add	r3, r2
 800aa1e:	e7de      	b.n	800a9de <_printf_float+0x192>
 800aa20:	6823      	ldr	r3, [r4, #0]
 800aa22:	055a      	lsls	r2, r3, #21
 800aa24:	d407      	bmi.n	800aa36 <_printf_float+0x1ea>
 800aa26:	6923      	ldr	r3, [r4, #16]
 800aa28:	4642      	mov	r2, r8
 800aa2a:	4631      	mov	r1, r6
 800aa2c:	4628      	mov	r0, r5
 800aa2e:	47b8      	blx	r7
 800aa30:	3001      	adds	r0, #1
 800aa32:	d12b      	bne.n	800aa8c <_printf_float+0x240>
 800aa34:	e767      	b.n	800a906 <_printf_float+0xba>
 800aa36:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800aa3a:	f240 80dc 	bls.w	800abf6 <_printf_float+0x3aa>
 800aa3e:	2200      	movs	r2, #0
 800aa40:	2300      	movs	r3, #0
 800aa42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aa46:	f7f6 f847 	bl	8000ad8 <__aeabi_dcmpeq>
 800aa4a:	2800      	cmp	r0, #0
 800aa4c:	d033      	beq.n	800aab6 <_printf_float+0x26a>
 800aa4e:	2301      	movs	r3, #1
 800aa50:	4a41      	ldr	r2, [pc, #260]	; (800ab58 <_printf_float+0x30c>)
 800aa52:	4631      	mov	r1, r6
 800aa54:	4628      	mov	r0, r5
 800aa56:	47b8      	blx	r7
 800aa58:	3001      	adds	r0, #1
 800aa5a:	f43f af54 	beq.w	800a906 <_printf_float+0xba>
 800aa5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa62:	429a      	cmp	r2, r3
 800aa64:	db02      	blt.n	800aa6c <_printf_float+0x220>
 800aa66:	6823      	ldr	r3, [r4, #0]
 800aa68:	07d8      	lsls	r0, r3, #31
 800aa6a:	d50f      	bpl.n	800aa8c <_printf_float+0x240>
 800aa6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa70:	4631      	mov	r1, r6
 800aa72:	4628      	mov	r0, r5
 800aa74:	47b8      	blx	r7
 800aa76:	3001      	adds	r0, #1
 800aa78:	f43f af45 	beq.w	800a906 <_printf_float+0xba>
 800aa7c:	f04f 0800 	mov.w	r8, #0
 800aa80:	f104 091a 	add.w	r9, r4, #26
 800aa84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa86:	3b01      	subs	r3, #1
 800aa88:	4543      	cmp	r3, r8
 800aa8a:	dc09      	bgt.n	800aaa0 <_printf_float+0x254>
 800aa8c:	6823      	ldr	r3, [r4, #0]
 800aa8e:	079b      	lsls	r3, r3, #30
 800aa90:	f100 8103 	bmi.w	800ac9a <_printf_float+0x44e>
 800aa94:	68e0      	ldr	r0, [r4, #12]
 800aa96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa98:	4298      	cmp	r0, r3
 800aa9a:	bfb8      	it	lt
 800aa9c:	4618      	movlt	r0, r3
 800aa9e:	e734      	b.n	800a90a <_printf_float+0xbe>
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	464a      	mov	r2, r9
 800aaa4:	4631      	mov	r1, r6
 800aaa6:	4628      	mov	r0, r5
 800aaa8:	47b8      	blx	r7
 800aaaa:	3001      	adds	r0, #1
 800aaac:	f43f af2b 	beq.w	800a906 <_printf_float+0xba>
 800aab0:	f108 0801 	add.w	r8, r8, #1
 800aab4:	e7e6      	b.n	800aa84 <_printf_float+0x238>
 800aab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	dc2b      	bgt.n	800ab14 <_printf_float+0x2c8>
 800aabc:	2301      	movs	r3, #1
 800aabe:	4a26      	ldr	r2, [pc, #152]	; (800ab58 <_printf_float+0x30c>)
 800aac0:	4631      	mov	r1, r6
 800aac2:	4628      	mov	r0, r5
 800aac4:	47b8      	blx	r7
 800aac6:	3001      	adds	r0, #1
 800aac8:	f43f af1d 	beq.w	800a906 <_printf_float+0xba>
 800aacc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aace:	b923      	cbnz	r3, 800aada <_printf_float+0x28e>
 800aad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aad2:	b913      	cbnz	r3, 800aada <_printf_float+0x28e>
 800aad4:	6823      	ldr	r3, [r4, #0]
 800aad6:	07d9      	lsls	r1, r3, #31
 800aad8:	d5d8      	bpl.n	800aa8c <_printf_float+0x240>
 800aada:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aade:	4631      	mov	r1, r6
 800aae0:	4628      	mov	r0, r5
 800aae2:	47b8      	blx	r7
 800aae4:	3001      	adds	r0, #1
 800aae6:	f43f af0e 	beq.w	800a906 <_printf_float+0xba>
 800aaea:	f04f 0900 	mov.w	r9, #0
 800aaee:	f104 0a1a 	add.w	sl, r4, #26
 800aaf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaf4:	425b      	negs	r3, r3
 800aaf6:	454b      	cmp	r3, r9
 800aaf8:	dc01      	bgt.n	800aafe <_printf_float+0x2b2>
 800aafa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aafc:	e794      	b.n	800aa28 <_printf_float+0x1dc>
 800aafe:	2301      	movs	r3, #1
 800ab00:	4652      	mov	r2, sl
 800ab02:	4631      	mov	r1, r6
 800ab04:	4628      	mov	r0, r5
 800ab06:	47b8      	blx	r7
 800ab08:	3001      	adds	r0, #1
 800ab0a:	f43f aefc 	beq.w	800a906 <_printf_float+0xba>
 800ab0e:	f109 0901 	add.w	r9, r9, #1
 800ab12:	e7ee      	b.n	800aaf2 <_printf_float+0x2a6>
 800ab14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	bfa8      	it	ge
 800ab1c:	461a      	movge	r2, r3
 800ab1e:	2a00      	cmp	r2, #0
 800ab20:	4691      	mov	r9, r2
 800ab22:	dd07      	ble.n	800ab34 <_printf_float+0x2e8>
 800ab24:	4613      	mov	r3, r2
 800ab26:	4631      	mov	r1, r6
 800ab28:	4642      	mov	r2, r8
 800ab2a:	4628      	mov	r0, r5
 800ab2c:	47b8      	blx	r7
 800ab2e:	3001      	adds	r0, #1
 800ab30:	f43f aee9 	beq.w	800a906 <_printf_float+0xba>
 800ab34:	f104 031a 	add.w	r3, r4, #26
 800ab38:	f04f 0b00 	mov.w	fp, #0
 800ab3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab40:	9306      	str	r3, [sp, #24]
 800ab42:	e015      	b.n	800ab70 <_printf_float+0x324>
 800ab44:	7fefffff 	.word	0x7fefffff
 800ab48:	0801edd4 	.word	0x0801edd4
 800ab4c:	0801edd0 	.word	0x0801edd0
 800ab50:	0801eddc 	.word	0x0801eddc
 800ab54:	0801edd8 	.word	0x0801edd8
 800ab58:	0801ede0 	.word	0x0801ede0
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	9a06      	ldr	r2, [sp, #24]
 800ab60:	4631      	mov	r1, r6
 800ab62:	4628      	mov	r0, r5
 800ab64:	47b8      	blx	r7
 800ab66:	3001      	adds	r0, #1
 800ab68:	f43f aecd 	beq.w	800a906 <_printf_float+0xba>
 800ab6c:	f10b 0b01 	add.w	fp, fp, #1
 800ab70:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800ab74:	ebaa 0309 	sub.w	r3, sl, r9
 800ab78:	455b      	cmp	r3, fp
 800ab7a:	dcef      	bgt.n	800ab5c <_printf_float+0x310>
 800ab7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab80:	429a      	cmp	r2, r3
 800ab82:	44d0      	add	r8, sl
 800ab84:	db15      	blt.n	800abb2 <_printf_float+0x366>
 800ab86:	6823      	ldr	r3, [r4, #0]
 800ab88:	07da      	lsls	r2, r3, #31
 800ab8a:	d412      	bmi.n	800abb2 <_printf_float+0x366>
 800ab8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab90:	eba3 020a 	sub.w	r2, r3, sl
 800ab94:	eba3 0a01 	sub.w	sl, r3, r1
 800ab98:	4592      	cmp	sl, r2
 800ab9a:	bfa8      	it	ge
 800ab9c:	4692      	movge	sl, r2
 800ab9e:	f1ba 0f00 	cmp.w	sl, #0
 800aba2:	dc0e      	bgt.n	800abc2 <_printf_float+0x376>
 800aba4:	f04f 0800 	mov.w	r8, #0
 800aba8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800abac:	f104 091a 	add.w	r9, r4, #26
 800abb0:	e019      	b.n	800abe6 <_printf_float+0x39a>
 800abb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abb6:	4631      	mov	r1, r6
 800abb8:	4628      	mov	r0, r5
 800abba:	47b8      	blx	r7
 800abbc:	3001      	adds	r0, #1
 800abbe:	d1e5      	bne.n	800ab8c <_printf_float+0x340>
 800abc0:	e6a1      	b.n	800a906 <_printf_float+0xba>
 800abc2:	4653      	mov	r3, sl
 800abc4:	4642      	mov	r2, r8
 800abc6:	4631      	mov	r1, r6
 800abc8:	4628      	mov	r0, r5
 800abca:	47b8      	blx	r7
 800abcc:	3001      	adds	r0, #1
 800abce:	d1e9      	bne.n	800aba4 <_printf_float+0x358>
 800abd0:	e699      	b.n	800a906 <_printf_float+0xba>
 800abd2:	2301      	movs	r3, #1
 800abd4:	464a      	mov	r2, r9
 800abd6:	4631      	mov	r1, r6
 800abd8:	4628      	mov	r0, r5
 800abda:	47b8      	blx	r7
 800abdc:	3001      	adds	r0, #1
 800abde:	f43f ae92 	beq.w	800a906 <_printf_float+0xba>
 800abe2:	f108 0801 	add.w	r8, r8, #1
 800abe6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800abea:	1a9b      	subs	r3, r3, r2
 800abec:	eba3 030a 	sub.w	r3, r3, sl
 800abf0:	4543      	cmp	r3, r8
 800abf2:	dcee      	bgt.n	800abd2 <_printf_float+0x386>
 800abf4:	e74a      	b.n	800aa8c <_printf_float+0x240>
 800abf6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abf8:	2a01      	cmp	r2, #1
 800abfa:	dc01      	bgt.n	800ac00 <_printf_float+0x3b4>
 800abfc:	07db      	lsls	r3, r3, #31
 800abfe:	d53a      	bpl.n	800ac76 <_printf_float+0x42a>
 800ac00:	2301      	movs	r3, #1
 800ac02:	4642      	mov	r2, r8
 800ac04:	4631      	mov	r1, r6
 800ac06:	4628      	mov	r0, r5
 800ac08:	47b8      	blx	r7
 800ac0a:	3001      	adds	r0, #1
 800ac0c:	f43f ae7b 	beq.w	800a906 <_printf_float+0xba>
 800ac10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac14:	4631      	mov	r1, r6
 800ac16:	4628      	mov	r0, r5
 800ac18:	47b8      	blx	r7
 800ac1a:	3001      	adds	r0, #1
 800ac1c:	f108 0801 	add.w	r8, r8, #1
 800ac20:	f43f ae71 	beq.w	800a906 <_printf_float+0xba>
 800ac24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac26:	2200      	movs	r2, #0
 800ac28:	f103 3aff 	add.w	sl, r3, #4294967295
 800ac2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ac30:	2300      	movs	r3, #0
 800ac32:	f7f5 ff51 	bl	8000ad8 <__aeabi_dcmpeq>
 800ac36:	b9c8      	cbnz	r0, 800ac6c <_printf_float+0x420>
 800ac38:	4653      	mov	r3, sl
 800ac3a:	4642      	mov	r2, r8
 800ac3c:	4631      	mov	r1, r6
 800ac3e:	4628      	mov	r0, r5
 800ac40:	47b8      	blx	r7
 800ac42:	3001      	adds	r0, #1
 800ac44:	d10e      	bne.n	800ac64 <_printf_float+0x418>
 800ac46:	e65e      	b.n	800a906 <_printf_float+0xba>
 800ac48:	2301      	movs	r3, #1
 800ac4a:	4652      	mov	r2, sl
 800ac4c:	4631      	mov	r1, r6
 800ac4e:	4628      	mov	r0, r5
 800ac50:	47b8      	blx	r7
 800ac52:	3001      	adds	r0, #1
 800ac54:	f43f ae57 	beq.w	800a906 <_printf_float+0xba>
 800ac58:	f108 0801 	add.w	r8, r8, #1
 800ac5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac5e:	3b01      	subs	r3, #1
 800ac60:	4543      	cmp	r3, r8
 800ac62:	dcf1      	bgt.n	800ac48 <_printf_float+0x3fc>
 800ac64:	464b      	mov	r3, r9
 800ac66:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ac6a:	e6de      	b.n	800aa2a <_printf_float+0x1de>
 800ac6c:	f04f 0800 	mov.w	r8, #0
 800ac70:	f104 0a1a 	add.w	sl, r4, #26
 800ac74:	e7f2      	b.n	800ac5c <_printf_float+0x410>
 800ac76:	2301      	movs	r3, #1
 800ac78:	e7df      	b.n	800ac3a <_printf_float+0x3ee>
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	464a      	mov	r2, r9
 800ac7e:	4631      	mov	r1, r6
 800ac80:	4628      	mov	r0, r5
 800ac82:	47b8      	blx	r7
 800ac84:	3001      	adds	r0, #1
 800ac86:	f43f ae3e 	beq.w	800a906 <_printf_float+0xba>
 800ac8a:	f108 0801 	add.w	r8, r8, #1
 800ac8e:	68e3      	ldr	r3, [r4, #12]
 800ac90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ac92:	1a9b      	subs	r3, r3, r2
 800ac94:	4543      	cmp	r3, r8
 800ac96:	dcf0      	bgt.n	800ac7a <_printf_float+0x42e>
 800ac98:	e6fc      	b.n	800aa94 <_printf_float+0x248>
 800ac9a:	f04f 0800 	mov.w	r8, #0
 800ac9e:	f104 0919 	add.w	r9, r4, #25
 800aca2:	e7f4      	b.n	800ac8e <_printf_float+0x442>
 800aca4:	2900      	cmp	r1, #0
 800aca6:	f43f ae8b 	beq.w	800a9c0 <_printf_float+0x174>
 800acaa:	2300      	movs	r3, #0
 800acac:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800acb0:	ab09      	add	r3, sp, #36	; 0x24
 800acb2:	9300      	str	r3, [sp, #0]
 800acb4:	ec49 8b10 	vmov	d0, r8, r9
 800acb8:	6022      	str	r2, [r4, #0]
 800acba:	f8cd a004 	str.w	sl, [sp, #4]
 800acbe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800acc2:	4628      	mov	r0, r5
 800acc4:	f7ff fd2e 	bl	800a724 <__cvt>
 800acc8:	4680      	mov	r8, r0
 800acca:	e648      	b.n	800a95e <_printf_float+0x112>

0800accc <_printf_common>:
 800accc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acd0:	4691      	mov	r9, r2
 800acd2:	461f      	mov	r7, r3
 800acd4:	688a      	ldr	r2, [r1, #8]
 800acd6:	690b      	ldr	r3, [r1, #16]
 800acd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800acdc:	4293      	cmp	r3, r2
 800acde:	bfb8      	it	lt
 800ace0:	4613      	movlt	r3, r2
 800ace2:	f8c9 3000 	str.w	r3, [r9]
 800ace6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800acea:	4606      	mov	r6, r0
 800acec:	460c      	mov	r4, r1
 800acee:	b112      	cbz	r2, 800acf6 <_printf_common+0x2a>
 800acf0:	3301      	adds	r3, #1
 800acf2:	f8c9 3000 	str.w	r3, [r9]
 800acf6:	6823      	ldr	r3, [r4, #0]
 800acf8:	0699      	lsls	r1, r3, #26
 800acfa:	bf42      	ittt	mi
 800acfc:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ad00:	3302      	addmi	r3, #2
 800ad02:	f8c9 3000 	strmi.w	r3, [r9]
 800ad06:	6825      	ldr	r5, [r4, #0]
 800ad08:	f015 0506 	ands.w	r5, r5, #6
 800ad0c:	d107      	bne.n	800ad1e <_printf_common+0x52>
 800ad0e:	f104 0a19 	add.w	sl, r4, #25
 800ad12:	68e3      	ldr	r3, [r4, #12]
 800ad14:	f8d9 2000 	ldr.w	r2, [r9]
 800ad18:	1a9b      	subs	r3, r3, r2
 800ad1a:	42ab      	cmp	r3, r5
 800ad1c:	dc28      	bgt.n	800ad70 <_printf_common+0xa4>
 800ad1e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ad22:	6822      	ldr	r2, [r4, #0]
 800ad24:	3300      	adds	r3, #0
 800ad26:	bf18      	it	ne
 800ad28:	2301      	movne	r3, #1
 800ad2a:	0692      	lsls	r2, r2, #26
 800ad2c:	d42d      	bmi.n	800ad8a <_printf_common+0xbe>
 800ad2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ad32:	4639      	mov	r1, r7
 800ad34:	4630      	mov	r0, r6
 800ad36:	47c0      	blx	r8
 800ad38:	3001      	adds	r0, #1
 800ad3a:	d020      	beq.n	800ad7e <_printf_common+0xb2>
 800ad3c:	6823      	ldr	r3, [r4, #0]
 800ad3e:	68e5      	ldr	r5, [r4, #12]
 800ad40:	f8d9 2000 	ldr.w	r2, [r9]
 800ad44:	f003 0306 	and.w	r3, r3, #6
 800ad48:	2b04      	cmp	r3, #4
 800ad4a:	bf08      	it	eq
 800ad4c:	1aad      	subeq	r5, r5, r2
 800ad4e:	68a3      	ldr	r3, [r4, #8]
 800ad50:	6922      	ldr	r2, [r4, #16]
 800ad52:	bf0c      	ite	eq
 800ad54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad58:	2500      	movne	r5, #0
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	bfc4      	itt	gt
 800ad5e:	1a9b      	subgt	r3, r3, r2
 800ad60:	18ed      	addgt	r5, r5, r3
 800ad62:	f04f 0900 	mov.w	r9, #0
 800ad66:	341a      	adds	r4, #26
 800ad68:	454d      	cmp	r5, r9
 800ad6a:	d11a      	bne.n	800ada2 <_printf_common+0xd6>
 800ad6c:	2000      	movs	r0, #0
 800ad6e:	e008      	b.n	800ad82 <_printf_common+0xb6>
 800ad70:	2301      	movs	r3, #1
 800ad72:	4652      	mov	r2, sl
 800ad74:	4639      	mov	r1, r7
 800ad76:	4630      	mov	r0, r6
 800ad78:	47c0      	blx	r8
 800ad7a:	3001      	adds	r0, #1
 800ad7c:	d103      	bne.n	800ad86 <_printf_common+0xba>
 800ad7e:	f04f 30ff 	mov.w	r0, #4294967295
 800ad82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad86:	3501      	adds	r5, #1
 800ad88:	e7c3      	b.n	800ad12 <_printf_common+0x46>
 800ad8a:	18e1      	adds	r1, r4, r3
 800ad8c:	1c5a      	adds	r2, r3, #1
 800ad8e:	2030      	movs	r0, #48	; 0x30
 800ad90:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ad94:	4422      	add	r2, r4
 800ad96:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ad9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ad9e:	3302      	adds	r3, #2
 800ada0:	e7c5      	b.n	800ad2e <_printf_common+0x62>
 800ada2:	2301      	movs	r3, #1
 800ada4:	4622      	mov	r2, r4
 800ada6:	4639      	mov	r1, r7
 800ada8:	4630      	mov	r0, r6
 800adaa:	47c0      	blx	r8
 800adac:	3001      	adds	r0, #1
 800adae:	d0e6      	beq.n	800ad7e <_printf_common+0xb2>
 800adb0:	f109 0901 	add.w	r9, r9, #1
 800adb4:	e7d8      	b.n	800ad68 <_printf_common+0x9c>
	...

0800adb8 <_printf_i>:
 800adb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800adbc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800adc0:	460c      	mov	r4, r1
 800adc2:	7e09      	ldrb	r1, [r1, #24]
 800adc4:	b085      	sub	sp, #20
 800adc6:	296e      	cmp	r1, #110	; 0x6e
 800adc8:	4617      	mov	r7, r2
 800adca:	4606      	mov	r6, r0
 800adcc:	4698      	mov	r8, r3
 800adce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800add0:	f000 80b3 	beq.w	800af3a <_printf_i+0x182>
 800add4:	d822      	bhi.n	800ae1c <_printf_i+0x64>
 800add6:	2963      	cmp	r1, #99	; 0x63
 800add8:	d036      	beq.n	800ae48 <_printf_i+0x90>
 800adda:	d80a      	bhi.n	800adf2 <_printf_i+0x3a>
 800addc:	2900      	cmp	r1, #0
 800adde:	f000 80b9 	beq.w	800af54 <_printf_i+0x19c>
 800ade2:	2958      	cmp	r1, #88	; 0x58
 800ade4:	f000 8083 	beq.w	800aeee <_printf_i+0x136>
 800ade8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800adec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800adf0:	e032      	b.n	800ae58 <_printf_i+0xa0>
 800adf2:	2964      	cmp	r1, #100	; 0x64
 800adf4:	d001      	beq.n	800adfa <_printf_i+0x42>
 800adf6:	2969      	cmp	r1, #105	; 0x69
 800adf8:	d1f6      	bne.n	800ade8 <_printf_i+0x30>
 800adfa:	6820      	ldr	r0, [r4, #0]
 800adfc:	6813      	ldr	r3, [r2, #0]
 800adfe:	0605      	lsls	r5, r0, #24
 800ae00:	f103 0104 	add.w	r1, r3, #4
 800ae04:	d52a      	bpl.n	800ae5c <_printf_i+0xa4>
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	6011      	str	r1, [r2, #0]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	da03      	bge.n	800ae16 <_printf_i+0x5e>
 800ae0e:	222d      	movs	r2, #45	; 0x2d
 800ae10:	425b      	negs	r3, r3
 800ae12:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ae16:	486f      	ldr	r0, [pc, #444]	; (800afd4 <_printf_i+0x21c>)
 800ae18:	220a      	movs	r2, #10
 800ae1a:	e039      	b.n	800ae90 <_printf_i+0xd8>
 800ae1c:	2973      	cmp	r1, #115	; 0x73
 800ae1e:	f000 809d 	beq.w	800af5c <_printf_i+0x1a4>
 800ae22:	d808      	bhi.n	800ae36 <_printf_i+0x7e>
 800ae24:	296f      	cmp	r1, #111	; 0x6f
 800ae26:	d020      	beq.n	800ae6a <_printf_i+0xb2>
 800ae28:	2970      	cmp	r1, #112	; 0x70
 800ae2a:	d1dd      	bne.n	800ade8 <_printf_i+0x30>
 800ae2c:	6823      	ldr	r3, [r4, #0]
 800ae2e:	f043 0320 	orr.w	r3, r3, #32
 800ae32:	6023      	str	r3, [r4, #0]
 800ae34:	e003      	b.n	800ae3e <_printf_i+0x86>
 800ae36:	2975      	cmp	r1, #117	; 0x75
 800ae38:	d017      	beq.n	800ae6a <_printf_i+0xb2>
 800ae3a:	2978      	cmp	r1, #120	; 0x78
 800ae3c:	d1d4      	bne.n	800ade8 <_printf_i+0x30>
 800ae3e:	2378      	movs	r3, #120	; 0x78
 800ae40:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ae44:	4864      	ldr	r0, [pc, #400]	; (800afd8 <_printf_i+0x220>)
 800ae46:	e055      	b.n	800aef4 <_printf_i+0x13c>
 800ae48:	6813      	ldr	r3, [r2, #0]
 800ae4a:	1d19      	adds	r1, r3, #4
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	6011      	str	r1, [r2, #0]
 800ae50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ae58:	2301      	movs	r3, #1
 800ae5a:	e08c      	b.n	800af76 <_printf_i+0x1be>
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	6011      	str	r1, [r2, #0]
 800ae60:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ae64:	bf18      	it	ne
 800ae66:	b21b      	sxthne	r3, r3
 800ae68:	e7cf      	b.n	800ae0a <_printf_i+0x52>
 800ae6a:	6813      	ldr	r3, [r2, #0]
 800ae6c:	6825      	ldr	r5, [r4, #0]
 800ae6e:	1d18      	adds	r0, r3, #4
 800ae70:	6010      	str	r0, [r2, #0]
 800ae72:	0628      	lsls	r0, r5, #24
 800ae74:	d501      	bpl.n	800ae7a <_printf_i+0xc2>
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	e002      	b.n	800ae80 <_printf_i+0xc8>
 800ae7a:	0668      	lsls	r0, r5, #25
 800ae7c:	d5fb      	bpl.n	800ae76 <_printf_i+0xbe>
 800ae7e:	881b      	ldrh	r3, [r3, #0]
 800ae80:	4854      	ldr	r0, [pc, #336]	; (800afd4 <_printf_i+0x21c>)
 800ae82:	296f      	cmp	r1, #111	; 0x6f
 800ae84:	bf14      	ite	ne
 800ae86:	220a      	movne	r2, #10
 800ae88:	2208      	moveq	r2, #8
 800ae8a:	2100      	movs	r1, #0
 800ae8c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ae90:	6865      	ldr	r5, [r4, #4]
 800ae92:	60a5      	str	r5, [r4, #8]
 800ae94:	2d00      	cmp	r5, #0
 800ae96:	f2c0 8095 	blt.w	800afc4 <_printf_i+0x20c>
 800ae9a:	6821      	ldr	r1, [r4, #0]
 800ae9c:	f021 0104 	bic.w	r1, r1, #4
 800aea0:	6021      	str	r1, [r4, #0]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d13d      	bne.n	800af22 <_printf_i+0x16a>
 800aea6:	2d00      	cmp	r5, #0
 800aea8:	f040 808e 	bne.w	800afc8 <_printf_i+0x210>
 800aeac:	4665      	mov	r5, ip
 800aeae:	2a08      	cmp	r2, #8
 800aeb0:	d10b      	bne.n	800aeca <_printf_i+0x112>
 800aeb2:	6823      	ldr	r3, [r4, #0]
 800aeb4:	07db      	lsls	r3, r3, #31
 800aeb6:	d508      	bpl.n	800aeca <_printf_i+0x112>
 800aeb8:	6923      	ldr	r3, [r4, #16]
 800aeba:	6862      	ldr	r2, [r4, #4]
 800aebc:	429a      	cmp	r2, r3
 800aebe:	bfde      	ittt	le
 800aec0:	2330      	movle	r3, #48	; 0x30
 800aec2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aec6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aeca:	ebac 0305 	sub.w	r3, ip, r5
 800aece:	6123      	str	r3, [r4, #16]
 800aed0:	f8cd 8000 	str.w	r8, [sp]
 800aed4:	463b      	mov	r3, r7
 800aed6:	aa03      	add	r2, sp, #12
 800aed8:	4621      	mov	r1, r4
 800aeda:	4630      	mov	r0, r6
 800aedc:	f7ff fef6 	bl	800accc <_printf_common>
 800aee0:	3001      	adds	r0, #1
 800aee2:	d14d      	bne.n	800af80 <_printf_i+0x1c8>
 800aee4:	f04f 30ff 	mov.w	r0, #4294967295
 800aee8:	b005      	add	sp, #20
 800aeea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aeee:	4839      	ldr	r0, [pc, #228]	; (800afd4 <_printf_i+0x21c>)
 800aef0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800aef4:	6813      	ldr	r3, [r2, #0]
 800aef6:	6821      	ldr	r1, [r4, #0]
 800aef8:	1d1d      	adds	r5, r3, #4
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	6015      	str	r5, [r2, #0]
 800aefe:	060a      	lsls	r2, r1, #24
 800af00:	d50b      	bpl.n	800af1a <_printf_i+0x162>
 800af02:	07ca      	lsls	r2, r1, #31
 800af04:	bf44      	itt	mi
 800af06:	f041 0120 	orrmi.w	r1, r1, #32
 800af0a:	6021      	strmi	r1, [r4, #0]
 800af0c:	b91b      	cbnz	r3, 800af16 <_printf_i+0x15e>
 800af0e:	6822      	ldr	r2, [r4, #0]
 800af10:	f022 0220 	bic.w	r2, r2, #32
 800af14:	6022      	str	r2, [r4, #0]
 800af16:	2210      	movs	r2, #16
 800af18:	e7b7      	b.n	800ae8a <_printf_i+0xd2>
 800af1a:	064d      	lsls	r5, r1, #25
 800af1c:	bf48      	it	mi
 800af1e:	b29b      	uxthmi	r3, r3
 800af20:	e7ef      	b.n	800af02 <_printf_i+0x14a>
 800af22:	4665      	mov	r5, ip
 800af24:	fbb3 f1f2 	udiv	r1, r3, r2
 800af28:	fb02 3311 	mls	r3, r2, r1, r3
 800af2c:	5cc3      	ldrb	r3, [r0, r3]
 800af2e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800af32:	460b      	mov	r3, r1
 800af34:	2900      	cmp	r1, #0
 800af36:	d1f5      	bne.n	800af24 <_printf_i+0x16c>
 800af38:	e7b9      	b.n	800aeae <_printf_i+0xf6>
 800af3a:	6813      	ldr	r3, [r2, #0]
 800af3c:	6825      	ldr	r5, [r4, #0]
 800af3e:	6961      	ldr	r1, [r4, #20]
 800af40:	1d18      	adds	r0, r3, #4
 800af42:	6010      	str	r0, [r2, #0]
 800af44:	0628      	lsls	r0, r5, #24
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	d501      	bpl.n	800af4e <_printf_i+0x196>
 800af4a:	6019      	str	r1, [r3, #0]
 800af4c:	e002      	b.n	800af54 <_printf_i+0x19c>
 800af4e:	066a      	lsls	r2, r5, #25
 800af50:	d5fb      	bpl.n	800af4a <_printf_i+0x192>
 800af52:	8019      	strh	r1, [r3, #0]
 800af54:	2300      	movs	r3, #0
 800af56:	6123      	str	r3, [r4, #16]
 800af58:	4665      	mov	r5, ip
 800af5a:	e7b9      	b.n	800aed0 <_printf_i+0x118>
 800af5c:	6813      	ldr	r3, [r2, #0]
 800af5e:	1d19      	adds	r1, r3, #4
 800af60:	6011      	str	r1, [r2, #0]
 800af62:	681d      	ldr	r5, [r3, #0]
 800af64:	6862      	ldr	r2, [r4, #4]
 800af66:	2100      	movs	r1, #0
 800af68:	4628      	mov	r0, r5
 800af6a:	f7f5 f941 	bl	80001f0 <memchr>
 800af6e:	b108      	cbz	r0, 800af74 <_printf_i+0x1bc>
 800af70:	1b40      	subs	r0, r0, r5
 800af72:	6060      	str	r0, [r4, #4]
 800af74:	6863      	ldr	r3, [r4, #4]
 800af76:	6123      	str	r3, [r4, #16]
 800af78:	2300      	movs	r3, #0
 800af7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af7e:	e7a7      	b.n	800aed0 <_printf_i+0x118>
 800af80:	6923      	ldr	r3, [r4, #16]
 800af82:	462a      	mov	r2, r5
 800af84:	4639      	mov	r1, r7
 800af86:	4630      	mov	r0, r6
 800af88:	47c0      	blx	r8
 800af8a:	3001      	adds	r0, #1
 800af8c:	d0aa      	beq.n	800aee4 <_printf_i+0x12c>
 800af8e:	6823      	ldr	r3, [r4, #0]
 800af90:	079b      	lsls	r3, r3, #30
 800af92:	d413      	bmi.n	800afbc <_printf_i+0x204>
 800af94:	68e0      	ldr	r0, [r4, #12]
 800af96:	9b03      	ldr	r3, [sp, #12]
 800af98:	4298      	cmp	r0, r3
 800af9a:	bfb8      	it	lt
 800af9c:	4618      	movlt	r0, r3
 800af9e:	e7a3      	b.n	800aee8 <_printf_i+0x130>
 800afa0:	2301      	movs	r3, #1
 800afa2:	464a      	mov	r2, r9
 800afa4:	4639      	mov	r1, r7
 800afa6:	4630      	mov	r0, r6
 800afa8:	47c0      	blx	r8
 800afaa:	3001      	adds	r0, #1
 800afac:	d09a      	beq.n	800aee4 <_printf_i+0x12c>
 800afae:	3501      	adds	r5, #1
 800afb0:	68e3      	ldr	r3, [r4, #12]
 800afb2:	9a03      	ldr	r2, [sp, #12]
 800afb4:	1a9b      	subs	r3, r3, r2
 800afb6:	42ab      	cmp	r3, r5
 800afb8:	dcf2      	bgt.n	800afa0 <_printf_i+0x1e8>
 800afba:	e7eb      	b.n	800af94 <_printf_i+0x1dc>
 800afbc:	2500      	movs	r5, #0
 800afbe:	f104 0919 	add.w	r9, r4, #25
 800afc2:	e7f5      	b.n	800afb0 <_printf_i+0x1f8>
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d1ac      	bne.n	800af22 <_printf_i+0x16a>
 800afc8:	7803      	ldrb	r3, [r0, #0]
 800afca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800afce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800afd2:	e76c      	b.n	800aeae <_printf_i+0xf6>
 800afd4:	0801ede2 	.word	0x0801ede2
 800afd8:	0801edf3 	.word	0x0801edf3

0800afdc <_scanf_float>:
 800afdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afe0:	469a      	mov	sl, r3
 800afe2:	688b      	ldr	r3, [r1, #8]
 800afe4:	4616      	mov	r6, r2
 800afe6:	1e5a      	subs	r2, r3, #1
 800afe8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800afec:	b087      	sub	sp, #28
 800afee:	bf83      	ittte	hi
 800aff0:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800aff4:	189b      	addhi	r3, r3, r2
 800aff6:	9301      	strhi	r3, [sp, #4]
 800aff8:	2300      	movls	r3, #0
 800affa:	bf86      	itte	hi
 800affc:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b000:	608b      	strhi	r3, [r1, #8]
 800b002:	9301      	strls	r3, [sp, #4]
 800b004:	680b      	ldr	r3, [r1, #0]
 800b006:	4688      	mov	r8, r1
 800b008:	f04f 0b00 	mov.w	fp, #0
 800b00c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b010:	f848 3b1c 	str.w	r3, [r8], #28
 800b014:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800b018:	4607      	mov	r7, r0
 800b01a:	460c      	mov	r4, r1
 800b01c:	4645      	mov	r5, r8
 800b01e:	465a      	mov	r2, fp
 800b020:	46d9      	mov	r9, fp
 800b022:	f8cd b008 	str.w	fp, [sp, #8]
 800b026:	68a1      	ldr	r1, [r4, #8]
 800b028:	b181      	cbz	r1, 800b04c <_scanf_float+0x70>
 800b02a:	6833      	ldr	r3, [r6, #0]
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	2b49      	cmp	r3, #73	; 0x49
 800b030:	d071      	beq.n	800b116 <_scanf_float+0x13a>
 800b032:	d84d      	bhi.n	800b0d0 <_scanf_float+0xf4>
 800b034:	2b39      	cmp	r3, #57	; 0x39
 800b036:	d840      	bhi.n	800b0ba <_scanf_float+0xde>
 800b038:	2b31      	cmp	r3, #49	; 0x31
 800b03a:	f080 8088 	bcs.w	800b14e <_scanf_float+0x172>
 800b03e:	2b2d      	cmp	r3, #45	; 0x2d
 800b040:	f000 8090 	beq.w	800b164 <_scanf_float+0x188>
 800b044:	d815      	bhi.n	800b072 <_scanf_float+0x96>
 800b046:	2b2b      	cmp	r3, #43	; 0x2b
 800b048:	f000 808c 	beq.w	800b164 <_scanf_float+0x188>
 800b04c:	f1b9 0f00 	cmp.w	r9, #0
 800b050:	d003      	beq.n	800b05a <_scanf_float+0x7e>
 800b052:	6823      	ldr	r3, [r4, #0]
 800b054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b058:	6023      	str	r3, [r4, #0]
 800b05a:	3a01      	subs	r2, #1
 800b05c:	2a01      	cmp	r2, #1
 800b05e:	f200 80ea 	bhi.w	800b236 <_scanf_float+0x25a>
 800b062:	4545      	cmp	r5, r8
 800b064:	f200 80dc 	bhi.w	800b220 <_scanf_float+0x244>
 800b068:	2601      	movs	r6, #1
 800b06a:	4630      	mov	r0, r6
 800b06c:	b007      	add	sp, #28
 800b06e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b072:	2b2e      	cmp	r3, #46	; 0x2e
 800b074:	f000 809f 	beq.w	800b1b6 <_scanf_float+0x1da>
 800b078:	2b30      	cmp	r3, #48	; 0x30
 800b07a:	d1e7      	bne.n	800b04c <_scanf_float+0x70>
 800b07c:	6820      	ldr	r0, [r4, #0]
 800b07e:	f410 7f80 	tst.w	r0, #256	; 0x100
 800b082:	d064      	beq.n	800b14e <_scanf_float+0x172>
 800b084:	9b01      	ldr	r3, [sp, #4]
 800b086:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800b08a:	6020      	str	r0, [r4, #0]
 800b08c:	f109 0901 	add.w	r9, r9, #1
 800b090:	b11b      	cbz	r3, 800b09a <_scanf_float+0xbe>
 800b092:	3b01      	subs	r3, #1
 800b094:	3101      	adds	r1, #1
 800b096:	9301      	str	r3, [sp, #4]
 800b098:	60a1      	str	r1, [r4, #8]
 800b09a:	68a3      	ldr	r3, [r4, #8]
 800b09c:	3b01      	subs	r3, #1
 800b09e:	60a3      	str	r3, [r4, #8]
 800b0a0:	6923      	ldr	r3, [r4, #16]
 800b0a2:	3301      	adds	r3, #1
 800b0a4:	6123      	str	r3, [r4, #16]
 800b0a6:	6873      	ldr	r3, [r6, #4]
 800b0a8:	3b01      	subs	r3, #1
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	6073      	str	r3, [r6, #4]
 800b0ae:	f340 80ac 	ble.w	800b20a <_scanf_float+0x22e>
 800b0b2:	6833      	ldr	r3, [r6, #0]
 800b0b4:	3301      	adds	r3, #1
 800b0b6:	6033      	str	r3, [r6, #0]
 800b0b8:	e7b5      	b.n	800b026 <_scanf_float+0x4a>
 800b0ba:	2b45      	cmp	r3, #69	; 0x45
 800b0bc:	f000 8085 	beq.w	800b1ca <_scanf_float+0x1ee>
 800b0c0:	2b46      	cmp	r3, #70	; 0x46
 800b0c2:	d06a      	beq.n	800b19a <_scanf_float+0x1be>
 800b0c4:	2b41      	cmp	r3, #65	; 0x41
 800b0c6:	d1c1      	bne.n	800b04c <_scanf_float+0x70>
 800b0c8:	2a01      	cmp	r2, #1
 800b0ca:	d1bf      	bne.n	800b04c <_scanf_float+0x70>
 800b0cc:	2202      	movs	r2, #2
 800b0ce:	e046      	b.n	800b15e <_scanf_float+0x182>
 800b0d0:	2b65      	cmp	r3, #101	; 0x65
 800b0d2:	d07a      	beq.n	800b1ca <_scanf_float+0x1ee>
 800b0d4:	d818      	bhi.n	800b108 <_scanf_float+0x12c>
 800b0d6:	2b54      	cmp	r3, #84	; 0x54
 800b0d8:	d066      	beq.n	800b1a8 <_scanf_float+0x1cc>
 800b0da:	d811      	bhi.n	800b100 <_scanf_float+0x124>
 800b0dc:	2b4e      	cmp	r3, #78	; 0x4e
 800b0de:	d1b5      	bne.n	800b04c <_scanf_float+0x70>
 800b0e0:	2a00      	cmp	r2, #0
 800b0e2:	d146      	bne.n	800b172 <_scanf_float+0x196>
 800b0e4:	f1b9 0f00 	cmp.w	r9, #0
 800b0e8:	d145      	bne.n	800b176 <_scanf_float+0x19a>
 800b0ea:	6821      	ldr	r1, [r4, #0]
 800b0ec:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800b0f0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800b0f4:	d13f      	bne.n	800b176 <_scanf_float+0x19a>
 800b0f6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b0fa:	6021      	str	r1, [r4, #0]
 800b0fc:	2201      	movs	r2, #1
 800b0fe:	e02e      	b.n	800b15e <_scanf_float+0x182>
 800b100:	2b59      	cmp	r3, #89	; 0x59
 800b102:	d01e      	beq.n	800b142 <_scanf_float+0x166>
 800b104:	2b61      	cmp	r3, #97	; 0x61
 800b106:	e7de      	b.n	800b0c6 <_scanf_float+0xea>
 800b108:	2b6e      	cmp	r3, #110	; 0x6e
 800b10a:	d0e9      	beq.n	800b0e0 <_scanf_float+0x104>
 800b10c:	d815      	bhi.n	800b13a <_scanf_float+0x15e>
 800b10e:	2b66      	cmp	r3, #102	; 0x66
 800b110:	d043      	beq.n	800b19a <_scanf_float+0x1be>
 800b112:	2b69      	cmp	r3, #105	; 0x69
 800b114:	d19a      	bne.n	800b04c <_scanf_float+0x70>
 800b116:	f1bb 0f00 	cmp.w	fp, #0
 800b11a:	d138      	bne.n	800b18e <_scanf_float+0x1b2>
 800b11c:	f1b9 0f00 	cmp.w	r9, #0
 800b120:	d197      	bne.n	800b052 <_scanf_float+0x76>
 800b122:	6821      	ldr	r1, [r4, #0]
 800b124:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800b128:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800b12c:	d195      	bne.n	800b05a <_scanf_float+0x7e>
 800b12e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b132:	6021      	str	r1, [r4, #0]
 800b134:	f04f 0b01 	mov.w	fp, #1
 800b138:	e011      	b.n	800b15e <_scanf_float+0x182>
 800b13a:	2b74      	cmp	r3, #116	; 0x74
 800b13c:	d034      	beq.n	800b1a8 <_scanf_float+0x1cc>
 800b13e:	2b79      	cmp	r3, #121	; 0x79
 800b140:	d184      	bne.n	800b04c <_scanf_float+0x70>
 800b142:	f1bb 0f07 	cmp.w	fp, #7
 800b146:	d181      	bne.n	800b04c <_scanf_float+0x70>
 800b148:	f04f 0b08 	mov.w	fp, #8
 800b14c:	e007      	b.n	800b15e <_scanf_float+0x182>
 800b14e:	eb12 0f0b 	cmn.w	r2, fp
 800b152:	f47f af7b 	bne.w	800b04c <_scanf_float+0x70>
 800b156:	6821      	ldr	r1, [r4, #0]
 800b158:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800b15c:	6021      	str	r1, [r4, #0]
 800b15e:	702b      	strb	r3, [r5, #0]
 800b160:	3501      	adds	r5, #1
 800b162:	e79a      	b.n	800b09a <_scanf_float+0xbe>
 800b164:	6821      	ldr	r1, [r4, #0]
 800b166:	0608      	lsls	r0, r1, #24
 800b168:	f57f af70 	bpl.w	800b04c <_scanf_float+0x70>
 800b16c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b170:	e7f4      	b.n	800b15c <_scanf_float+0x180>
 800b172:	2a02      	cmp	r2, #2
 800b174:	d047      	beq.n	800b206 <_scanf_float+0x22a>
 800b176:	f1bb 0f01 	cmp.w	fp, #1
 800b17a:	d003      	beq.n	800b184 <_scanf_float+0x1a8>
 800b17c:	f1bb 0f04 	cmp.w	fp, #4
 800b180:	f47f af64 	bne.w	800b04c <_scanf_float+0x70>
 800b184:	f10b 0b01 	add.w	fp, fp, #1
 800b188:	fa5f fb8b 	uxtb.w	fp, fp
 800b18c:	e7e7      	b.n	800b15e <_scanf_float+0x182>
 800b18e:	f1bb 0f03 	cmp.w	fp, #3
 800b192:	d0f7      	beq.n	800b184 <_scanf_float+0x1a8>
 800b194:	f1bb 0f05 	cmp.w	fp, #5
 800b198:	e7f2      	b.n	800b180 <_scanf_float+0x1a4>
 800b19a:	f1bb 0f02 	cmp.w	fp, #2
 800b19e:	f47f af55 	bne.w	800b04c <_scanf_float+0x70>
 800b1a2:	f04f 0b03 	mov.w	fp, #3
 800b1a6:	e7da      	b.n	800b15e <_scanf_float+0x182>
 800b1a8:	f1bb 0f06 	cmp.w	fp, #6
 800b1ac:	f47f af4e 	bne.w	800b04c <_scanf_float+0x70>
 800b1b0:	f04f 0b07 	mov.w	fp, #7
 800b1b4:	e7d3      	b.n	800b15e <_scanf_float+0x182>
 800b1b6:	6821      	ldr	r1, [r4, #0]
 800b1b8:	0588      	lsls	r0, r1, #22
 800b1ba:	f57f af47 	bpl.w	800b04c <_scanf_float+0x70>
 800b1be:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800b1c2:	6021      	str	r1, [r4, #0]
 800b1c4:	f8cd 9008 	str.w	r9, [sp, #8]
 800b1c8:	e7c9      	b.n	800b15e <_scanf_float+0x182>
 800b1ca:	6821      	ldr	r1, [r4, #0]
 800b1cc:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800b1d0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800b1d4:	d006      	beq.n	800b1e4 <_scanf_float+0x208>
 800b1d6:	0548      	lsls	r0, r1, #21
 800b1d8:	f57f af38 	bpl.w	800b04c <_scanf_float+0x70>
 800b1dc:	f1b9 0f00 	cmp.w	r9, #0
 800b1e0:	f43f af3b 	beq.w	800b05a <_scanf_float+0x7e>
 800b1e4:	0588      	lsls	r0, r1, #22
 800b1e6:	bf58      	it	pl
 800b1e8:	9802      	ldrpl	r0, [sp, #8]
 800b1ea:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b1ee:	bf58      	it	pl
 800b1f0:	eba9 0000 	subpl.w	r0, r9, r0
 800b1f4:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800b1f8:	bf58      	it	pl
 800b1fa:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800b1fe:	6021      	str	r1, [r4, #0]
 800b200:	f04f 0900 	mov.w	r9, #0
 800b204:	e7ab      	b.n	800b15e <_scanf_float+0x182>
 800b206:	2203      	movs	r2, #3
 800b208:	e7a9      	b.n	800b15e <_scanf_float+0x182>
 800b20a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b20e:	9205      	str	r2, [sp, #20]
 800b210:	4631      	mov	r1, r6
 800b212:	4638      	mov	r0, r7
 800b214:	4798      	blx	r3
 800b216:	9a05      	ldr	r2, [sp, #20]
 800b218:	2800      	cmp	r0, #0
 800b21a:	f43f af04 	beq.w	800b026 <_scanf_float+0x4a>
 800b21e:	e715      	b.n	800b04c <_scanf_float+0x70>
 800b220:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b224:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b228:	4632      	mov	r2, r6
 800b22a:	4638      	mov	r0, r7
 800b22c:	4798      	blx	r3
 800b22e:	6923      	ldr	r3, [r4, #16]
 800b230:	3b01      	subs	r3, #1
 800b232:	6123      	str	r3, [r4, #16]
 800b234:	e715      	b.n	800b062 <_scanf_float+0x86>
 800b236:	f10b 33ff 	add.w	r3, fp, #4294967295
 800b23a:	2b06      	cmp	r3, #6
 800b23c:	d80a      	bhi.n	800b254 <_scanf_float+0x278>
 800b23e:	f1bb 0f02 	cmp.w	fp, #2
 800b242:	d968      	bls.n	800b316 <_scanf_float+0x33a>
 800b244:	f1ab 0b03 	sub.w	fp, fp, #3
 800b248:	fa5f fb8b 	uxtb.w	fp, fp
 800b24c:	eba5 0b0b 	sub.w	fp, r5, fp
 800b250:	455d      	cmp	r5, fp
 800b252:	d14b      	bne.n	800b2ec <_scanf_float+0x310>
 800b254:	6823      	ldr	r3, [r4, #0]
 800b256:	05da      	lsls	r2, r3, #23
 800b258:	d51f      	bpl.n	800b29a <_scanf_float+0x2be>
 800b25a:	055b      	lsls	r3, r3, #21
 800b25c:	d468      	bmi.n	800b330 <_scanf_float+0x354>
 800b25e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b262:	6923      	ldr	r3, [r4, #16]
 800b264:	2965      	cmp	r1, #101	; 0x65
 800b266:	f103 33ff 	add.w	r3, r3, #4294967295
 800b26a:	f105 3bff 	add.w	fp, r5, #4294967295
 800b26e:	6123      	str	r3, [r4, #16]
 800b270:	d00d      	beq.n	800b28e <_scanf_float+0x2b2>
 800b272:	2945      	cmp	r1, #69	; 0x45
 800b274:	d00b      	beq.n	800b28e <_scanf_float+0x2b2>
 800b276:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b27a:	4632      	mov	r2, r6
 800b27c:	4638      	mov	r0, r7
 800b27e:	4798      	blx	r3
 800b280:	6923      	ldr	r3, [r4, #16]
 800b282:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800b286:	3b01      	subs	r3, #1
 800b288:	f1a5 0b02 	sub.w	fp, r5, #2
 800b28c:	6123      	str	r3, [r4, #16]
 800b28e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b292:	4632      	mov	r2, r6
 800b294:	4638      	mov	r0, r7
 800b296:	4798      	blx	r3
 800b298:	465d      	mov	r5, fp
 800b29a:	6826      	ldr	r6, [r4, #0]
 800b29c:	f016 0610 	ands.w	r6, r6, #16
 800b2a0:	d17a      	bne.n	800b398 <_scanf_float+0x3bc>
 800b2a2:	702e      	strb	r6, [r5, #0]
 800b2a4:	6823      	ldr	r3, [r4, #0]
 800b2a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b2aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2ae:	d142      	bne.n	800b336 <_scanf_float+0x35a>
 800b2b0:	9b02      	ldr	r3, [sp, #8]
 800b2b2:	eba9 0303 	sub.w	r3, r9, r3
 800b2b6:	425a      	negs	r2, r3
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d149      	bne.n	800b350 <_scanf_float+0x374>
 800b2bc:	2200      	movs	r2, #0
 800b2be:	4641      	mov	r1, r8
 800b2c0:	4638      	mov	r0, r7
 800b2c2:	f000 ff45 	bl	800c150 <_strtod_r>
 800b2c6:	6825      	ldr	r5, [r4, #0]
 800b2c8:	f8da 3000 	ldr.w	r3, [sl]
 800b2cc:	f015 0f02 	tst.w	r5, #2
 800b2d0:	f103 0204 	add.w	r2, r3, #4
 800b2d4:	ec59 8b10 	vmov	r8, r9, d0
 800b2d8:	f8ca 2000 	str.w	r2, [sl]
 800b2dc:	d043      	beq.n	800b366 <_scanf_float+0x38a>
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	e9c3 8900 	strd	r8, r9, [r3]
 800b2e4:	68e3      	ldr	r3, [r4, #12]
 800b2e6:	3301      	adds	r3, #1
 800b2e8:	60e3      	str	r3, [r4, #12]
 800b2ea:	e6be      	b.n	800b06a <_scanf_float+0x8e>
 800b2ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b2f0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b2f4:	4632      	mov	r2, r6
 800b2f6:	4638      	mov	r0, r7
 800b2f8:	4798      	blx	r3
 800b2fa:	6923      	ldr	r3, [r4, #16]
 800b2fc:	3b01      	subs	r3, #1
 800b2fe:	6123      	str	r3, [r4, #16]
 800b300:	e7a6      	b.n	800b250 <_scanf_float+0x274>
 800b302:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b306:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b30a:	4632      	mov	r2, r6
 800b30c:	4638      	mov	r0, r7
 800b30e:	4798      	blx	r3
 800b310:	6923      	ldr	r3, [r4, #16]
 800b312:	3b01      	subs	r3, #1
 800b314:	6123      	str	r3, [r4, #16]
 800b316:	4545      	cmp	r5, r8
 800b318:	d8f3      	bhi.n	800b302 <_scanf_float+0x326>
 800b31a:	e6a5      	b.n	800b068 <_scanf_float+0x8c>
 800b31c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b320:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b324:	4632      	mov	r2, r6
 800b326:	4638      	mov	r0, r7
 800b328:	4798      	blx	r3
 800b32a:	6923      	ldr	r3, [r4, #16]
 800b32c:	3b01      	subs	r3, #1
 800b32e:	6123      	str	r3, [r4, #16]
 800b330:	4545      	cmp	r5, r8
 800b332:	d8f3      	bhi.n	800b31c <_scanf_float+0x340>
 800b334:	e698      	b.n	800b068 <_scanf_float+0x8c>
 800b336:	9b03      	ldr	r3, [sp, #12]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d0bf      	beq.n	800b2bc <_scanf_float+0x2e0>
 800b33c:	9904      	ldr	r1, [sp, #16]
 800b33e:	230a      	movs	r3, #10
 800b340:	4632      	mov	r2, r6
 800b342:	3101      	adds	r1, #1
 800b344:	4638      	mov	r0, r7
 800b346:	f000 ff8f 	bl	800c268 <_strtol_r>
 800b34a:	9b03      	ldr	r3, [sp, #12]
 800b34c:	9d04      	ldr	r5, [sp, #16]
 800b34e:	1ac2      	subs	r2, r0, r3
 800b350:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b354:	429d      	cmp	r5, r3
 800b356:	bf28      	it	cs
 800b358:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800b35c:	490f      	ldr	r1, [pc, #60]	; (800b39c <_scanf_float+0x3c0>)
 800b35e:	4628      	mov	r0, r5
 800b360:	f000 f8c4 	bl	800b4ec <siprintf>
 800b364:	e7aa      	b.n	800b2bc <_scanf_float+0x2e0>
 800b366:	f015 0504 	ands.w	r5, r5, #4
 800b36a:	d1b8      	bne.n	800b2de <_scanf_float+0x302>
 800b36c:	681f      	ldr	r7, [r3, #0]
 800b36e:	ee10 2a10 	vmov	r2, s0
 800b372:	464b      	mov	r3, r9
 800b374:	ee10 0a10 	vmov	r0, s0
 800b378:	4649      	mov	r1, r9
 800b37a:	f7f5 fbdf 	bl	8000b3c <__aeabi_dcmpun>
 800b37e:	b128      	cbz	r0, 800b38c <_scanf_float+0x3b0>
 800b380:	4628      	mov	r0, r5
 800b382:	f000 f8ad 	bl	800b4e0 <nanf>
 800b386:	ed87 0a00 	vstr	s0, [r7]
 800b38a:	e7ab      	b.n	800b2e4 <_scanf_float+0x308>
 800b38c:	4640      	mov	r0, r8
 800b38e:	4649      	mov	r1, r9
 800b390:	f7f5 fc32 	bl	8000bf8 <__aeabi_d2f>
 800b394:	6038      	str	r0, [r7, #0]
 800b396:	e7a5      	b.n	800b2e4 <_scanf_float+0x308>
 800b398:	2600      	movs	r6, #0
 800b39a:	e666      	b.n	800b06a <_scanf_float+0x8e>
 800b39c:	0801ee04 	.word	0x0801ee04

0800b3a0 <iprintf>:
 800b3a0:	b40f      	push	{r0, r1, r2, r3}
 800b3a2:	4b0a      	ldr	r3, [pc, #40]	; (800b3cc <iprintf+0x2c>)
 800b3a4:	b513      	push	{r0, r1, r4, lr}
 800b3a6:	681c      	ldr	r4, [r3, #0]
 800b3a8:	b124      	cbz	r4, 800b3b4 <iprintf+0x14>
 800b3aa:	69a3      	ldr	r3, [r4, #24]
 800b3ac:	b913      	cbnz	r3, 800b3b4 <iprintf+0x14>
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	f001 ff62 	bl	800d278 <__sinit>
 800b3b4:	ab05      	add	r3, sp, #20
 800b3b6:	9a04      	ldr	r2, [sp, #16]
 800b3b8:	68a1      	ldr	r1, [r4, #8]
 800b3ba:	9301      	str	r3, [sp, #4]
 800b3bc:	4620      	mov	r0, r4
 800b3be:	f003 f921 	bl	800e604 <_vfiprintf_r>
 800b3c2:	b002      	add	sp, #8
 800b3c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3c8:	b004      	add	sp, #16
 800b3ca:	4770      	bx	lr
 800b3cc:	2000000c 	.word	0x2000000c

0800b3d0 <putchar>:
 800b3d0:	b538      	push	{r3, r4, r5, lr}
 800b3d2:	4b08      	ldr	r3, [pc, #32]	; (800b3f4 <putchar+0x24>)
 800b3d4:	681c      	ldr	r4, [r3, #0]
 800b3d6:	4605      	mov	r5, r0
 800b3d8:	b124      	cbz	r4, 800b3e4 <putchar+0x14>
 800b3da:	69a3      	ldr	r3, [r4, #24]
 800b3dc:	b913      	cbnz	r3, 800b3e4 <putchar+0x14>
 800b3de:	4620      	mov	r0, r4
 800b3e0:	f001 ff4a 	bl	800d278 <__sinit>
 800b3e4:	68a2      	ldr	r2, [r4, #8]
 800b3e6:	4629      	mov	r1, r5
 800b3e8:	4620      	mov	r0, r4
 800b3ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3ee:	f003 ba1f 	b.w	800e830 <_putc_r>
 800b3f2:	bf00      	nop
 800b3f4:	2000000c 	.word	0x2000000c

0800b3f8 <_puts_r>:
 800b3f8:	b570      	push	{r4, r5, r6, lr}
 800b3fa:	460e      	mov	r6, r1
 800b3fc:	4605      	mov	r5, r0
 800b3fe:	b118      	cbz	r0, 800b408 <_puts_r+0x10>
 800b400:	6983      	ldr	r3, [r0, #24]
 800b402:	b90b      	cbnz	r3, 800b408 <_puts_r+0x10>
 800b404:	f001 ff38 	bl	800d278 <__sinit>
 800b408:	69ab      	ldr	r3, [r5, #24]
 800b40a:	68ac      	ldr	r4, [r5, #8]
 800b40c:	b913      	cbnz	r3, 800b414 <_puts_r+0x1c>
 800b40e:	4628      	mov	r0, r5
 800b410:	f001 ff32 	bl	800d278 <__sinit>
 800b414:	4b23      	ldr	r3, [pc, #140]	; (800b4a4 <_puts_r+0xac>)
 800b416:	429c      	cmp	r4, r3
 800b418:	d117      	bne.n	800b44a <_puts_r+0x52>
 800b41a:	686c      	ldr	r4, [r5, #4]
 800b41c:	89a3      	ldrh	r3, [r4, #12]
 800b41e:	071b      	lsls	r3, r3, #28
 800b420:	d51d      	bpl.n	800b45e <_puts_r+0x66>
 800b422:	6923      	ldr	r3, [r4, #16]
 800b424:	b1db      	cbz	r3, 800b45e <_puts_r+0x66>
 800b426:	3e01      	subs	r6, #1
 800b428:	68a3      	ldr	r3, [r4, #8]
 800b42a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b42e:	3b01      	subs	r3, #1
 800b430:	60a3      	str	r3, [r4, #8]
 800b432:	b9e9      	cbnz	r1, 800b470 <_puts_r+0x78>
 800b434:	2b00      	cmp	r3, #0
 800b436:	da2e      	bge.n	800b496 <_puts_r+0x9e>
 800b438:	4622      	mov	r2, r4
 800b43a:	210a      	movs	r1, #10
 800b43c:	4628      	mov	r0, r5
 800b43e:	f000 ff25 	bl	800c28c <__swbuf_r>
 800b442:	3001      	adds	r0, #1
 800b444:	d011      	beq.n	800b46a <_puts_r+0x72>
 800b446:	200a      	movs	r0, #10
 800b448:	e011      	b.n	800b46e <_puts_r+0x76>
 800b44a:	4b17      	ldr	r3, [pc, #92]	; (800b4a8 <_puts_r+0xb0>)
 800b44c:	429c      	cmp	r4, r3
 800b44e:	d101      	bne.n	800b454 <_puts_r+0x5c>
 800b450:	68ac      	ldr	r4, [r5, #8]
 800b452:	e7e3      	b.n	800b41c <_puts_r+0x24>
 800b454:	4b15      	ldr	r3, [pc, #84]	; (800b4ac <_puts_r+0xb4>)
 800b456:	429c      	cmp	r4, r3
 800b458:	bf08      	it	eq
 800b45a:	68ec      	ldreq	r4, [r5, #12]
 800b45c:	e7de      	b.n	800b41c <_puts_r+0x24>
 800b45e:	4621      	mov	r1, r4
 800b460:	4628      	mov	r0, r5
 800b462:	f000 ff65 	bl	800c330 <__swsetup_r>
 800b466:	2800      	cmp	r0, #0
 800b468:	d0dd      	beq.n	800b426 <_puts_r+0x2e>
 800b46a:	f04f 30ff 	mov.w	r0, #4294967295
 800b46e:	bd70      	pop	{r4, r5, r6, pc}
 800b470:	2b00      	cmp	r3, #0
 800b472:	da04      	bge.n	800b47e <_puts_r+0x86>
 800b474:	69a2      	ldr	r2, [r4, #24]
 800b476:	429a      	cmp	r2, r3
 800b478:	dc06      	bgt.n	800b488 <_puts_r+0x90>
 800b47a:	290a      	cmp	r1, #10
 800b47c:	d004      	beq.n	800b488 <_puts_r+0x90>
 800b47e:	6823      	ldr	r3, [r4, #0]
 800b480:	1c5a      	adds	r2, r3, #1
 800b482:	6022      	str	r2, [r4, #0]
 800b484:	7019      	strb	r1, [r3, #0]
 800b486:	e7cf      	b.n	800b428 <_puts_r+0x30>
 800b488:	4622      	mov	r2, r4
 800b48a:	4628      	mov	r0, r5
 800b48c:	f000 fefe 	bl	800c28c <__swbuf_r>
 800b490:	3001      	adds	r0, #1
 800b492:	d1c9      	bne.n	800b428 <_puts_r+0x30>
 800b494:	e7e9      	b.n	800b46a <_puts_r+0x72>
 800b496:	6823      	ldr	r3, [r4, #0]
 800b498:	200a      	movs	r0, #10
 800b49a:	1c5a      	adds	r2, r3, #1
 800b49c:	6022      	str	r2, [r4, #0]
 800b49e:	7018      	strb	r0, [r3, #0]
 800b4a0:	e7e5      	b.n	800b46e <_puts_r+0x76>
 800b4a2:	bf00      	nop
 800b4a4:	0801ee90 	.word	0x0801ee90
 800b4a8:	0801eeb0 	.word	0x0801eeb0
 800b4ac:	0801ee70 	.word	0x0801ee70

0800b4b0 <puts>:
 800b4b0:	4b02      	ldr	r3, [pc, #8]	; (800b4bc <puts+0xc>)
 800b4b2:	4601      	mov	r1, r0
 800b4b4:	6818      	ldr	r0, [r3, #0]
 800b4b6:	f7ff bf9f 	b.w	800b3f8 <_puts_r>
 800b4ba:	bf00      	nop
 800b4bc:	2000000c 	.word	0x2000000c

0800b4c0 <_sbrk_r>:
 800b4c0:	b538      	push	{r3, r4, r5, lr}
 800b4c2:	4c06      	ldr	r4, [pc, #24]	; (800b4dc <_sbrk_r+0x1c>)
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	4605      	mov	r5, r0
 800b4c8:	4608      	mov	r0, r1
 800b4ca:	6023      	str	r3, [r4, #0]
 800b4cc:	f7f6 fa92 	bl	80019f4 <_sbrk>
 800b4d0:	1c43      	adds	r3, r0, #1
 800b4d2:	d102      	bne.n	800b4da <_sbrk_r+0x1a>
 800b4d4:	6823      	ldr	r3, [r4, #0]
 800b4d6:	b103      	cbz	r3, 800b4da <_sbrk_r+0x1a>
 800b4d8:	602b      	str	r3, [r5, #0]
 800b4da:	bd38      	pop	{r3, r4, r5, pc}
 800b4dc:	20000f00 	.word	0x20000f00

0800b4e0 <nanf>:
 800b4e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b4e8 <nanf+0x8>
 800b4e4:	4770      	bx	lr
 800b4e6:	bf00      	nop
 800b4e8:	7fc00000 	.word	0x7fc00000

0800b4ec <siprintf>:
 800b4ec:	b40e      	push	{r1, r2, r3}
 800b4ee:	b500      	push	{lr}
 800b4f0:	b09c      	sub	sp, #112	; 0x70
 800b4f2:	ab1d      	add	r3, sp, #116	; 0x74
 800b4f4:	9002      	str	r0, [sp, #8]
 800b4f6:	9006      	str	r0, [sp, #24]
 800b4f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b4fc:	4809      	ldr	r0, [pc, #36]	; (800b524 <siprintf+0x38>)
 800b4fe:	9107      	str	r1, [sp, #28]
 800b500:	9104      	str	r1, [sp, #16]
 800b502:	4909      	ldr	r1, [pc, #36]	; (800b528 <siprintf+0x3c>)
 800b504:	f853 2b04 	ldr.w	r2, [r3], #4
 800b508:	9105      	str	r1, [sp, #20]
 800b50a:	6800      	ldr	r0, [r0, #0]
 800b50c:	9301      	str	r3, [sp, #4]
 800b50e:	a902      	add	r1, sp, #8
 800b510:	f002 ff56 	bl	800e3c0 <_svfiprintf_r>
 800b514:	9b02      	ldr	r3, [sp, #8]
 800b516:	2200      	movs	r2, #0
 800b518:	701a      	strb	r2, [r3, #0]
 800b51a:	b01c      	add	sp, #112	; 0x70
 800b51c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b520:	b003      	add	sp, #12
 800b522:	4770      	bx	lr
 800b524:	2000000c 	.word	0x2000000c
 800b528:	ffff0208 	.word	0xffff0208

0800b52c <sulp>:
 800b52c:	b570      	push	{r4, r5, r6, lr}
 800b52e:	4604      	mov	r4, r0
 800b530:	460d      	mov	r5, r1
 800b532:	ec45 4b10 	vmov	d0, r4, r5
 800b536:	4616      	mov	r6, r2
 800b538:	f002 fda6 	bl	800e088 <__ulp>
 800b53c:	ec51 0b10 	vmov	r0, r1, d0
 800b540:	b17e      	cbz	r6, 800b562 <sulp+0x36>
 800b542:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b546:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	dd09      	ble.n	800b562 <sulp+0x36>
 800b54e:	051b      	lsls	r3, r3, #20
 800b550:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b554:	2400      	movs	r4, #0
 800b556:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b55a:	4622      	mov	r2, r4
 800b55c:	462b      	mov	r3, r5
 800b55e:	f7f5 f853 	bl	8000608 <__aeabi_dmul>
 800b562:	bd70      	pop	{r4, r5, r6, pc}
 800b564:	0000      	movs	r0, r0
	...

0800b568 <_strtod_l>:
 800b568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b56c:	461f      	mov	r7, r3
 800b56e:	b0a1      	sub	sp, #132	; 0x84
 800b570:	2300      	movs	r3, #0
 800b572:	4681      	mov	r9, r0
 800b574:	4638      	mov	r0, r7
 800b576:	460e      	mov	r6, r1
 800b578:	9217      	str	r2, [sp, #92]	; 0x5c
 800b57a:	931c      	str	r3, [sp, #112]	; 0x70
 800b57c:	f002 fa2f 	bl	800d9de <__localeconv_l>
 800b580:	4680      	mov	r8, r0
 800b582:	6800      	ldr	r0, [r0, #0]
 800b584:	f7f4 fe2c 	bl	80001e0 <strlen>
 800b588:	f04f 0a00 	mov.w	sl, #0
 800b58c:	4604      	mov	r4, r0
 800b58e:	f04f 0b00 	mov.w	fp, #0
 800b592:	961b      	str	r6, [sp, #108]	; 0x6c
 800b594:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b596:	781a      	ldrb	r2, [r3, #0]
 800b598:	2a0d      	cmp	r2, #13
 800b59a:	d832      	bhi.n	800b602 <_strtod_l+0x9a>
 800b59c:	2a09      	cmp	r2, #9
 800b59e:	d236      	bcs.n	800b60e <_strtod_l+0xa6>
 800b5a0:	2a00      	cmp	r2, #0
 800b5a2:	d03e      	beq.n	800b622 <_strtod_l+0xba>
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	930d      	str	r3, [sp, #52]	; 0x34
 800b5a8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b5aa:	782b      	ldrb	r3, [r5, #0]
 800b5ac:	2b30      	cmp	r3, #48	; 0x30
 800b5ae:	f040 80ac 	bne.w	800b70a <_strtod_l+0x1a2>
 800b5b2:	786b      	ldrb	r3, [r5, #1]
 800b5b4:	2b58      	cmp	r3, #88	; 0x58
 800b5b6:	d001      	beq.n	800b5bc <_strtod_l+0x54>
 800b5b8:	2b78      	cmp	r3, #120	; 0x78
 800b5ba:	d167      	bne.n	800b68c <_strtod_l+0x124>
 800b5bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5be:	9301      	str	r3, [sp, #4]
 800b5c0:	ab1c      	add	r3, sp, #112	; 0x70
 800b5c2:	9300      	str	r3, [sp, #0]
 800b5c4:	9702      	str	r7, [sp, #8]
 800b5c6:	ab1d      	add	r3, sp, #116	; 0x74
 800b5c8:	4a88      	ldr	r2, [pc, #544]	; (800b7ec <_strtod_l+0x284>)
 800b5ca:	a91b      	add	r1, sp, #108	; 0x6c
 800b5cc:	4648      	mov	r0, r9
 800b5ce:	f001 ff2c 	bl	800d42a <__gethex>
 800b5d2:	f010 0407 	ands.w	r4, r0, #7
 800b5d6:	4606      	mov	r6, r0
 800b5d8:	d005      	beq.n	800b5e6 <_strtod_l+0x7e>
 800b5da:	2c06      	cmp	r4, #6
 800b5dc:	d12b      	bne.n	800b636 <_strtod_l+0xce>
 800b5de:	3501      	adds	r5, #1
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	951b      	str	r5, [sp, #108]	; 0x6c
 800b5e4:	930d      	str	r3, [sp, #52]	; 0x34
 800b5e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	f040 859a 	bne.w	800c122 <_strtod_l+0xbba>
 800b5ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5f0:	b1e3      	cbz	r3, 800b62c <_strtod_l+0xc4>
 800b5f2:	4652      	mov	r2, sl
 800b5f4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b5f8:	ec43 2b10 	vmov	d0, r2, r3
 800b5fc:	b021      	add	sp, #132	; 0x84
 800b5fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b602:	2a2b      	cmp	r2, #43	; 0x2b
 800b604:	d015      	beq.n	800b632 <_strtod_l+0xca>
 800b606:	2a2d      	cmp	r2, #45	; 0x2d
 800b608:	d004      	beq.n	800b614 <_strtod_l+0xac>
 800b60a:	2a20      	cmp	r2, #32
 800b60c:	d1ca      	bne.n	800b5a4 <_strtod_l+0x3c>
 800b60e:	3301      	adds	r3, #1
 800b610:	931b      	str	r3, [sp, #108]	; 0x6c
 800b612:	e7bf      	b.n	800b594 <_strtod_l+0x2c>
 800b614:	2201      	movs	r2, #1
 800b616:	920d      	str	r2, [sp, #52]	; 0x34
 800b618:	1c5a      	adds	r2, r3, #1
 800b61a:	921b      	str	r2, [sp, #108]	; 0x6c
 800b61c:	785b      	ldrb	r3, [r3, #1]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d1c2      	bne.n	800b5a8 <_strtod_l+0x40>
 800b622:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b624:	961b      	str	r6, [sp, #108]	; 0x6c
 800b626:	2b00      	cmp	r3, #0
 800b628:	f040 8579 	bne.w	800c11e <_strtod_l+0xbb6>
 800b62c:	4652      	mov	r2, sl
 800b62e:	465b      	mov	r3, fp
 800b630:	e7e2      	b.n	800b5f8 <_strtod_l+0x90>
 800b632:	2200      	movs	r2, #0
 800b634:	e7ef      	b.n	800b616 <_strtod_l+0xae>
 800b636:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b638:	b13a      	cbz	r2, 800b64a <_strtod_l+0xe2>
 800b63a:	2135      	movs	r1, #53	; 0x35
 800b63c:	a81e      	add	r0, sp, #120	; 0x78
 800b63e:	f002 fe1b 	bl	800e278 <__copybits>
 800b642:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b644:	4648      	mov	r0, r9
 800b646:	f002 fa87 	bl	800db58 <_Bfree>
 800b64a:	3c01      	subs	r4, #1
 800b64c:	2c04      	cmp	r4, #4
 800b64e:	d806      	bhi.n	800b65e <_strtod_l+0xf6>
 800b650:	e8df f004 	tbb	[pc, r4]
 800b654:	1714030a 	.word	0x1714030a
 800b658:	0a          	.byte	0x0a
 800b659:	00          	.byte	0x00
 800b65a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800b65e:	0730      	lsls	r0, r6, #28
 800b660:	d5c1      	bpl.n	800b5e6 <_strtod_l+0x7e>
 800b662:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b666:	e7be      	b.n	800b5e6 <_strtod_l+0x7e>
 800b668:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800b66c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b66e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b672:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b676:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b67a:	e7f0      	b.n	800b65e <_strtod_l+0xf6>
 800b67c:	f8df b170 	ldr.w	fp, [pc, #368]	; 800b7f0 <_strtod_l+0x288>
 800b680:	e7ed      	b.n	800b65e <_strtod_l+0xf6>
 800b682:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b686:	f04f 3aff 	mov.w	sl, #4294967295
 800b68a:	e7e8      	b.n	800b65e <_strtod_l+0xf6>
 800b68c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b68e:	1c5a      	adds	r2, r3, #1
 800b690:	921b      	str	r2, [sp, #108]	; 0x6c
 800b692:	785b      	ldrb	r3, [r3, #1]
 800b694:	2b30      	cmp	r3, #48	; 0x30
 800b696:	d0f9      	beq.n	800b68c <_strtod_l+0x124>
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d0a4      	beq.n	800b5e6 <_strtod_l+0x7e>
 800b69c:	2301      	movs	r3, #1
 800b69e:	2500      	movs	r5, #0
 800b6a0:	9306      	str	r3, [sp, #24]
 800b6a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b6a4:	9308      	str	r3, [sp, #32]
 800b6a6:	9507      	str	r5, [sp, #28]
 800b6a8:	9505      	str	r5, [sp, #20]
 800b6aa:	220a      	movs	r2, #10
 800b6ac:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b6ae:	7807      	ldrb	r7, [r0, #0]
 800b6b0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800b6b4:	b2d9      	uxtb	r1, r3
 800b6b6:	2909      	cmp	r1, #9
 800b6b8:	d929      	bls.n	800b70e <_strtod_l+0x1a6>
 800b6ba:	4622      	mov	r2, r4
 800b6bc:	f8d8 1000 	ldr.w	r1, [r8]
 800b6c0:	f003 f92f 	bl	800e922 <strncmp>
 800b6c4:	2800      	cmp	r0, #0
 800b6c6:	d031      	beq.n	800b72c <_strtod_l+0x1c4>
 800b6c8:	2000      	movs	r0, #0
 800b6ca:	9c05      	ldr	r4, [sp, #20]
 800b6cc:	9004      	str	r0, [sp, #16]
 800b6ce:	463b      	mov	r3, r7
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	2b65      	cmp	r3, #101	; 0x65
 800b6d4:	d001      	beq.n	800b6da <_strtod_l+0x172>
 800b6d6:	2b45      	cmp	r3, #69	; 0x45
 800b6d8:	d114      	bne.n	800b704 <_strtod_l+0x19c>
 800b6da:	b924      	cbnz	r4, 800b6e6 <_strtod_l+0x17e>
 800b6dc:	b910      	cbnz	r0, 800b6e4 <_strtod_l+0x17c>
 800b6de:	9b06      	ldr	r3, [sp, #24]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d09e      	beq.n	800b622 <_strtod_l+0xba>
 800b6e4:	2400      	movs	r4, #0
 800b6e6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800b6e8:	1c73      	adds	r3, r6, #1
 800b6ea:	931b      	str	r3, [sp, #108]	; 0x6c
 800b6ec:	7873      	ldrb	r3, [r6, #1]
 800b6ee:	2b2b      	cmp	r3, #43	; 0x2b
 800b6f0:	d078      	beq.n	800b7e4 <_strtod_l+0x27c>
 800b6f2:	2b2d      	cmp	r3, #45	; 0x2d
 800b6f4:	d070      	beq.n	800b7d8 <_strtod_l+0x270>
 800b6f6:	f04f 0c00 	mov.w	ip, #0
 800b6fa:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800b6fe:	2f09      	cmp	r7, #9
 800b700:	d97c      	bls.n	800b7fc <_strtod_l+0x294>
 800b702:	961b      	str	r6, [sp, #108]	; 0x6c
 800b704:	f04f 0e00 	mov.w	lr, #0
 800b708:	e09a      	b.n	800b840 <_strtod_l+0x2d8>
 800b70a:	2300      	movs	r3, #0
 800b70c:	e7c7      	b.n	800b69e <_strtod_l+0x136>
 800b70e:	9905      	ldr	r1, [sp, #20]
 800b710:	2908      	cmp	r1, #8
 800b712:	bfdd      	ittte	le
 800b714:	9907      	ldrle	r1, [sp, #28]
 800b716:	fb02 3301 	mlale	r3, r2, r1, r3
 800b71a:	9307      	strle	r3, [sp, #28]
 800b71c:	fb02 3505 	mlagt	r5, r2, r5, r3
 800b720:	9b05      	ldr	r3, [sp, #20]
 800b722:	3001      	adds	r0, #1
 800b724:	3301      	adds	r3, #1
 800b726:	9305      	str	r3, [sp, #20]
 800b728:	901b      	str	r0, [sp, #108]	; 0x6c
 800b72a:	e7bf      	b.n	800b6ac <_strtod_l+0x144>
 800b72c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b72e:	191a      	adds	r2, r3, r4
 800b730:	921b      	str	r2, [sp, #108]	; 0x6c
 800b732:	9a05      	ldr	r2, [sp, #20]
 800b734:	5d1b      	ldrb	r3, [r3, r4]
 800b736:	2a00      	cmp	r2, #0
 800b738:	d037      	beq.n	800b7aa <_strtod_l+0x242>
 800b73a:	9c05      	ldr	r4, [sp, #20]
 800b73c:	4602      	mov	r2, r0
 800b73e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b742:	2909      	cmp	r1, #9
 800b744:	d913      	bls.n	800b76e <_strtod_l+0x206>
 800b746:	2101      	movs	r1, #1
 800b748:	9104      	str	r1, [sp, #16]
 800b74a:	e7c2      	b.n	800b6d2 <_strtod_l+0x16a>
 800b74c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b74e:	1c5a      	adds	r2, r3, #1
 800b750:	921b      	str	r2, [sp, #108]	; 0x6c
 800b752:	785b      	ldrb	r3, [r3, #1]
 800b754:	3001      	adds	r0, #1
 800b756:	2b30      	cmp	r3, #48	; 0x30
 800b758:	d0f8      	beq.n	800b74c <_strtod_l+0x1e4>
 800b75a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800b75e:	2a08      	cmp	r2, #8
 800b760:	f200 84e4 	bhi.w	800c12c <_strtod_l+0xbc4>
 800b764:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b766:	9208      	str	r2, [sp, #32]
 800b768:	4602      	mov	r2, r0
 800b76a:	2000      	movs	r0, #0
 800b76c:	4604      	mov	r4, r0
 800b76e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800b772:	f100 0101 	add.w	r1, r0, #1
 800b776:	d012      	beq.n	800b79e <_strtod_l+0x236>
 800b778:	440a      	add	r2, r1
 800b77a:	eb00 0c04 	add.w	ip, r0, r4
 800b77e:	4621      	mov	r1, r4
 800b780:	270a      	movs	r7, #10
 800b782:	458c      	cmp	ip, r1
 800b784:	d113      	bne.n	800b7ae <_strtod_l+0x246>
 800b786:	1821      	adds	r1, r4, r0
 800b788:	2908      	cmp	r1, #8
 800b78a:	f104 0401 	add.w	r4, r4, #1
 800b78e:	4404      	add	r4, r0
 800b790:	dc19      	bgt.n	800b7c6 <_strtod_l+0x25e>
 800b792:	9b07      	ldr	r3, [sp, #28]
 800b794:	210a      	movs	r1, #10
 800b796:	fb01 e303 	mla	r3, r1, r3, lr
 800b79a:	9307      	str	r3, [sp, #28]
 800b79c:	2100      	movs	r1, #0
 800b79e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b7a0:	1c58      	adds	r0, r3, #1
 800b7a2:	901b      	str	r0, [sp, #108]	; 0x6c
 800b7a4:	785b      	ldrb	r3, [r3, #1]
 800b7a6:	4608      	mov	r0, r1
 800b7a8:	e7c9      	b.n	800b73e <_strtod_l+0x1d6>
 800b7aa:	9805      	ldr	r0, [sp, #20]
 800b7ac:	e7d3      	b.n	800b756 <_strtod_l+0x1ee>
 800b7ae:	2908      	cmp	r1, #8
 800b7b0:	f101 0101 	add.w	r1, r1, #1
 800b7b4:	dc03      	bgt.n	800b7be <_strtod_l+0x256>
 800b7b6:	9b07      	ldr	r3, [sp, #28]
 800b7b8:	437b      	muls	r3, r7
 800b7ba:	9307      	str	r3, [sp, #28]
 800b7bc:	e7e1      	b.n	800b782 <_strtod_l+0x21a>
 800b7be:	2910      	cmp	r1, #16
 800b7c0:	bfd8      	it	le
 800b7c2:	437d      	mulle	r5, r7
 800b7c4:	e7dd      	b.n	800b782 <_strtod_l+0x21a>
 800b7c6:	2c10      	cmp	r4, #16
 800b7c8:	bfdc      	itt	le
 800b7ca:	210a      	movle	r1, #10
 800b7cc:	fb01 e505 	mlale	r5, r1, r5, lr
 800b7d0:	e7e4      	b.n	800b79c <_strtod_l+0x234>
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	9304      	str	r3, [sp, #16]
 800b7d6:	e781      	b.n	800b6dc <_strtod_l+0x174>
 800b7d8:	f04f 0c01 	mov.w	ip, #1
 800b7dc:	1cb3      	adds	r3, r6, #2
 800b7de:	931b      	str	r3, [sp, #108]	; 0x6c
 800b7e0:	78b3      	ldrb	r3, [r6, #2]
 800b7e2:	e78a      	b.n	800b6fa <_strtod_l+0x192>
 800b7e4:	f04f 0c00 	mov.w	ip, #0
 800b7e8:	e7f8      	b.n	800b7dc <_strtod_l+0x274>
 800b7ea:	bf00      	nop
 800b7ec:	0801ee0c 	.word	0x0801ee0c
 800b7f0:	7ff00000 	.word	0x7ff00000
 800b7f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b7f6:	1c5f      	adds	r7, r3, #1
 800b7f8:	971b      	str	r7, [sp, #108]	; 0x6c
 800b7fa:	785b      	ldrb	r3, [r3, #1]
 800b7fc:	2b30      	cmp	r3, #48	; 0x30
 800b7fe:	d0f9      	beq.n	800b7f4 <_strtod_l+0x28c>
 800b800:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800b804:	2f08      	cmp	r7, #8
 800b806:	f63f af7d 	bhi.w	800b704 <_strtod_l+0x19c>
 800b80a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800b80e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b810:	930a      	str	r3, [sp, #40]	; 0x28
 800b812:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b814:	1c5f      	adds	r7, r3, #1
 800b816:	971b      	str	r7, [sp, #108]	; 0x6c
 800b818:	785b      	ldrb	r3, [r3, #1]
 800b81a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800b81e:	f1b8 0f09 	cmp.w	r8, #9
 800b822:	d937      	bls.n	800b894 <_strtod_l+0x32c>
 800b824:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b826:	1a7f      	subs	r7, r7, r1
 800b828:	2f08      	cmp	r7, #8
 800b82a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b82e:	dc37      	bgt.n	800b8a0 <_strtod_l+0x338>
 800b830:	45be      	cmp	lr, r7
 800b832:	bfa8      	it	ge
 800b834:	46be      	movge	lr, r7
 800b836:	f1bc 0f00 	cmp.w	ip, #0
 800b83a:	d001      	beq.n	800b840 <_strtod_l+0x2d8>
 800b83c:	f1ce 0e00 	rsb	lr, lr, #0
 800b840:	2c00      	cmp	r4, #0
 800b842:	d151      	bne.n	800b8e8 <_strtod_l+0x380>
 800b844:	2800      	cmp	r0, #0
 800b846:	f47f aece 	bne.w	800b5e6 <_strtod_l+0x7e>
 800b84a:	9a06      	ldr	r2, [sp, #24]
 800b84c:	2a00      	cmp	r2, #0
 800b84e:	f47f aeca 	bne.w	800b5e6 <_strtod_l+0x7e>
 800b852:	9a04      	ldr	r2, [sp, #16]
 800b854:	2a00      	cmp	r2, #0
 800b856:	f47f aee4 	bne.w	800b622 <_strtod_l+0xba>
 800b85a:	2b4e      	cmp	r3, #78	; 0x4e
 800b85c:	d027      	beq.n	800b8ae <_strtod_l+0x346>
 800b85e:	dc21      	bgt.n	800b8a4 <_strtod_l+0x33c>
 800b860:	2b49      	cmp	r3, #73	; 0x49
 800b862:	f47f aede 	bne.w	800b622 <_strtod_l+0xba>
 800b866:	49a0      	ldr	r1, [pc, #640]	; (800bae8 <_strtod_l+0x580>)
 800b868:	a81b      	add	r0, sp, #108	; 0x6c
 800b86a:	f002 f811 	bl	800d890 <__match>
 800b86e:	2800      	cmp	r0, #0
 800b870:	f43f aed7 	beq.w	800b622 <_strtod_l+0xba>
 800b874:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b876:	499d      	ldr	r1, [pc, #628]	; (800baec <_strtod_l+0x584>)
 800b878:	3b01      	subs	r3, #1
 800b87a:	a81b      	add	r0, sp, #108	; 0x6c
 800b87c:	931b      	str	r3, [sp, #108]	; 0x6c
 800b87e:	f002 f807 	bl	800d890 <__match>
 800b882:	b910      	cbnz	r0, 800b88a <_strtod_l+0x322>
 800b884:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b886:	3301      	adds	r3, #1
 800b888:	931b      	str	r3, [sp, #108]	; 0x6c
 800b88a:	f8df b274 	ldr.w	fp, [pc, #628]	; 800bb00 <_strtod_l+0x598>
 800b88e:	f04f 0a00 	mov.w	sl, #0
 800b892:	e6a8      	b.n	800b5e6 <_strtod_l+0x7e>
 800b894:	210a      	movs	r1, #10
 800b896:	fb01 3e0e 	mla	lr, r1, lr, r3
 800b89a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b89e:	e7b8      	b.n	800b812 <_strtod_l+0x2aa>
 800b8a0:	46be      	mov	lr, r7
 800b8a2:	e7c8      	b.n	800b836 <_strtod_l+0x2ce>
 800b8a4:	2b69      	cmp	r3, #105	; 0x69
 800b8a6:	d0de      	beq.n	800b866 <_strtod_l+0x2fe>
 800b8a8:	2b6e      	cmp	r3, #110	; 0x6e
 800b8aa:	f47f aeba 	bne.w	800b622 <_strtod_l+0xba>
 800b8ae:	4990      	ldr	r1, [pc, #576]	; (800baf0 <_strtod_l+0x588>)
 800b8b0:	a81b      	add	r0, sp, #108	; 0x6c
 800b8b2:	f001 ffed 	bl	800d890 <__match>
 800b8b6:	2800      	cmp	r0, #0
 800b8b8:	f43f aeb3 	beq.w	800b622 <_strtod_l+0xba>
 800b8bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b8be:	781b      	ldrb	r3, [r3, #0]
 800b8c0:	2b28      	cmp	r3, #40	; 0x28
 800b8c2:	d10e      	bne.n	800b8e2 <_strtod_l+0x37a>
 800b8c4:	aa1e      	add	r2, sp, #120	; 0x78
 800b8c6:	498b      	ldr	r1, [pc, #556]	; (800baf4 <_strtod_l+0x58c>)
 800b8c8:	a81b      	add	r0, sp, #108	; 0x6c
 800b8ca:	f001 fff5 	bl	800d8b8 <__hexnan>
 800b8ce:	2805      	cmp	r0, #5
 800b8d0:	d107      	bne.n	800b8e2 <_strtod_l+0x37a>
 800b8d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b8d4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800b8d8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b8dc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b8e0:	e681      	b.n	800b5e6 <_strtod_l+0x7e>
 800b8e2:	f8df b224 	ldr.w	fp, [pc, #548]	; 800bb08 <_strtod_l+0x5a0>
 800b8e6:	e7d2      	b.n	800b88e <_strtod_l+0x326>
 800b8e8:	ebae 0302 	sub.w	r3, lr, r2
 800b8ec:	9306      	str	r3, [sp, #24]
 800b8ee:	9b05      	ldr	r3, [sp, #20]
 800b8f0:	9807      	ldr	r0, [sp, #28]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	bf08      	it	eq
 800b8f6:	4623      	moveq	r3, r4
 800b8f8:	2c10      	cmp	r4, #16
 800b8fa:	9305      	str	r3, [sp, #20]
 800b8fc:	46a0      	mov	r8, r4
 800b8fe:	bfa8      	it	ge
 800b900:	f04f 0810 	movge.w	r8, #16
 800b904:	f7f4 fe06 	bl	8000514 <__aeabi_ui2d>
 800b908:	2c09      	cmp	r4, #9
 800b90a:	4682      	mov	sl, r0
 800b90c:	468b      	mov	fp, r1
 800b90e:	dc13      	bgt.n	800b938 <_strtod_l+0x3d0>
 800b910:	9b06      	ldr	r3, [sp, #24]
 800b912:	2b00      	cmp	r3, #0
 800b914:	f43f ae67 	beq.w	800b5e6 <_strtod_l+0x7e>
 800b918:	9b06      	ldr	r3, [sp, #24]
 800b91a:	dd7a      	ble.n	800ba12 <_strtod_l+0x4aa>
 800b91c:	2b16      	cmp	r3, #22
 800b91e:	dc61      	bgt.n	800b9e4 <_strtod_l+0x47c>
 800b920:	4a75      	ldr	r2, [pc, #468]	; (800baf8 <_strtod_l+0x590>)
 800b922:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800b926:	e9de 0100 	ldrd	r0, r1, [lr]
 800b92a:	4652      	mov	r2, sl
 800b92c:	465b      	mov	r3, fp
 800b92e:	f7f4 fe6b 	bl	8000608 <__aeabi_dmul>
 800b932:	4682      	mov	sl, r0
 800b934:	468b      	mov	fp, r1
 800b936:	e656      	b.n	800b5e6 <_strtod_l+0x7e>
 800b938:	4b6f      	ldr	r3, [pc, #444]	; (800baf8 <_strtod_l+0x590>)
 800b93a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b93e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b942:	f7f4 fe61 	bl	8000608 <__aeabi_dmul>
 800b946:	4606      	mov	r6, r0
 800b948:	4628      	mov	r0, r5
 800b94a:	460f      	mov	r7, r1
 800b94c:	f7f4 fde2 	bl	8000514 <__aeabi_ui2d>
 800b950:	4602      	mov	r2, r0
 800b952:	460b      	mov	r3, r1
 800b954:	4630      	mov	r0, r6
 800b956:	4639      	mov	r1, r7
 800b958:	f7f4 fca0 	bl	800029c <__adddf3>
 800b95c:	2c0f      	cmp	r4, #15
 800b95e:	4682      	mov	sl, r0
 800b960:	468b      	mov	fp, r1
 800b962:	ddd5      	ble.n	800b910 <_strtod_l+0x3a8>
 800b964:	9b06      	ldr	r3, [sp, #24]
 800b966:	eba4 0808 	sub.w	r8, r4, r8
 800b96a:	4498      	add	r8, r3
 800b96c:	f1b8 0f00 	cmp.w	r8, #0
 800b970:	f340 8096 	ble.w	800baa0 <_strtod_l+0x538>
 800b974:	f018 030f 	ands.w	r3, r8, #15
 800b978:	d00a      	beq.n	800b990 <_strtod_l+0x428>
 800b97a:	495f      	ldr	r1, [pc, #380]	; (800baf8 <_strtod_l+0x590>)
 800b97c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b980:	4652      	mov	r2, sl
 800b982:	465b      	mov	r3, fp
 800b984:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b988:	f7f4 fe3e 	bl	8000608 <__aeabi_dmul>
 800b98c:	4682      	mov	sl, r0
 800b98e:	468b      	mov	fp, r1
 800b990:	f038 080f 	bics.w	r8, r8, #15
 800b994:	d073      	beq.n	800ba7e <_strtod_l+0x516>
 800b996:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b99a:	dd47      	ble.n	800ba2c <_strtod_l+0x4c4>
 800b99c:	2400      	movs	r4, #0
 800b99e:	46a0      	mov	r8, r4
 800b9a0:	9407      	str	r4, [sp, #28]
 800b9a2:	9405      	str	r4, [sp, #20]
 800b9a4:	2322      	movs	r3, #34	; 0x22
 800b9a6:	f8df b158 	ldr.w	fp, [pc, #344]	; 800bb00 <_strtod_l+0x598>
 800b9aa:	f8c9 3000 	str.w	r3, [r9]
 800b9ae:	f04f 0a00 	mov.w	sl, #0
 800b9b2:	9b07      	ldr	r3, [sp, #28]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	f43f ae16 	beq.w	800b5e6 <_strtod_l+0x7e>
 800b9ba:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b9bc:	4648      	mov	r0, r9
 800b9be:	f002 f8cb 	bl	800db58 <_Bfree>
 800b9c2:	9905      	ldr	r1, [sp, #20]
 800b9c4:	4648      	mov	r0, r9
 800b9c6:	f002 f8c7 	bl	800db58 <_Bfree>
 800b9ca:	4641      	mov	r1, r8
 800b9cc:	4648      	mov	r0, r9
 800b9ce:	f002 f8c3 	bl	800db58 <_Bfree>
 800b9d2:	9907      	ldr	r1, [sp, #28]
 800b9d4:	4648      	mov	r0, r9
 800b9d6:	f002 f8bf 	bl	800db58 <_Bfree>
 800b9da:	4621      	mov	r1, r4
 800b9dc:	4648      	mov	r0, r9
 800b9de:	f002 f8bb 	bl	800db58 <_Bfree>
 800b9e2:	e600      	b.n	800b5e6 <_strtod_l+0x7e>
 800b9e4:	9a06      	ldr	r2, [sp, #24]
 800b9e6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	dbba      	blt.n	800b964 <_strtod_l+0x3fc>
 800b9ee:	4d42      	ldr	r5, [pc, #264]	; (800baf8 <_strtod_l+0x590>)
 800b9f0:	f1c4 040f 	rsb	r4, r4, #15
 800b9f4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800b9f8:	4652      	mov	r2, sl
 800b9fa:	465b      	mov	r3, fp
 800b9fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba00:	f7f4 fe02 	bl	8000608 <__aeabi_dmul>
 800ba04:	9b06      	ldr	r3, [sp, #24]
 800ba06:	1b1c      	subs	r4, r3, r4
 800ba08:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800ba0c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ba10:	e78d      	b.n	800b92e <_strtod_l+0x3c6>
 800ba12:	f113 0f16 	cmn.w	r3, #22
 800ba16:	dba5      	blt.n	800b964 <_strtod_l+0x3fc>
 800ba18:	4a37      	ldr	r2, [pc, #220]	; (800baf8 <_strtod_l+0x590>)
 800ba1a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800ba1e:	e9d2 2300 	ldrd	r2, r3, [r2]
 800ba22:	4650      	mov	r0, sl
 800ba24:	4659      	mov	r1, fp
 800ba26:	f7f4 ff19 	bl	800085c <__aeabi_ddiv>
 800ba2a:	e782      	b.n	800b932 <_strtod_l+0x3ca>
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	4e33      	ldr	r6, [pc, #204]	; (800bafc <_strtod_l+0x594>)
 800ba30:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ba34:	4650      	mov	r0, sl
 800ba36:	4659      	mov	r1, fp
 800ba38:	461d      	mov	r5, r3
 800ba3a:	f1b8 0f01 	cmp.w	r8, #1
 800ba3e:	dc21      	bgt.n	800ba84 <_strtod_l+0x51c>
 800ba40:	b10b      	cbz	r3, 800ba46 <_strtod_l+0x4de>
 800ba42:	4682      	mov	sl, r0
 800ba44:	468b      	mov	fp, r1
 800ba46:	4b2d      	ldr	r3, [pc, #180]	; (800bafc <_strtod_l+0x594>)
 800ba48:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ba4c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ba50:	4652      	mov	r2, sl
 800ba52:	465b      	mov	r3, fp
 800ba54:	e9d5 0100 	ldrd	r0, r1, [r5]
 800ba58:	f7f4 fdd6 	bl	8000608 <__aeabi_dmul>
 800ba5c:	4b28      	ldr	r3, [pc, #160]	; (800bb00 <_strtod_l+0x598>)
 800ba5e:	460a      	mov	r2, r1
 800ba60:	400b      	ands	r3, r1
 800ba62:	4928      	ldr	r1, [pc, #160]	; (800bb04 <_strtod_l+0x59c>)
 800ba64:	428b      	cmp	r3, r1
 800ba66:	4682      	mov	sl, r0
 800ba68:	d898      	bhi.n	800b99c <_strtod_l+0x434>
 800ba6a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ba6e:	428b      	cmp	r3, r1
 800ba70:	bf86      	itte	hi
 800ba72:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800bb0c <_strtod_l+0x5a4>
 800ba76:	f04f 3aff 	movhi.w	sl, #4294967295
 800ba7a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ba7e:	2300      	movs	r3, #0
 800ba80:	9304      	str	r3, [sp, #16]
 800ba82:	e077      	b.n	800bb74 <_strtod_l+0x60c>
 800ba84:	f018 0f01 	tst.w	r8, #1
 800ba88:	d006      	beq.n	800ba98 <_strtod_l+0x530>
 800ba8a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800ba8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba92:	f7f4 fdb9 	bl	8000608 <__aeabi_dmul>
 800ba96:	2301      	movs	r3, #1
 800ba98:	3501      	adds	r5, #1
 800ba9a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ba9e:	e7cc      	b.n	800ba3a <_strtod_l+0x4d2>
 800baa0:	d0ed      	beq.n	800ba7e <_strtod_l+0x516>
 800baa2:	f1c8 0800 	rsb	r8, r8, #0
 800baa6:	f018 020f 	ands.w	r2, r8, #15
 800baaa:	d00a      	beq.n	800bac2 <_strtod_l+0x55a>
 800baac:	4b12      	ldr	r3, [pc, #72]	; (800baf8 <_strtod_l+0x590>)
 800baae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bab2:	4650      	mov	r0, sl
 800bab4:	4659      	mov	r1, fp
 800bab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baba:	f7f4 fecf 	bl	800085c <__aeabi_ddiv>
 800babe:	4682      	mov	sl, r0
 800bac0:	468b      	mov	fp, r1
 800bac2:	ea5f 1828 	movs.w	r8, r8, asr #4
 800bac6:	d0da      	beq.n	800ba7e <_strtod_l+0x516>
 800bac8:	f1b8 0f1f 	cmp.w	r8, #31
 800bacc:	dd20      	ble.n	800bb10 <_strtod_l+0x5a8>
 800bace:	2400      	movs	r4, #0
 800bad0:	46a0      	mov	r8, r4
 800bad2:	9407      	str	r4, [sp, #28]
 800bad4:	9405      	str	r4, [sp, #20]
 800bad6:	2322      	movs	r3, #34	; 0x22
 800bad8:	f04f 0a00 	mov.w	sl, #0
 800badc:	f04f 0b00 	mov.w	fp, #0
 800bae0:	f8c9 3000 	str.w	r3, [r9]
 800bae4:	e765      	b.n	800b9b2 <_strtod_l+0x44a>
 800bae6:	bf00      	nop
 800bae8:	0801edd5 	.word	0x0801edd5
 800baec:	0801ee63 	.word	0x0801ee63
 800baf0:	0801eddd 	.word	0x0801eddd
 800baf4:	0801ee20 	.word	0x0801ee20
 800baf8:	0801ef08 	.word	0x0801ef08
 800bafc:	0801eee0 	.word	0x0801eee0
 800bb00:	7ff00000 	.word	0x7ff00000
 800bb04:	7ca00000 	.word	0x7ca00000
 800bb08:	fff80000 	.word	0xfff80000
 800bb0c:	7fefffff 	.word	0x7fefffff
 800bb10:	f018 0310 	ands.w	r3, r8, #16
 800bb14:	bf18      	it	ne
 800bb16:	236a      	movne	r3, #106	; 0x6a
 800bb18:	4da0      	ldr	r5, [pc, #640]	; (800bd9c <_strtod_l+0x834>)
 800bb1a:	9304      	str	r3, [sp, #16]
 800bb1c:	4650      	mov	r0, sl
 800bb1e:	4659      	mov	r1, fp
 800bb20:	2300      	movs	r3, #0
 800bb22:	f1b8 0f00 	cmp.w	r8, #0
 800bb26:	f300 810a 	bgt.w	800bd3e <_strtod_l+0x7d6>
 800bb2a:	b10b      	cbz	r3, 800bb30 <_strtod_l+0x5c8>
 800bb2c:	4682      	mov	sl, r0
 800bb2e:	468b      	mov	fp, r1
 800bb30:	9b04      	ldr	r3, [sp, #16]
 800bb32:	b1bb      	cbz	r3, 800bb64 <_strtod_l+0x5fc>
 800bb34:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800bb38:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	4659      	mov	r1, fp
 800bb40:	dd10      	ble.n	800bb64 <_strtod_l+0x5fc>
 800bb42:	2b1f      	cmp	r3, #31
 800bb44:	f340 8107 	ble.w	800bd56 <_strtod_l+0x7ee>
 800bb48:	2b34      	cmp	r3, #52	; 0x34
 800bb4a:	bfde      	ittt	le
 800bb4c:	3b20      	suble	r3, #32
 800bb4e:	f04f 32ff 	movle.w	r2, #4294967295
 800bb52:	fa02 f303 	lslle.w	r3, r2, r3
 800bb56:	f04f 0a00 	mov.w	sl, #0
 800bb5a:	bfcc      	ite	gt
 800bb5c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800bb60:	ea03 0b01 	andle.w	fp, r3, r1
 800bb64:	2200      	movs	r2, #0
 800bb66:	2300      	movs	r3, #0
 800bb68:	4650      	mov	r0, sl
 800bb6a:	4659      	mov	r1, fp
 800bb6c:	f7f4 ffb4 	bl	8000ad8 <__aeabi_dcmpeq>
 800bb70:	2800      	cmp	r0, #0
 800bb72:	d1ac      	bne.n	800bace <_strtod_l+0x566>
 800bb74:	9b07      	ldr	r3, [sp, #28]
 800bb76:	9300      	str	r3, [sp, #0]
 800bb78:	9a05      	ldr	r2, [sp, #20]
 800bb7a:	9908      	ldr	r1, [sp, #32]
 800bb7c:	4623      	mov	r3, r4
 800bb7e:	4648      	mov	r0, r9
 800bb80:	f002 f83c 	bl	800dbfc <__s2b>
 800bb84:	9007      	str	r0, [sp, #28]
 800bb86:	2800      	cmp	r0, #0
 800bb88:	f43f af08 	beq.w	800b99c <_strtod_l+0x434>
 800bb8c:	9a06      	ldr	r2, [sp, #24]
 800bb8e:	9b06      	ldr	r3, [sp, #24]
 800bb90:	2a00      	cmp	r2, #0
 800bb92:	f1c3 0300 	rsb	r3, r3, #0
 800bb96:	bfa8      	it	ge
 800bb98:	2300      	movge	r3, #0
 800bb9a:	930e      	str	r3, [sp, #56]	; 0x38
 800bb9c:	2400      	movs	r4, #0
 800bb9e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bba2:	9316      	str	r3, [sp, #88]	; 0x58
 800bba4:	46a0      	mov	r8, r4
 800bba6:	9b07      	ldr	r3, [sp, #28]
 800bba8:	4648      	mov	r0, r9
 800bbaa:	6859      	ldr	r1, [r3, #4]
 800bbac:	f001 ffa0 	bl	800daf0 <_Balloc>
 800bbb0:	9005      	str	r0, [sp, #20]
 800bbb2:	2800      	cmp	r0, #0
 800bbb4:	f43f aef6 	beq.w	800b9a4 <_strtod_l+0x43c>
 800bbb8:	9b07      	ldr	r3, [sp, #28]
 800bbba:	691a      	ldr	r2, [r3, #16]
 800bbbc:	3202      	adds	r2, #2
 800bbbe:	f103 010c 	add.w	r1, r3, #12
 800bbc2:	0092      	lsls	r2, r2, #2
 800bbc4:	300c      	adds	r0, #12
 800bbc6:	f7fe fcd9 	bl	800a57c <memcpy>
 800bbca:	aa1e      	add	r2, sp, #120	; 0x78
 800bbcc:	a91d      	add	r1, sp, #116	; 0x74
 800bbce:	ec4b ab10 	vmov	d0, sl, fp
 800bbd2:	4648      	mov	r0, r9
 800bbd4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800bbd8:	f002 facc 	bl	800e174 <__d2b>
 800bbdc:	901c      	str	r0, [sp, #112]	; 0x70
 800bbde:	2800      	cmp	r0, #0
 800bbe0:	f43f aee0 	beq.w	800b9a4 <_strtod_l+0x43c>
 800bbe4:	2101      	movs	r1, #1
 800bbe6:	4648      	mov	r0, r9
 800bbe8:	f002 f894 	bl	800dd14 <__i2b>
 800bbec:	4680      	mov	r8, r0
 800bbee:	2800      	cmp	r0, #0
 800bbf0:	f43f aed8 	beq.w	800b9a4 <_strtod_l+0x43c>
 800bbf4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800bbf6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800bbf8:	2e00      	cmp	r6, #0
 800bbfa:	bfab      	itete	ge
 800bbfc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800bbfe:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800bc00:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800bc02:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800bc04:	bfac      	ite	ge
 800bc06:	18f7      	addge	r7, r6, r3
 800bc08:	1b9d      	sublt	r5, r3, r6
 800bc0a:	9b04      	ldr	r3, [sp, #16]
 800bc0c:	1af6      	subs	r6, r6, r3
 800bc0e:	4416      	add	r6, r2
 800bc10:	4b63      	ldr	r3, [pc, #396]	; (800bda0 <_strtod_l+0x838>)
 800bc12:	3e01      	subs	r6, #1
 800bc14:	429e      	cmp	r6, r3
 800bc16:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bc1a:	f280 80af 	bge.w	800bd7c <_strtod_l+0x814>
 800bc1e:	1b9b      	subs	r3, r3, r6
 800bc20:	2b1f      	cmp	r3, #31
 800bc22:	eba2 0203 	sub.w	r2, r2, r3
 800bc26:	f04f 0101 	mov.w	r1, #1
 800bc2a:	f300 809b 	bgt.w	800bd64 <_strtod_l+0x7fc>
 800bc2e:	fa01 f303 	lsl.w	r3, r1, r3
 800bc32:	930f      	str	r3, [sp, #60]	; 0x3c
 800bc34:	2300      	movs	r3, #0
 800bc36:	930a      	str	r3, [sp, #40]	; 0x28
 800bc38:	18be      	adds	r6, r7, r2
 800bc3a:	9b04      	ldr	r3, [sp, #16]
 800bc3c:	42b7      	cmp	r7, r6
 800bc3e:	4415      	add	r5, r2
 800bc40:	441d      	add	r5, r3
 800bc42:	463b      	mov	r3, r7
 800bc44:	bfa8      	it	ge
 800bc46:	4633      	movge	r3, r6
 800bc48:	42ab      	cmp	r3, r5
 800bc4a:	bfa8      	it	ge
 800bc4c:	462b      	movge	r3, r5
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	bfc2      	ittt	gt
 800bc52:	1af6      	subgt	r6, r6, r3
 800bc54:	1aed      	subgt	r5, r5, r3
 800bc56:	1aff      	subgt	r7, r7, r3
 800bc58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc5a:	b1bb      	cbz	r3, 800bc8c <_strtod_l+0x724>
 800bc5c:	4641      	mov	r1, r8
 800bc5e:	461a      	mov	r2, r3
 800bc60:	4648      	mov	r0, r9
 800bc62:	f002 f8f7 	bl	800de54 <__pow5mult>
 800bc66:	4680      	mov	r8, r0
 800bc68:	2800      	cmp	r0, #0
 800bc6a:	f43f ae9b 	beq.w	800b9a4 <_strtod_l+0x43c>
 800bc6e:	4601      	mov	r1, r0
 800bc70:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800bc72:	4648      	mov	r0, r9
 800bc74:	f002 f857 	bl	800dd26 <__multiply>
 800bc78:	900c      	str	r0, [sp, #48]	; 0x30
 800bc7a:	2800      	cmp	r0, #0
 800bc7c:	f43f ae92 	beq.w	800b9a4 <_strtod_l+0x43c>
 800bc80:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bc82:	4648      	mov	r0, r9
 800bc84:	f001 ff68 	bl	800db58 <_Bfree>
 800bc88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc8a:	931c      	str	r3, [sp, #112]	; 0x70
 800bc8c:	2e00      	cmp	r6, #0
 800bc8e:	dc7a      	bgt.n	800bd86 <_strtod_l+0x81e>
 800bc90:	9b06      	ldr	r3, [sp, #24]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	dd08      	ble.n	800bca8 <_strtod_l+0x740>
 800bc96:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bc98:	9905      	ldr	r1, [sp, #20]
 800bc9a:	4648      	mov	r0, r9
 800bc9c:	f002 f8da 	bl	800de54 <__pow5mult>
 800bca0:	9005      	str	r0, [sp, #20]
 800bca2:	2800      	cmp	r0, #0
 800bca4:	f43f ae7e 	beq.w	800b9a4 <_strtod_l+0x43c>
 800bca8:	2d00      	cmp	r5, #0
 800bcaa:	dd08      	ble.n	800bcbe <_strtod_l+0x756>
 800bcac:	462a      	mov	r2, r5
 800bcae:	9905      	ldr	r1, [sp, #20]
 800bcb0:	4648      	mov	r0, r9
 800bcb2:	f002 f91d 	bl	800def0 <__lshift>
 800bcb6:	9005      	str	r0, [sp, #20]
 800bcb8:	2800      	cmp	r0, #0
 800bcba:	f43f ae73 	beq.w	800b9a4 <_strtod_l+0x43c>
 800bcbe:	2f00      	cmp	r7, #0
 800bcc0:	dd08      	ble.n	800bcd4 <_strtod_l+0x76c>
 800bcc2:	4641      	mov	r1, r8
 800bcc4:	463a      	mov	r2, r7
 800bcc6:	4648      	mov	r0, r9
 800bcc8:	f002 f912 	bl	800def0 <__lshift>
 800bccc:	4680      	mov	r8, r0
 800bcce:	2800      	cmp	r0, #0
 800bcd0:	f43f ae68 	beq.w	800b9a4 <_strtod_l+0x43c>
 800bcd4:	9a05      	ldr	r2, [sp, #20]
 800bcd6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bcd8:	4648      	mov	r0, r9
 800bcda:	f002 f977 	bl	800dfcc <__mdiff>
 800bcde:	4604      	mov	r4, r0
 800bce0:	2800      	cmp	r0, #0
 800bce2:	f43f ae5f 	beq.w	800b9a4 <_strtod_l+0x43c>
 800bce6:	68c3      	ldr	r3, [r0, #12]
 800bce8:	930c      	str	r3, [sp, #48]	; 0x30
 800bcea:	2300      	movs	r3, #0
 800bcec:	60c3      	str	r3, [r0, #12]
 800bcee:	4641      	mov	r1, r8
 800bcf0:	f002 f952 	bl	800df98 <__mcmp>
 800bcf4:	2800      	cmp	r0, #0
 800bcf6:	da55      	bge.n	800bda4 <_strtod_l+0x83c>
 800bcf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bcfa:	b9e3      	cbnz	r3, 800bd36 <_strtod_l+0x7ce>
 800bcfc:	f1ba 0f00 	cmp.w	sl, #0
 800bd00:	d119      	bne.n	800bd36 <_strtod_l+0x7ce>
 800bd02:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bd06:	b9b3      	cbnz	r3, 800bd36 <_strtod_l+0x7ce>
 800bd08:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bd0c:	0d1b      	lsrs	r3, r3, #20
 800bd0e:	051b      	lsls	r3, r3, #20
 800bd10:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800bd14:	d90f      	bls.n	800bd36 <_strtod_l+0x7ce>
 800bd16:	6963      	ldr	r3, [r4, #20]
 800bd18:	b913      	cbnz	r3, 800bd20 <_strtod_l+0x7b8>
 800bd1a:	6923      	ldr	r3, [r4, #16]
 800bd1c:	2b01      	cmp	r3, #1
 800bd1e:	dd0a      	ble.n	800bd36 <_strtod_l+0x7ce>
 800bd20:	4621      	mov	r1, r4
 800bd22:	2201      	movs	r2, #1
 800bd24:	4648      	mov	r0, r9
 800bd26:	f002 f8e3 	bl	800def0 <__lshift>
 800bd2a:	4641      	mov	r1, r8
 800bd2c:	4604      	mov	r4, r0
 800bd2e:	f002 f933 	bl	800df98 <__mcmp>
 800bd32:	2800      	cmp	r0, #0
 800bd34:	dc67      	bgt.n	800be06 <_strtod_l+0x89e>
 800bd36:	9b04      	ldr	r3, [sp, #16]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d171      	bne.n	800be20 <_strtod_l+0x8b8>
 800bd3c:	e63d      	b.n	800b9ba <_strtod_l+0x452>
 800bd3e:	f018 0f01 	tst.w	r8, #1
 800bd42:	d004      	beq.n	800bd4e <_strtod_l+0x7e6>
 800bd44:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bd48:	f7f4 fc5e 	bl	8000608 <__aeabi_dmul>
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bd52:	3508      	adds	r5, #8
 800bd54:	e6e5      	b.n	800bb22 <_strtod_l+0x5ba>
 800bd56:	f04f 32ff 	mov.w	r2, #4294967295
 800bd5a:	fa02 f303 	lsl.w	r3, r2, r3
 800bd5e:	ea03 0a0a 	and.w	sl, r3, sl
 800bd62:	e6ff      	b.n	800bb64 <_strtod_l+0x5fc>
 800bd64:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800bd68:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800bd6c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800bd70:	36e2      	adds	r6, #226	; 0xe2
 800bd72:	fa01 f306 	lsl.w	r3, r1, r6
 800bd76:	930a      	str	r3, [sp, #40]	; 0x28
 800bd78:	910f      	str	r1, [sp, #60]	; 0x3c
 800bd7a:	e75d      	b.n	800bc38 <_strtod_l+0x6d0>
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	930a      	str	r3, [sp, #40]	; 0x28
 800bd80:	2301      	movs	r3, #1
 800bd82:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd84:	e758      	b.n	800bc38 <_strtod_l+0x6d0>
 800bd86:	4632      	mov	r2, r6
 800bd88:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bd8a:	4648      	mov	r0, r9
 800bd8c:	f002 f8b0 	bl	800def0 <__lshift>
 800bd90:	901c      	str	r0, [sp, #112]	; 0x70
 800bd92:	2800      	cmp	r0, #0
 800bd94:	f47f af7c 	bne.w	800bc90 <_strtod_l+0x728>
 800bd98:	e604      	b.n	800b9a4 <_strtod_l+0x43c>
 800bd9a:	bf00      	nop
 800bd9c:	0801ee38 	.word	0x0801ee38
 800bda0:	fffffc02 	.word	0xfffffc02
 800bda4:	465d      	mov	r5, fp
 800bda6:	f040 8086 	bne.w	800beb6 <_strtod_l+0x94e>
 800bdaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bdac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bdb0:	b32a      	cbz	r2, 800bdfe <_strtod_l+0x896>
 800bdb2:	4aaf      	ldr	r2, [pc, #700]	; (800c070 <_strtod_l+0xb08>)
 800bdb4:	4293      	cmp	r3, r2
 800bdb6:	d153      	bne.n	800be60 <_strtod_l+0x8f8>
 800bdb8:	9b04      	ldr	r3, [sp, #16]
 800bdba:	4650      	mov	r0, sl
 800bdbc:	b1d3      	cbz	r3, 800bdf4 <_strtod_l+0x88c>
 800bdbe:	4aad      	ldr	r2, [pc, #692]	; (800c074 <_strtod_l+0xb0c>)
 800bdc0:	402a      	ands	r2, r5
 800bdc2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800bdc6:	f04f 31ff 	mov.w	r1, #4294967295
 800bdca:	d816      	bhi.n	800bdfa <_strtod_l+0x892>
 800bdcc:	0d12      	lsrs	r2, r2, #20
 800bdce:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800bdd2:	fa01 f303 	lsl.w	r3, r1, r3
 800bdd6:	4298      	cmp	r0, r3
 800bdd8:	d142      	bne.n	800be60 <_strtod_l+0x8f8>
 800bdda:	4ba7      	ldr	r3, [pc, #668]	; (800c078 <_strtod_l+0xb10>)
 800bddc:	429d      	cmp	r5, r3
 800bdde:	d102      	bne.n	800bde6 <_strtod_l+0x87e>
 800bde0:	3001      	adds	r0, #1
 800bde2:	f43f addf 	beq.w	800b9a4 <_strtod_l+0x43c>
 800bde6:	4ba3      	ldr	r3, [pc, #652]	; (800c074 <_strtod_l+0xb0c>)
 800bde8:	402b      	ands	r3, r5
 800bdea:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800bdee:	f04f 0a00 	mov.w	sl, #0
 800bdf2:	e7a0      	b.n	800bd36 <_strtod_l+0x7ce>
 800bdf4:	f04f 33ff 	mov.w	r3, #4294967295
 800bdf8:	e7ed      	b.n	800bdd6 <_strtod_l+0x86e>
 800bdfa:	460b      	mov	r3, r1
 800bdfc:	e7eb      	b.n	800bdd6 <_strtod_l+0x86e>
 800bdfe:	bb7b      	cbnz	r3, 800be60 <_strtod_l+0x8f8>
 800be00:	f1ba 0f00 	cmp.w	sl, #0
 800be04:	d12c      	bne.n	800be60 <_strtod_l+0x8f8>
 800be06:	9904      	ldr	r1, [sp, #16]
 800be08:	4a9a      	ldr	r2, [pc, #616]	; (800c074 <_strtod_l+0xb0c>)
 800be0a:	465b      	mov	r3, fp
 800be0c:	b1f1      	cbz	r1, 800be4c <_strtod_l+0x8e4>
 800be0e:	ea02 010b 	and.w	r1, r2, fp
 800be12:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800be16:	dc19      	bgt.n	800be4c <_strtod_l+0x8e4>
 800be18:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800be1c:	f77f ae5b 	ble.w	800bad6 <_strtod_l+0x56e>
 800be20:	4a96      	ldr	r2, [pc, #600]	; (800c07c <_strtod_l+0xb14>)
 800be22:	2300      	movs	r3, #0
 800be24:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800be28:	4650      	mov	r0, sl
 800be2a:	4659      	mov	r1, fp
 800be2c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800be30:	f7f4 fbea 	bl	8000608 <__aeabi_dmul>
 800be34:	4682      	mov	sl, r0
 800be36:	468b      	mov	fp, r1
 800be38:	2900      	cmp	r1, #0
 800be3a:	f47f adbe 	bne.w	800b9ba <_strtod_l+0x452>
 800be3e:	2800      	cmp	r0, #0
 800be40:	f47f adbb 	bne.w	800b9ba <_strtod_l+0x452>
 800be44:	2322      	movs	r3, #34	; 0x22
 800be46:	f8c9 3000 	str.w	r3, [r9]
 800be4a:	e5b6      	b.n	800b9ba <_strtod_l+0x452>
 800be4c:	4013      	ands	r3, r2
 800be4e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800be52:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800be56:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800be5a:	f04f 3aff 	mov.w	sl, #4294967295
 800be5e:	e76a      	b.n	800bd36 <_strtod_l+0x7ce>
 800be60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be62:	b193      	cbz	r3, 800be8a <_strtod_l+0x922>
 800be64:	422b      	tst	r3, r5
 800be66:	f43f af66 	beq.w	800bd36 <_strtod_l+0x7ce>
 800be6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be6c:	9a04      	ldr	r2, [sp, #16]
 800be6e:	4650      	mov	r0, sl
 800be70:	4659      	mov	r1, fp
 800be72:	b173      	cbz	r3, 800be92 <_strtod_l+0x92a>
 800be74:	f7ff fb5a 	bl	800b52c <sulp>
 800be78:	4602      	mov	r2, r0
 800be7a:	460b      	mov	r3, r1
 800be7c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800be80:	f7f4 fa0c 	bl	800029c <__adddf3>
 800be84:	4682      	mov	sl, r0
 800be86:	468b      	mov	fp, r1
 800be88:	e755      	b.n	800bd36 <_strtod_l+0x7ce>
 800be8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800be8c:	ea13 0f0a 	tst.w	r3, sl
 800be90:	e7e9      	b.n	800be66 <_strtod_l+0x8fe>
 800be92:	f7ff fb4b 	bl	800b52c <sulp>
 800be96:	4602      	mov	r2, r0
 800be98:	460b      	mov	r3, r1
 800be9a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800be9e:	f7f4 f9fb 	bl	8000298 <__aeabi_dsub>
 800bea2:	2200      	movs	r2, #0
 800bea4:	2300      	movs	r3, #0
 800bea6:	4682      	mov	sl, r0
 800bea8:	468b      	mov	fp, r1
 800beaa:	f7f4 fe15 	bl	8000ad8 <__aeabi_dcmpeq>
 800beae:	2800      	cmp	r0, #0
 800beb0:	f47f ae11 	bne.w	800bad6 <_strtod_l+0x56e>
 800beb4:	e73f      	b.n	800bd36 <_strtod_l+0x7ce>
 800beb6:	4641      	mov	r1, r8
 800beb8:	4620      	mov	r0, r4
 800beba:	f002 f9aa 	bl	800e212 <__ratio>
 800bebe:	ec57 6b10 	vmov	r6, r7, d0
 800bec2:	2200      	movs	r2, #0
 800bec4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bec8:	ee10 0a10 	vmov	r0, s0
 800becc:	4639      	mov	r1, r7
 800bece:	f7f4 fe17 	bl	8000b00 <__aeabi_dcmple>
 800bed2:	2800      	cmp	r0, #0
 800bed4:	d077      	beq.n	800bfc6 <_strtod_l+0xa5e>
 800bed6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d04a      	beq.n	800bf72 <_strtod_l+0xa0a>
 800bedc:	4b68      	ldr	r3, [pc, #416]	; (800c080 <_strtod_l+0xb18>)
 800bede:	2200      	movs	r2, #0
 800bee0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800bee4:	4f66      	ldr	r7, [pc, #408]	; (800c080 <_strtod_l+0xb18>)
 800bee6:	2600      	movs	r6, #0
 800bee8:	4b62      	ldr	r3, [pc, #392]	; (800c074 <_strtod_l+0xb0c>)
 800beea:	402b      	ands	r3, r5
 800beec:	930f      	str	r3, [sp, #60]	; 0x3c
 800beee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bef0:	4b64      	ldr	r3, [pc, #400]	; (800c084 <_strtod_l+0xb1c>)
 800bef2:	429a      	cmp	r2, r3
 800bef4:	f040 80ce 	bne.w	800c094 <_strtod_l+0xb2c>
 800bef8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800befc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bf00:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800bf04:	ec4b ab10 	vmov	d0, sl, fp
 800bf08:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800bf0c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800bf10:	f002 f8ba 	bl	800e088 <__ulp>
 800bf14:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bf18:	ec53 2b10 	vmov	r2, r3, d0
 800bf1c:	f7f4 fb74 	bl	8000608 <__aeabi_dmul>
 800bf20:	4652      	mov	r2, sl
 800bf22:	465b      	mov	r3, fp
 800bf24:	f7f4 f9ba 	bl	800029c <__adddf3>
 800bf28:	460b      	mov	r3, r1
 800bf2a:	4952      	ldr	r1, [pc, #328]	; (800c074 <_strtod_l+0xb0c>)
 800bf2c:	4a56      	ldr	r2, [pc, #344]	; (800c088 <_strtod_l+0xb20>)
 800bf2e:	4019      	ands	r1, r3
 800bf30:	4291      	cmp	r1, r2
 800bf32:	4682      	mov	sl, r0
 800bf34:	d95b      	bls.n	800bfee <_strtod_l+0xa86>
 800bf36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf38:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800bf3c:	4293      	cmp	r3, r2
 800bf3e:	d103      	bne.n	800bf48 <_strtod_l+0x9e0>
 800bf40:	9b08      	ldr	r3, [sp, #32]
 800bf42:	3301      	adds	r3, #1
 800bf44:	f43f ad2e 	beq.w	800b9a4 <_strtod_l+0x43c>
 800bf48:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800c078 <_strtod_l+0xb10>
 800bf4c:	f04f 3aff 	mov.w	sl, #4294967295
 800bf50:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bf52:	4648      	mov	r0, r9
 800bf54:	f001 fe00 	bl	800db58 <_Bfree>
 800bf58:	9905      	ldr	r1, [sp, #20]
 800bf5a:	4648      	mov	r0, r9
 800bf5c:	f001 fdfc 	bl	800db58 <_Bfree>
 800bf60:	4641      	mov	r1, r8
 800bf62:	4648      	mov	r0, r9
 800bf64:	f001 fdf8 	bl	800db58 <_Bfree>
 800bf68:	4621      	mov	r1, r4
 800bf6a:	4648      	mov	r0, r9
 800bf6c:	f001 fdf4 	bl	800db58 <_Bfree>
 800bf70:	e619      	b.n	800bba6 <_strtod_l+0x63e>
 800bf72:	f1ba 0f00 	cmp.w	sl, #0
 800bf76:	d11a      	bne.n	800bfae <_strtod_l+0xa46>
 800bf78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bf7c:	b9eb      	cbnz	r3, 800bfba <_strtod_l+0xa52>
 800bf7e:	2200      	movs	r2, #0
 800bf80:	4b3f      	ldr	r3, [pc, #252]	; (800c080 <_strtod_l+0xb18>)
 800bf82:	4630      	mov	r0, r6
 800bf84:	4639      	mov	r1, r7
 800bf86:	f7f4 fdb1 	bl	8000aec <__aeabi_dcmplt>
 800bf8a:	b9c8      	cbnz	r0, 800bfc0 <_strtod_l+0xa58>
 800bf8c:	4630      	mov	r0, r6
 800bf8e:	4639      	mov	r1, r7
 800bf90:	2200      	movs	r2, #0
 800bf92:	4b3e      	ldr	r3, [pc, #248]	; (800c08c <_strtod_l+0xb24>)
 800bf94:	f7f4 fb38 	bl	8000608 <__aeabi_dmul>
 800bf98:	4606      	mov	r6, r0
 800bf9a:	460f      	mov	r7, r1
 800bf9c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800bfa0:	9618      	str	r6, [sp, #96]	; 0x60
 800bfa2:	9319      	str	r3, [sp, #100]	; 0x64
 800bfa4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800bfa8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800bfac:	e79c      	b.n	800bee8 <_strtod_l+0x980>
 800bfae:	f1ba 0f01 	cmp.w	sl, #1
 800bfb2:	d102      	bne.n	800bfba <_strtod_l+0xa52>
 800bfb4:	2d00      	cmp	r5, #0
 800bfb6:	f43f ad8e 	beq.w	800bad6 <_strtod_l+0x56e>
 800bfba:	2200      	movs	r2, #0
 800bfbc:	4b34      	ldr	r3, [pc, #208]	; (800c090 <_strtod_l+0xb28>)
 800bfbe:	e78f      	b.n	800bee0 <_strtod_l+0x978>
 800bfc0:	2600      	movs	r6, #0
 800bfc2:	4f32      	ldr	r7, [pc, #200]	; (800c08c <_strtod_l+0xb24>)
 800bfc4:	e7ea      	b.n	800bf9c <_strtod_l+0xa34>
 800bfc6:	4b31      	ldr	r3, [pc, #196]	; (800c08c <_strtod_l+0xb24>)
 800bfc8:	4630      	mov	r0, r6
 800bfca:	4639      	mov	r1, r7
 800bfcc:	2200      	movs	r2, #0
 800bfce:	f7f4 fb1b 	bl	8000608 <__aeabi_dmul>
 800bfd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bfd4:	4606      	mov	r6, r0
 800bfd6:	460f      	mov	r7, r1
 800bfd8:	b933      	cbnz	r3, 800bfe8 <_strtod_l+0xa80>
 800bfda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bfde:	9010      	str	r0, [sp, #64]	; 0x40
 800bfe0:	9311      	str	r3, [sp, #68]	; 0x44
 800bfe2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bfe6:	e7df      	b.n	800bfa8 <_strtod_l+0xa40>
 800bfe8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800bfec:	e7f9      	b.n	800bfe2 <_strtod_l+0xa7a>
 800bfee:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800bff2:	9b04      	ldr	r3, [sp, #16]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d1ab      	bne.n	800bf50 <_strtod_l+0x9e8>
 800bff8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bffc:	0d1b      	lsrs	r3, r3, #20
 800bffe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c000:	051b      	lsls	r3, r3, #20
 800c002:	429a      	cmp	r2, r3
 800c004:	465d      	mov	r5, fp
 800c006:	d1a3      	bne.n	800bf50 <_strtod_l+0x9e8>
 800c008:	4639      	mov	r1, r7
 800c00a:	4630      	mov	r0, r6
 800c00c:	f7f4 fdac 	bl	8000b68 <__aeabi_d2iz>
 800c010:	f7f4 fa90 	bl	8000534 <__aeabi_i2d>
 800c014:	460b      	mov	r3, r1
 800c016:	4602      	mov	r2, r0
 800c018:	4639      	mov	r1, r7
 800c01a:	4630      	mov	r0, r6
 800c01c:	f7f4 f93c 	bl	8000298 <__aeabi_dsub>
 800c020:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c022:	4606      	mov	r6, r0
 800c024:	460f      	mov	r7, r1
 800c026:	b933      	cbnz	r3, 800c036 <_strtod_l+0xace>
 800c028:	f1ba 0f00 	cmp.w	sl, #0
 800c02c:	d103      	bne.n	800c036 <_strtod_l+0xace>
 800c02e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800c032:	2d00      	cmp	r5, #0
 800c034:	d06d      	beq.n	800c112 <_strtod_l+0xbaa>
 800c036:	a30a      	add	r3, pc, #40	; (adr r3, 800c060 <_strtod_l+0xaf8>)
 800c038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c03c:	4630      	mov	r0, r6
 800c03e:	4639      	mov	r1, r7
 800c040:	f7f4 fd54 	bl	8000aec <__aeabi_dcmplt>
 800c044:	2800      	cmp	r0, #0
 800c046:	f47f acb8 	bne.w	800b9ba <_strtod_l+0x452>
 800c04a:	a307      	add	r3, pc, #28	; (adr r3, 800c068 <_strtod_l+0xb00>)
 800c04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c050:	4630      	mov	r0, r6
 800c052:	4639      	mov	r1, r7
 800c054:	f7f4 fd68 	bl	8000b28 <__aeabi_dcmpgt>
 800c058:	2800      	cmp	r0, #0
 800c05a:	f43f af79 	beq.w	800bf50 <_strtod_l+0x9e8>
 800c05e:	e4ac      	b.n	800b9ba <_strtod_l+0x452>
 800c060:	94a03595 	.word	0x94a03595
 800c064:	3fdfffff 	.word	0x3fdfffff
 800c068:	35afe535 	.word	0x35afe535
 800c06c:	3fe00000 	.word	0x3fe00000
 800c070:	000fffff 	.word	0x000fffff
 800c074:	7ff00000 	.word	0x7ff00000
 800c078:	7fefffff 	.word	0x7fefffff
 800c07c:	39500000 	.word	0x39500000
 800c080:	3ff00000 	.word	0x3ff00000
 800c084:	7fe00000 	.word	0x7fe00000
 800c088:	7c9fffff 	.word	0x7c9fffff
 800c08c:	3fe00000 	.word	0x3fe00000
 800c090:	bff00000 	.word	0xbff00000
 800c094:	9b04      	ldr	r3, [sp, #16]
 800c096:	b333      	cbz	r3, 800c0e6 <_strtod_l+0xb7e>
 800c098:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c09a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c09e:	d822      	bhi.n	800c0e6 <_strtod_l+0xb7e>
 800c0a0:	a327      	add	r3, pc, #156	; (adr r3, 800c140 <_strtod_l+0xbd8>)
 800c0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a6:	4630      	mov	r0, r6
 800c0a8:	4639      	mov	r1, r7
 800c0aa:	f7f4 fd29 	bl	8000b00 <__aeabi_dcmple>
 800c0ae:	b1a0      	cbz	r0, 800c0da <_strtod_l+0xb72>
 800c0b0:	4639      	mov	r1, r7
 800c0b2:	4630      	mov	r0, r6
 800c0b4:	f7f4 fd80 	bl	8000bb8 <__aeabi_d2uiz>
 800c0b8:	2800      	cmp	r0, #0
 800c0ba:	bf08      	it	eq
 800c0bc:	2001      	moveq	r0, #1
 800c0be:	f7f4 fa29 	bl	8000514 <__aeabi_ui2d>
 800c0c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c0c4:	4606      	mov	r6, r0
 800c0c6:	460f      	mov	r7, r1
 800c0c8:	bb03      	cbnz	r3, 800c10c <_strtod_l+0xba4>
 800c0ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c0ce:	9012      	str	r0, [sp, #72]	; 0x48
 800c0d0:	9313      	str	r3, [sp, #76]	; 0x4c
 800c0d2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800c0d6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c0da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c0de:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c0e2:	1a9b      	subs	r3, r3, r2
 800c0e4:	930b      	str	r3, [sp, #44]	; 0x2c
 800c0e6:	ed9d 0b08 	vldr	d0, [sp, #32]
 800c0ea:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800c0ee:	f001 ffcb 	bl	800e088 <__ulp>
 800c0f2:	4650      	mov	r0, sl
 800c0f4:	ec53 2b10 	vmov	r2, r3, d0
 800c0f8:	4659      	mov	r1, fp
 800c0fa:	f7f4 fa85 	bl	8000608 <__aeabi_dmul>
 800c0fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c102:	f7f4 f8cb 	bl	800029c <__adddf3>
 800c106:	4682      	mov	sl, r0
 800c108:	468b      	mov	fp, r1
 800c10a:	e772      	b.n	800bff2 <_strtod_l+0xa8a>
 800c10c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800c110:	e7df      	b.n	800c0d2 <_strtod_l+0xb6a>
 800c112:	a30d      	add	r3, pc, #52	; (adr r3, 800c148 <_strtod_l+0xbe0>)
 800c114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c118:	f7f4 fce8 	bl	8000aec <__aeabi_dcmplt>
 800c11c:	e79c      	b.n	800c058 <_strtod_l+0xaf0>
 800c11e:	2300      	movs	r3, #0
 800c120:	930d      	str	r3, [sp, #52]	; 0x34
 800c122:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c124:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c126:	6013      	str	r3, [r2, #0]
 800c128:	f7ff ba61 	b.w	800b5ee <_strtod_l+0x86>
 800c12c:	2b65      	cmp	r3, #101	; 0x65
 800c12e:	f04f 0200 	mov.w	r2, #0
 800c132:	f43f ab4e 	beq.w	800b7d2 <_strtod_l+0x26a>
 800c136:	2101      	movs	r1, #1
 800c138:	4614      	mov	r4, r2
 800c13a:	9104      	str	r1, [sp, #16]
 800c13c:	f7ff bacb 	b.w	800b6d6 <_strtod_l+0x16e>
 800c140:	ffc00000 	.word	0xffc00000
 800c144:	41dfffff 	.word	0x41dfffff
 800c148:	94a03595 	.word	0x94a03595
 800c14c:	3fcfffff 	.word	0x3fcfffff

0800c150 <_strtod_r>:
 800c150:	4b05      	ldr	r3, [pc, #20]	; (800c168 <_strtod_r+0x18>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	b410      	push	{r4}
 800c156:	6a1b      	ldr	r3, [r3, #32]
 800c158:	4c04      	ldr	r4, [pc, #16]	; (800c16c <_strtod_r+0x1c>)
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	bf08      	it	eq
 800c15e:	4623      	moveq	r3, r4
 800c160:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c164:	f7ff ba00 	b.w	800b568 <_strtod_l>
 800c168:	2000000c 	.word	0x2000000c
 800c16c:	20000070 	.word	0x20000070

0800c170 <_strtol_l.isra.0>:
 800c170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c174:	4680      	mov	r8, r0
 800c176:	4689      	mov	r9, r1
 800c178:	4692      	mov	sl, r2
 800c17a:	461e      	mov	r6, r3
 800c17c:	460f      	mov	r7, r1
 800c17e:	463d      	mov	r5, r7
 800c180:	9808      	ldr	r0, [sp, #32]
 800c182:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c186:	f001 fc27 	bl	800d9d8 <__locale_ctype_ptr_l>
 800c18a:	4420      	add	r0, r4
 800c18c:	7843      	ldrb	r3, [r0, #1]
 800c18e:	f013 0308 	ands.w	r3, r3, #8
 800c192:	d132      	bne.n	800c1fa <_strtol_l.isra.0+0x8a>
 800c194:	2c2d      	cmp	r4, #45	; 0x2d
 800c196:	d132      	bne.n	800c1fe <_strtol_l.isra.0+0x8e>
 800c198:	787c      	ldrb	r4, [r7, #1]
 800c19a:	1cbd      	adds	r5, r7, #2
 800c19c:	2201      	movs	r2, #1
 800c19e:	2e00      	cmp	r6, #0
 800c1a0:	d05d      	beq.n	800c25e <_strtol_l.isra.0+0xee>
 800c1a2:	2e10      	cmp	r6, #16
 800c1a4:	d109      	bne.n	800c1ba <_strtol_l.isra.0+0x4a>
 800c1a6:	2c30      	cmp	r4, #48	; 0x30
 800c1a8:	d107      	bne.n	800c1ba <_strtol_l.isra.0+0x4a>
 800c1aa:	782b      	ldrb	r3, [r5, #0]
 800c1ac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c1b0:	2b58      	cmp	r3, #88	; 0x58
 800c1b2:	d14f      	bne.n	800c254 <_strtol_l.isra.0+0xe4>
 800c1b4:	786c      	ldrb	r4, [r5, #1]
 800c1b6:	2610      	movs	r6, #16
 800c1b8:	3502      	adds	r5, #2
 800c1ba:	2a00      	cmp	r2, #0
 800c1bc:	bf14      	ite	ne
 800c1be:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800c1c2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800c1c6:	2700      	movs	r7, #0
 800c1c8:	fbb1 fcf6 	udiv	ip, r1, r6
 800c1cc:	4638      	mov	r0, r7
 800c1ce:	fb06 1e1c 	mls	lr, r6, ip, r1
 800c1d2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800c1d6:	2b09      	cmp	r3, #9
 800c1d8:	d817      	bhi.n	800c20a <_strtol_l.isra.0+0x9a>
 800c1da:	461c      	mov	r4, r3
 800c1dc:	42a6      	cmp	r6, r4
 800c1de:	dd23      	ble.n	800c228 <_strtol_l.isra.0+0xb8>
 800c1e0:	1c7b      	adds	r3, r7, #1
 800c1e2:	d007      	beq.n	800c1f4 <_strtol_l.isra.0+0x84>
 800c1e4:	4584      	cmp	ip, r0
 800c1e6:	d31c      	bcc.n	800c222 <_strtol_l.isra.0+0xb2>
 800c1e8:	d101      	bne.n	800c1ee <_strtol_l.isra.0+0x7e>
 800c1ea:	45a6      	cmp	lr, r4
 800c1ec:	db19      	blt.n	800c222 <_strtol_l.isra.0+0xb2>
 800c1ee:	fb00 4006 	mla	r0, r0, r6, r4
 800c1f2:	2701      	movs	r7, #1
 800c1f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c1f8:	e7eb      	b.n	800c1d2 <_strtol_l.isra.0+0x62>
 800c1fa:	462f      	mov	r7, r5
 800c1fc:	e7bf      	b.n	800c17e <_strtol_l.isra.0+0xe>
 800c1fe:	2c2b      	cmp	r4, #43	; 0x2b
 800c200:	bf04      	itt	eq
 800c202:	1cbd      	addeq	r5, r7, #2
 800c204:	787c      	ldrbeq	r4, [r7, #1]
 800c206:	461a      	mov	r2, r3
 800c208:	e7c9      	b.n	800c19e <_strtol_l.isra.0+0x2e>
 800c20a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800c20e:	2b19      	cmp	r3, #25
 800c210:	d801      	bhi.n	800c216 <_strtol_l.isra.0+0xa6>
 800c212:	3c37      	subs	r4, #55	; 0x37
 800c214:	e7e2      	b.n	800c1dc <_strtol_l.isra.0+0x6c>
 800c216:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800c21a:	2b19      	cmp	r3, #25
 800c21c:	d804      	bhi.n	800c228 <_strtol_l.isra.0+0xb8>
 800c21e:	3c57      	subs	r4, #87	; 0x57
 800c220:	e7dc      	b.n	800c1dc <_strtol_l.isra.0+0x6c>
 800c222:	f04f 37ff 	mov.w	r7, #4294967295
 800c226:	e7e5      	b.n	800c1f4 <_strtol_l.isra.0+0x84>
 800c228:	1c7b      	adds	r3, r7, #1
 800c22a:	d108      	bne.n	800c23e <_strtol_l.isra.0+0xce>
 800c22c:	2322      	movs	r3, #34	; 0x22
 800c22e:	f8c8 3000 	str.w	r3, [r8]
 800c232:	4608      	mov	r0, r1
 800c234:	f1ba 0f00 	cmp.w	sl, #0
 800c238:	d107      	bne.n	800c24a <_strtol_l.isra.0+0xda>
 800c23a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c23e:	b102      	cbz	r2, 800c242 <_strtol_l.isra.0+0xd2>
 800c240:	4240      	negs	r0, r0
 800c242:	f1ba 0f00 	cmp.w	sl, #0
 800c246:	d0f8      	beq.n	800c23a <_strtol_l.isra.0+0xca>
 800c248:	b10f      	cbz	r7, 800c24e <_strtol_l.isra.0+0xde>
 800c24a:	f105 39ff 	add.w	r9, r5, #4294967295
 800c24e:	f8ca 9000 	str.w	r9, [sl]
 800c252:	e7f2      	b.n	800c23a <_strtol_l.isra.0+0xca>
 800c254:	2430      	movs	r4, #48	; 0x30
 800c256:	2e00      	cmp	r6, #0
 800c258:	d1af      	bne.n	800c1ba <_strtol_l.isra.0+0x4a>
 800c25a:	2608      	movs	r6, #8
 800c25c:	e7ad      	b.n	800c1ba <_strtol_l.isra.0+0x4a>
 800c25e:	2c30      	cmp	r4, #48	; 0x30
 800c260:	d0a3      	beq.n	800c1aa <_strtol_l.isra.0+0x3a>
 800c262:	260a      	movs	r6, #10
 800c264:	e7a9      	b.n	800c1ba <_strtol_l.isra.0+0x4a>
	...

0800c268 <_strtol_r>:
 800c268:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c26a:	4c06      	ldr	r4, [pc, #24]	; (800c284 <_strtol_r+0x1c>)
 800c26c:	4d06      	ldr	r5, [pc, #24]	; (800c288 <_strtol_r+0x20>)
 800c26e:	6824      	ldr	r4, [r4, #0]
 800c270:	6a24      	ldr	r4, [r4, #32]
 800c272:	2c00      	cmp	r4, #0
 800c274:	bf08      	it	eq
 800c276:	462c      	moveq	r4, r5
 800c278:	9400      	str	r4, [sp, #0]
 800c27a:	f7ff ff79 	bl	800c170 <_strtol_l.isra.0>
 800c27e:	b003      	add	sp, #12
 800c280:	bd30      	pop	{r4, r5, pc}
 800c282:	bf00      	nop
 800c284:	2000000c 	.word	0x2000000c
 800c288:	20000070 	.word	0x20000070

0800c28c <__swbuf_r>:
 800c28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c28e:	460e      	mov	r6, r1
 800c290:	4614      	mov	r4, r2
 800c292:	4605      	mov	r5, r0
 800c294:	b118      	cbz	r0, 800c29e <__swbuf_r+0x12>
 800c296:	6983      	ldr	r3, [r0, #24]
 800c298:	b90b      	cbnz	r3, 800c29e <__swbuf_r+0x12>
 800c29a:	f000 ffed 	bl	800d278 <__sinit>
 800c29e:	4b21      	ldr	r3, [pc, #132]	; (800c324 <__swbuf_r+0x98>)
 800c2a0:	429c      	cmp	r4, r3
 800c2a2:	d12a      	bne.n	800c2fa <__swbuf_r+0x6e>
 800c2a4:	686c      	ldr	r4, [r5, #4]
 800c2a6:	69a3      	ldr	r3, [r4, #24]
 800c2a8:	60a3      	str	r3, [r4, #8]
 800c2aa:	89a3      	ldrh	r3, [r4, #12]
 800c2ac:	071a      	lsls	r2, r3, #28
 800c2ae:	d52e      	bpl.n	800c30e <__swbuf_r+0x82>
 800c2b0:	6923      	ldr	r3, [r4, #16]
 800c2b2:	b363      	cbz	r3, 800c30e <__swbuf_r+0x82>
 800c2b4:	6923      	ldr	r3, [r4, #16]
 800c2b6:	6820      	ldr	r0, [r4, #0]
 800c2b8:	1ac0      	subs	r0, r0, r3
 800c2ba:	6963      	ldr	r3, [r4, #20]
 800c2bc:	b2f6      	uxtb	r6, r6
 800c2be:	4283      	cmp	r3, r0
 800c2c0:	4637      	mov	r7, r6
 800c2c2:	dc04      	bgt.n	800c2ce <__swbuf_r+0x42>
 800c2c4:	4621      	mov	r1, r4
 800c2c6:	4628      	mov	r0, r5
 800c2c8:	f000 ff6c 	bl	800d1a4 <_fflush_r>
 800c2cc:	bb28      	cbnz	r0, 800c31a <__swbuf_r+0x8e>
 800c2ce:	68a3      	ldr	r3, [r4, #8]
 800c2d0:	3b01      	subs	r3, #1
 800c2d2:	60a3      	str	r3, [r4, #8]
 800c2d4:	6823      	ldr	r3, [r4, #0]
 800c2d6:	1c5a      	adds	r2, r3, #1
 800c2d8:	6022      	str	r2, [r4, #0]
 800c2da:	701e      	strb	r6, [r3, #0]
 800c2dc:	6963      	ldr	r3, [r4, #20]
 800c2de:	3001      	adds	r0, #1
 800c2e0:	4283      	cmp	r3, r0
 800c2e2:	d004      	beq.n	800c2ee <__swbuf_r+0x62>
 800c2e4:	89a3      	ldrh	r3, [r4, #12]
 800c2e6:	07db      	lsls	r3, r3, #31
 800c2e8:	d519      	bpl.n	800c31e <__swbuf_r+0x92>
 800c2ea:	2e0a      	cmp	r6, #10
 800c2ec:	d117      	bne.n	800c31e <__swbuf_r+0x92>
 800c2ee:	4621      	mov	r1, r4
 800c2f0:	4628      	mov	r0, r5
 800c2f2:	f000 ff57 	bl	800d1a4 <_fflush_r>
 800c2f6:	b190      	cbz	r0, 800c31e <__swbuf_r+0x92>
 800c2f8:	e00f      	b.n	800c31a <__swbuf_r+0x8e>
 800c2fa:	4b0b      	ldr	r3, [pc, #44]	; (800c328 <__swbuf_r+0x9c>)
 800c2fc:	429c      	cmp	r4, r3
 800c2fe:	d101      	bne.n	800c304 <__swbuf_r+0x78>
 800c300:	68ac      	ldr	r4, [r5, #8]
 800c302:	e7d0      	b.n	800c2a6 <__swbuf_r+0x1a>
 800c304:	4b09      	ldr	r3, [pc, #36]	; (800c32c <__swbuf_r+0xa0>)
 800c306:	429c      	cmp	r4, r3
 800c308:	bf08      	it	eq
 800c30a:	68ec      	ldreq	r4, [r5, #12]
 800c30c:	e7cb      	b.n	800c2a6 <__swbuf_r+0x1a>
 800c30e:	4621      	mov	r1, r4
 800c310:	4628      	mov	r0, r5
 800c312:	f000 f80d 	bl	800c330 <__swsetup_r>
 800c316:	2800      	cmp	r0, #0
 800c318:	d0cc      	beq.n	800c2b4 <__swbuf_r+0x28>
 800c31a:	f04f 37ff 	mov.w	r7, #4294967295
 800c31e:	4638      	mov	r0, r7
 800c320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c322:	bf00      	nop
 800c324:	0801ee90 	.word	0x0801ee90
 800c328:	0801eeb0 	.word	0x0801eeb0
 800c32c:	0801ee70 	.word	0x0801ee70

0800c330 <__swsetup_r>:
 800c330:	4b32      	ldr	r3, [pc, #200]	; (800c3fc <__swsetup_r+0xcc>)
 800c332:	b570      	push	{r4, r5, r6, lr}
 800c334:	681d      	ldr	r5, [r3, #0]
 800c336:	4606      	mov	r6, r0
 800c338:	460c      	mov	r4, r1
 800c33a:	b125      	cbz	r5, 800c346 <__swsetup_r+0x16>
 800c33c:	69ab      	ldr	r3, [r5, #24]
 800c33e:	b913      	cbnz	r3, 800c346 <__swsetup_r+0x16>
 800c340:	4628      	mov	r0, r5
 800c342:	f000 ff99 	bl	800d278 <__sinit>
 800c346:	4b2e      	ldr	r3, [pc, #184]	; (800c400 <__swsetup_r+0xd0>)
 800c348:	429c      	cmp	r4, r3
 800c34a:	d10f      	bne.n	800c36c <__swsetup_r+0x3c>
 800c34c:	686c      	ldr	r4, [r5, #4]
 800c34e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c352:	b29a      	uxth	r2, r3
 800c354:	0715      	lsls	r5, r2, #28
 800c356:	d42c      	bmi.n	800c3b2 <__swsetup_r+0x82>
 800c358:	06d0      	lsls	r0, r2, #27
 800c35a:	d411      	bmi.n	800c380 <__swsetup_r+0x50>
 800c35c:	2209      	movs	r2, #9
 800c35e:	6032      	str	r2, [r6, #0]
 800c360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c364:	81a3      	strh	r3, [r4, #12]
 800c366:	f04f 30ff 	mov.w	r0, #4294967295
 800c36a:	e03e      	b.n	800c3ea <__swsetup_r+0xba>
 800c36c:	4b25      	ldr	r3, [pc, #148]	; (800c404 <__swsetup_r+0xd4>)
 800c36e:	429c      	cmp	r4, r3
 800c370:	d101      	bne.n	800c376 <__swsetup_r+0x46>
 800c372:	68ac      	ldr	r4, [r5, #8]
 800c374:	e7eb      	b.n	800c34e <__swsetup_r+0x1e>
 800c376:	4b24      	ldr	r3, [pc, #144]	; (800c408 <__swsetup_r+0xd8>)
 800c378:	429c      	cmp	r4, r3
 800c37a:	bf08      	it	eq
 800c37c:	68ec      	ldreq	r4, [r5, #12]
 800c37e:	e7e6      	b.n	800c34e <__swsetup_r+0x1e>
 800c380:	0751      	lsls	r1, r2, #29
 800c382:	d512      	bpl.n	800c3aa <__swsetup_r+0x7a>
 800c384:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c386:	b141      	cbz	r1, 800c39a <__swsetup_r+0x6a>
 800c388:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c38c:	4299      	cmp	r1, r3
 800c38e:	d002      	beq.n	800c396 <__swsetup_r+0x66>
 800c390:	4630      	mov	r0, r6
 800c392:	f7fe f91f 	bl	800a5d4 <_free_r>
 800c396:	2300      	movs	r3, #0
 800c398:	6363      	str	r3, [r4, #52]	; 0x34
 800c39a:	89a3      	ldrh	r3, [r4, #12]
 800c39c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c3a0:	81a3      	strh	r3, [r4, #12]
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	6063      	str	r3, [r4, #4]
 800c3a6:	6923      	ldr	r3, [r4, #16]
 800c3a8:	6023      	str	r3, [r4, #0]
 800c3aa:	89a3      	ldrh	r3, [r4, #12]
 800c3ac:	f043 0308 	orr.w	r3, r3, #8
 800c3b0:	81a3      	strh	r3, [r4, #12]
 800c3b2:	6923      	ldr	r3, [r4, #16]
 800c3b4:	b94b      	cbnz	r3, 800c3ca <__swsetup_r+0x9a>
 800c3b6:	89a3      	ldrh	r3, [r4, #12]
 800c3b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c3bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c3c0:	d003      	beq.n	800c3ca <__swsetup_r+0x9a>
 800c3c2:	4621      	mov	r1, r4
 800c3c4:	4630      	mov	r0, r6
 800c3c6:	f001 fb3f 	bl	800da48 <__smakebuf_r>
 800c3ca:	89a2      	ldrh	r2, [r4, #12]
 800c3cc:	f012 0301 	ands.w	r3, r2, #1
 800c3d0:	d00c      	beq.n	800c3ec <__swsetup_r+0xbc>
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	60a3      	str	r3, [r4, #8]
 800c3d6:	6963      	ldr	r3, [r4, #20]
 800c3d8:	425b      	negs	r3, r3
 800c3da:	61a3      	str	r3, [r4, #24]
 800c3dc:	6923      	ldr	r3, [r4, #16]
 800c3de:	b953      	cbnz	r3, 800c3f6 <__swsetup_r+0xc6>
 800c3e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3e4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c3e8:	d1ba      	bne.n	800c360 <__swsetup_r+0x30>
 800c3ea:	bd70      	pop	{r4, r5, r6, pc}
 800c3ec:	0792      	lsls	r2, r2, #30
 800c3ee:	bf58      	it	pl
 800c3f0:	6963      	ldrpl	r3, [r4, #20]
 800c3f2:	60a3      	str	r3, [r4, #8]
 800c3f4:	e7f2      	b.n	800c3dc <__swsetup_r+0xac>
 800c3f6:	2000      	movs	r0, #0
 800c3f8:	e7f7      	b.n	800c3ea <__swsetup_r+0xba>
 800c3fa:	bf00      	nop
 800c3fc:	2000000c 	.word	0x2000000c
 800c400:	0801ee90 	.word	0x0801ee90
 800c404:	0801eeb0 	.word	0x0801eeb0
 800c408:	0801ee70 	.word	0x0801ee70

0800c40c <quorem>:
 800c40c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c410:	6903      	ldr	r3, [r0, #16]
 800c412:	690c      	ldr	r4, [r1, #16]
 800c414:	42a3      	cmp	r3, r4
 800c416:	4680      	mov	r8, r0
 800c418:	f2c0 8082 	blt.w	800c520 <quorem+0x114>
 800c41c:	3c01      	subs	r4, #1
 800c41e:	f101 0714 	add.w	r7, r1, #20
 800c422:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800c426:	f100 0614 	add.w	r6, r0, #20
 800c42a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c42e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800c432:	eb06 030c 	add.w	r3, r6, ip
 800c436:	3501      	adds	r5, #1
 800c438:	eb07 090c 	add.w	r9, r7, ip
 800c43c:	9301      	str	r3, [sp, #4]
 800c43e:	fbb0 f5f5 	udiv	r5, r0, r5
 800c442:	b395      	cbz	r5, 800c4aa <quorem+0x9e>
 800c444:	f04f 0a00 	mov.w	sl, #0
 800c448:	4638      	mov	r0, r7
 800c44a:	46b6      	mov	lr, r6
 800c44c:	46d3      	mov	fp, sl
 800c44e:	f850 2b04 	ldr.w	r2, [r0], #4
 800c452:	b293      	uxth	r3, r2
 800c454:	fb05 a303 	mla	r3, r5, r3, sl
 800c458:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c45c:	b29b      	uxth	r3, r3
 800c45e:	ebab 0303 	sub.w	r3, fp, r3
 800c462:	0c12      	lsrs	r2, r2, #16
 800c464:	f8de b000 	ldr.w	fp, [lr]
 800c468:	fb05 a202 	mla	r2, r5, r2, sl
 800c46c:	fa13 f38b 	uxtah	r3, r3, fp
 800c470:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800c474:	fa1f fb82 	uxth.w	fp, r2
 800c478:	f8de 2000 	ldr.w	r2, [lr]
 800c47c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800c480:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c484:	b29b      	uxth	r3, r3
 800c486:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c48a:	4581      	cmp	r9, r0
 800c48c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800c490:	f84e 3b04 	str.w	r3, [lr], #4
 800c494:	d2db      	bcs.n	800c44e <quorem+0x42>
 800c496:	f856 300c 	ldr.w	r3, [r6, ip]
 800c49a:	b933      	cbnz	r3, 800c4aa <quorem+0x9e>
 800c49c:	9b01      	ldr	r3, [sp, #4]
 800c49e:	3b04      	subs	r3, #4
 800c4a0:	429e      	cmp	r6, r3
 800c4a2:	461a      	mov	r2, r3
 800c4a4:	d330      	bcc.n	800c508 <quorem+0xfc>
 800c4a6:	f8c8 4010 	str.w	r4, [r8, #16]
 800c4aa:	4640      	mov	r0, r8
 800c4ac:	f001 fd74 	bl	800df98 <__mcmp>
 800c4b0:	2800      	cmp	r0, #0
 800c4b2:	db25      	blt.n	800c500 <quorem+0xf4>
 800c4b4:	3501      	adds	r5, #1
 800c4b6:	4630      	mov	r0, r6
 800c4b8:	f04f 0c00 	mov.w	ip, #0
 800c4bc:	f857 2b04 	ldr.w	r2, [r7], #4
 800c4c0:	f8d0 e000 	ldr.w	lr, [r0]
 800c4c4:	b293      	uxth	r3, r2
 800c4c6:	ebac 0303 	sub.w	r3, ip, r3
 800c4ca:	0c12      	lsrs	r2, r2, #16
 800c4cc:	fa13 f38e 	uxtah	r3, r3, lr
 800c4d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c4d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c4d8:	b29b      	uxth	r3, r3
 800c4da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c4de:	45b9      	cmp	r9, r7
 800c4e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c4e4:	f840 3b04 	str.w	r3, [r0], #4
 800c4e8:	d2e8      	bcs.n	800c4bc <quorem+0xb0>
 800c4ea:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800c4ee:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800c4f2:	b92a      	cbnz	r2, 800c500 <quorem+0xf4>
 800c4f4:	3b04      	subs	r3, #4
 800c4f6:	429e      	cmp	r6, r3
 800c4f8:	461a      	mov	r2, r3
 800c4fa:	d30b      	bcc.n	800c514 <quorem+0x108>
 800c4fc:	f8c8 4010 	str.w	r4, [r8, #16]
 800c500:	4628      	mov	r0, r5
 800c502:	b003      	add	sp, #12
 800c504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c508:	6812      	ldr	r2, [r2, #0]
 800c50a:	3b04      	subs	r3, #4
 800c50c:	2a00      	cmp	r2, #0
 800c50e:	d1ca      	bne.n	800c4a6 <quorem+0x9a>
 800c510:	3c01      	subs	r4, #1
 800c512:	e7c5      	b.n	800c4a0 <quorem+0x94>
 800c514:	6812      	ldr	r2, [r2, #0]
 800c516:	3b04      	subs	r3, #4
 800c518:	2a00      	cmp	r2, #0
 800c51a:	d1ef      	bne.n	800c4fc <quorem+0xf0>
 800c51c:	3c01      	subs	r4, #1
 800c51e:	e7ea      	b.n	800c4f6 <quorem+0xea>
 800c520:	2000      	movs	r0, #0
 800c522:	e7ee      	b.n	800c502 <quorem+0xf6>
 800c524:	0000      	movs	r0, r0
	...

0800c528 <_dtoa_r>:
 800c528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c52c:	ec57 6b10 	vmov	r6, r7, d0
 800c530:	b097      	sub	sp, #92	; 0x5c
 800c532:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c534:	9106      	str	r1, [sp, #24]
 800c536:	4604      	mov	r4, r0
 800c538:	920b      	str	r2, [sp, #44]	; 0x2c
 800c53a:	9312      	str	r3, [sp, #72]	; 0x48
 800c53c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c540:	e9cd 6700 	strd	r6, r7, [sp]
 800c544:	b93d      	cbnz	r5, 800c556 <_dtoa_r+0x2e>
 800c546:	2010      	movs	r0, #16
 800c548:	f7fe f810 	bl	800a56c <malloc>
 800c54c:	6260      	str	r0, [r4, #36]	; 0x24
 800c54e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c552:	6005      	str	r5, [r0, #0]
 800c554:	60c5      	str	r5, [r0, #12]
 800c556:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c558:	6819      	ldr	r1, [r3, #0]
 800c55a:	b151      	cbz	r1, 800c572 <_dtoa_r+0x4a>
 800c55c:	685a      	ldr	r2, [r3, #4]
 800c55e:	604a      	str	r2, [r1, #4]
 800c560:	2301      	movs	r3, #1
 800c562:	4093      	lsls	r3, r2
 800c564:	608b      	str	r3, [r1, #8]
 800c566:	4620      	mov	r0, r4
 800c568:	f001 faf6 	bl	800db58 <_Bfree>
 800c56c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c56e:	2200      	movs	r2, #0
 800c570:	601a      	str	r2, [r3, #0]
 800c572:	1e3b      	subs	r3, r7, #0
 800c574:	bfbb      	ittet	lt
 800c576:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c57a:	9301      	strlt	r3, [sp, #4]
 800c57c:	2300      	movge	r3, #0
 800c57e:	2201      	movlt	r2, #1
 800c580:	bfac      	ite	ge
 800c582:	f8c8 3000 	strge.w	r3, [r8]
 800c586:	f8c8 2000 	strlt.w	r2, [r8]
 800c58a:	4baf      	ldr	r3, [pc, #700]	; (800c848 <_dtoa_r+0x320>)
 800c58c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c590:	ea33 0308 	bics.w	r3, r3, r8
 800c594:	d114      	bne.n	800c5c0 <_dtoa_r+0x98>
 800c596:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c598:	f242 730f 	movw	r3, #9999	; 0x270f
 800c59c:	6013      	str	r3, [r2, #0]
 800c59e:	9b00      	ldr	r3, [sp, #0]
 800c5a0:	b923      	cbnz	r3, 800c5ac <_dtoa_r+0x84>
 800c5a2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800c5a6:	2800      	cmp	r0, #0
 800c5a8:	f000 8542 	beq.w	800d030 <_dtoa_r+0xb08>
 800c5ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c5ae:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800c85c <_dtoa_r+0x334>
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	f000 8544 	beq.w	800d040 <_dtoa_r+0xb18>
 800c5b8:	f10b 0303 	add.w	r3, fp, #3
 800c5bc:	f000 bd3e 	b.w	800d03c <_dtoa_r+0xb14>
 800c5c0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	4630      	mov	r0, r6
 800c5ca:	4639      	mov	r1, r7
 800c5cc:	f7f4 fa84 	bl	8000ad8 <__aeabi_dcmpeq>
 800c5d0:	4681      	mov	r9, r0
 800c5d2:	b168      	cbz	r0, 800c5f0 <_dtoa_r+0xc8>
 800c5d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	6013      	str	r3, [r2, #0]
 800c5da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	f000 8524 	beq.w	800d02a <_dtoa_r+0xb02>
 800c5e2:	4b9a      	ldr	r3, [pc, #616]	; (800c84c <_dtoa_r+0x324>)
 800c5e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c5e6:	f103 3bff 	add.w	fp, r3, #4294967295
 800c5ea:	6013      	str	r3, [r2, #0]
 800c5ec:	f000 bd28 	b.w	800d040 <_dtoa_r+0xb18>
 800c5f0:	aa14      	add	r2, sp, #80	; 0x50
 800c5f2:	a915      	add	r1, sp, #84	; 0x54
 800c5f4:	ec47 6b10 	vmov	d0, r6, r7
 800c5f8:	4620      	mov	r0, r4
 800c5fa:	f001 fdbb 	bl	800e174 <__d2b>
 800c5fe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c602:	9004      	str	r0, [sp, #16]
 800c604:	2d00      	cmp	r5, #0
 800c606:	d07c      	beq.n	800c702 <_dtoa_r+0x1da>
 800c608:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c60c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800c610:	46b2      	mov	sl, r6
 800c612:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800c616:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c61a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800c61e:	2200      	movs	r2, #0
 800c620:	4b8b      	ldr	r3, [pc, #556]	; (800c850 <_dtoa_r+0x328>)
 800c622:	4650      	mov	r0, sl
 800c624:	4659      	mov	r1, fp
 800c626:	f7f3 fe37 	bl	8000298 <__aeabi_dsub>
 800c62a:	a381      	add	r3, pc, #516	; (adr r3, 800c830 <_dtoa_r+0x308>)
 800c62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c630:	f7f3 ffea 	bl	8000608 <__aeabi_dmul>
 800c634:	a380      	add	r3, pc, #512	; (adr r3, 800c838 <_dtoa_r+0x310>)
 800c636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c63a:	f7f3 fe2f 	bl	800029c <__adddf3>
 800c63e:	4606      	mov	r6, r0
 800c640:	4628      	mov	r0, r5
 800c642:	460f      	mov	r7, r1
 800c644:	f7f3 ff76 	bl	8000534 <__aeabi_i2d>
 800c648:	a37d      	add	r3, pc, #500	; (adr r3, 800c840 <_dtoa_r+0x318>)
 800c64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c64e:	f7f3 ffdb 	bl	8000608 <__aeabi_dmul>
 800c652:	4602      	mov	r2, r0
 800c654:	460b      	mov	r3, r1
 800c656:	4630      	mov	r0, r6
 800c658:	4639      	mov	r1, r7
 800c65a:	f7f3 fe1f 	bl	800029c <__adddf3>
 800c65e:	4606      	mov	r6, r0
 800c660:	460f      	mov	r7, r1
 800c662:	f7f4 fa81 	bl	8000b68 <__aeabi_d2iz>
 800c666:	2200      	movs	r2, #0
 800c668:	4682      	mov	sl, r0
 800c66a:	2300      	movs	r3, #0
 800c66c:	4630      	mov	r0, r6
 800c66e:	4639      	mov	r1, r7
 800c670:	f7f4 fa3c 	bl	8000aec <__aeabi_dcmplt>
 800c674:	b148      	cbz	r0, 800c68a <_dtoa_r+0x162>
 800c676:	4650      	mov	r0, sl
 800c678:	f7f3 ff5c 	bl	8000534 <__aeabi_i2d>
 800c67c:	4632      	mov	r2, r6
 800c67e:	463b      	mov	r3, r7
 800c680:	f7f4 fa2a 	bl	8000ad8 <__aeabi_dcmpeq>
 800c684:	b908      	cbnz	r0, 800c68a <_dtoa_r+0x162>
 800c686:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c68a:	f1ba 0f16 	cmp.w	sl, #22
 800c68e:	d859      	bhi.n	800c744 <_dtoa_r+0x21c>
 800c690:	4970      	ldr	r1, [pc, #448]	; (800c854 <_dtoa_r+0x32c>)
 800c692:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c696:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c69a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c69e:	f7f4 fa43 	bl	8000b28 <__aeabi_dcmpgt>
 800c6a2:	2800      	cmp	r0, #0
 800c6a4:	d050      	beq.n	800c748 <_dtoa_r+0x220>
 800c6a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	930f      	str	r3, [sp, #60]	; 0x3c
 800c6ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c6b0:	1b5d      	subs	r5, r3, r5
 800c6b2:	f1b5 0801 	subs.w	r8, r5, #1
 800c6b6:	bf49      	itett	mi
 800c6b8:	f1c5 0301 	rsbmi	r3, r5, #1
 800c6bc:	2300      	movpl	r3, #0
 800c6be:	9305      	strmi	r3, [sp, #20]
 800c6c0:	f04f 0800 	movmi.w	r8, #0
 800c6c4:	bf58      	it	pl
 800c6c6:	9305      	strpl	r3, [sp, #20]
 800c6c8:	f1ba 0f00 	cmp.w	sl, #0
 800c6cc:	db3e      	blt.n	800c74c <_dtoa_r+0x224>
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	44d0      	add	r8, sl
 800c6d2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800c6d6:	9307      	str	r3, [sp, #28]
 800c6d8:	9b06      	ldr	r3, [sp, #24]
 800c6da:	2b09      	cmp	r3, #9
 800c6dc:	f200 8090 	bhi.w	800c800 <_dtoa_r+0x2d8>
 800c6e0:	2b05      	cmp	r3, #5
 800c6e2:	bfc4      	itt	gt
 800c6e4:	3b04      	subgt	r3, #4
 800c6e6:	9306      	strgt	r3, [sp, #24]
 800c6e8:	9b06      	ldr	r3, [sp, #24]
 800c6ea:	f1a3 0302 	sub.w	r3, r3, #2
 800c6ee:	bfcc      	ite	gt
 800c6f0:	2500      	movgt	r5, #0
 800c6f2:	2501      	movle	r5, #1
 800c6f4:	2b03      	cmp	r3, #3
 800c6f6:	f200 808f 	bhi.w	800c818 <_dtoa_r+0x2f0>
 800c6fa:	e8df f003 	tbb	[pc, r3]
 800c6fe:	7f7d      	.short	0x7f7d
 800c700:	7131      	.short	0x7131
 800c702:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800c706:	441d      	add	r5, r3
 800c708:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800c70c:	2820      	cmp	r0, #32
 800c70e:	dd13      	ble.n	800c738 <_dtoa_r+0x210>
 800c710:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800c714:	9b00      	ldr	r3, [sp, #0]
 800c716:	fa08 f800 	lsl.w	r8, r8, r0
 800c71a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800c71e:	fa23 f000 	lsr.w	r0, r3, r0
 800c722:	ea48 0000 	orr.w	r0, r8, r0
 800c726:	f7f3 fef5 	bl	8000514 <__aeabi_ui2d>
 800c72a:	2301      	movs	r3, #1
 800c72c:	4682      	mov	sl, r0
 800c72e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800c732:	3d01      	subs	r5, #1
 800c734:	9313      	str	r3, [sp, #76]	; 0x4c
 800c736:	e772      	b.n	800c61e <_dtoa_r+0xf6>
 800c738:	9b00      	ldr	r3, [sp, #0]
 800c73a:	f1c0 0020 	rsb	r0, r0, #32
 800c73e:	fa03 f000 	lsl.w	r0, r3, r0
 800c742:	e7f0      	b.n	800c726 <_dtoa_r+0x1fe>
 800c744:	2301      	movs	r3, #1
 800c746:	e7b1      	b.n	800c6ac <_dtoa_r+0x184>
 800c748:	900f      	str	r0, [sp, #60]	; 0x3c
 800c74a:	e7b0      	b.n	800c6ae <_dtoa_r+0x186>
 800c74c:	9b05      	ldr	r3, [sp, #20]
 800c74e:	eba3 030a 	sub.w	r3, r3, sl
 800c752:	9305      	str	r3, [sp, #20]
 800c754:	f1ca 0300 	rsb	r3, sl, #0
 800c758:	9307      	str	r3, [sp, #28]
 800c75a:	2300      	movs	r3, #0
 800c75c:	930e      	str	r3, [sp, #56]	; 0x38
 800c75e:	e7bb      	b.n	800c6d8 <_dtoa_r+0x1b0>
 800c760:	2301      	movs	r3, #1
 800c762:	930a      	str	r3, [sp, #40]	; 0x28
 800c764:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c766:	2b00      	cmp	r3, #0
 800c768:	dd59      	ble.n	800c81e <_dtoa_r+0x2f6>
 800c76a:	9302      	str	r3, [sp, #8]
 800c76c:	4699      	mov	r9, r3
 800c76e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c770:	2200      	movs	r2, #0
 800c772:	6072      	str	r2, [r6, #4]
 800c774:	2204      	movs	r2, #4
 800c776:	f102 0014 	add.w	r0, r2, #20
 800c77a:	4298      	cmp	r0, r3
 800c77c:	6871      	ldr	r1, [r6, #4]
 800c77e:	d953      	bls.n	800c828 <_dtoa_r+0x300>
 800c780:	4620      	mov	r0, r4
 800c782:	f001 f9b5 	bl	800daf0 <_Balloc>
 800c786:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c788:	6030      	str	r0, [r6, #0]
 800c78a:	f1b9 0f0e 	cmp.w	r9, #14
 800c78e:	f8d3 b000 	ldr.w	fp, [r3]
 800c792:	f200 80e6 	bhi.w	800c962 <_dtoa_r+0x43a>
 800c796:	2d00      	cmp	r5, #0
 800c798:	f000 80e3 	beq.w	800c962 <_dtoa_r+0x43a>
 800c79c:	ed9d 7b00 	vldr	d7, [sp]
 800c7a0:	f1ba 0f00 	cmp.w	sl, #0
 800c7a4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800c7a8:	dd74      	ble.n	800c894 <_dtoa_r+0x36c>
 800c7aa:	4a2a      	ldr	r2, [pc, #168]	; (800c854 <_dtoa_r+0x32c>)
 800c7ac:	f00a 030f 	and.w	r3, sl, #15
 800c7b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c7b4:	ed93 7b00 	vldr	d7, [r3]
 800c7b8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800c7bc:	06f0      	lsls	r0, r6, #27
 800c7be:	ed8d 7b08 	vstr	d7, [sp, #32]
 800c7c2:	d565      	bpl.n	800c890 <_dtoa_r+0x368>
 800c7c4:	4b24      	ldr	r3, [pc, #144]	; (800c858 <_dtoa_r+0x330>)
 800c7c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c7ca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c7ce:	f7f4 f845 	bl	800085c <__aeabi_ddiv>
 800c7d2:	e9cd 0100 	strd	r0, r1, [sp]
 800c7d6:	f006 060f 	and.w	r6, r6, #15
 800c7da:	2503      	movs	r5, #3
 800c7dc:	4f1e      	ldr	r7, [pc, #120]	; (800c858 <_dtoa_r+0x330>)
 800c7de:	e04c      	b.n	800c87a <_dtoa_r+0x352>
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	930a      	str	r3, [sp, #40]	; 0x28
 800c7e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7e6:	4453      	add	r3, sl
 800c7e8:	f103 0901 	add.w	r9, r3, #1
 800c7ec:	9302      	str	r3, [sp, #8]
 800c7ee:	464b      	mov	r3, r9
 800c7f0:	2b01      	cmp	r3, #1
 800c7f2:	bfb8      	it	lt
 800c7f4:	2301      	movlt	r3, #1
 800c7f6:	e7ba      	b.n	800c76e <_dtoa_r+0x246>
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	e7b2      	b.n	800c762 <_dtoa_r+0x23a>
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	e7f0      	b.n	800c7e2 <_dtoa_r+0x2ba>
 800c800:	2501      	movs	r5, #1
 800c802:	2300      	movs	r3, #0
 800c804:	9306      	str	r3, [sp, #24]
 800c806:	950a      	str	r5, [sp, #40]	; 0x28
 800c808:	f04f 33ff 	mov.w	r3, #4294967295
 800c80c:	9302      	str	r3, [sp, #8]
 800c80e:	4699      	mov	r9, r3
 800c810:	2200      	movs	r2, #0
 800c812:	2312      	movs	r3, #18
 800c814:	920b      	str	r2, [sp, #44]	; 0x2c
 800c816:	e7aa      	b.n	800c76e <_dtoa_r+0x246>
 800c818:	2301      	movs	r3, #1
 800c81a:	930a      	str	r3, [sp, #40]	; 0x28
 800c81c:	e7f4      	b.n	800c808 <_dtoa_r+0x2e0>
 800c81e:	2301      	movs	r3, #1
 800c820:	9302      	str	r3, [sp, #8]
 800c822:	4699      	mov	r9, r3
 800c824:	461a      	mov	r2, r3
 800c826:	e7f5      	b.n	800c814 <_dtoa_r+0x2ec>
 800c828:	3101      	adds	r1, #1
 800c82a:	6071      	str	r1, [r6, #4]
 800c82c:	0052      	lsls	r2, r2, #1
 800c82e:	e7a2      	b.n	800c776 <_dtoa_r+0x24e>
 800c830:	636f4361 	.word	0x636f4361
 800c834:	3fd287a7 	.word	0x3fd287a7
 800c838:	8b60c8b3 	.word	0x8b60c8b3
 800c83c:	3fc68a28 	.word	0x3fc68a28
 800c840:	509f79fb 	.word	0x509f79fb
 800c844:	3fd34413 	.word	0x3fd34413
 800c848:	7ff00000 	.word	0x7ff00000
 800c84c:	0801ede1 	.word	0x0801ede1
 800c850:	3ff80000 	.word	0x3ff80000
 800c854:	0801ef08 	.word	0x0801ef08
 800c858:	0801eee0 	.word	0x0801eee0
 800c85c:	0801ee69 	.word	0x0801ee69
 800c860:	07f1      	lsls	r1, r6, #31
 800c862:	d508      	bpl.n	800c876 <_dtoa_r+0x34e>
 800c864:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c868:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c86c:	f7f3 fecc 	bl	8000608 <__aeabi_dmul>
 800c870:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c874:	3501      	adds	r5, #1
 800c876:	1076      	asrs	r6, r6, #1
 800c878:	3708      	adds	r7, #8
 800c87a:	2e00      	cmp	r6, #0
 800c87c:	d1f0      	bne.n	800c860 <_dtoa_r+0x338>
 800c87e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c882:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c886:	f7f3 ffe9 	bl	800085c <__aeabi_ddiv>
 800c88a:	e9cd 0100 	strd	r0, r1, [sp]
 800c88e:	e01a      	b.n	800c8c6 <_dtoa_r+0x39e>
 800c890:	2502      	movs	r5, #2
 800c892:	e7a3      	b.n	800c7dc <_dtoa_r+0x2b4>
 800c894:	f000 80a0 	beq.w	800c9d8 <_dtoa_r+0x4b0>
 800c898:	f1ca 0600 	rsb	r6, sl, #0
 800c89c:	4b9f      	ldr	r3, [pc, #636]	; (800cb1c <_dtoa_r+0x5f4>)
 800c89e:	4fa0      	ldr	r7, [pc, #640]	; (800cb20 <_dtoa_r+0x5f8>)
 800c8a0:	f006 020f 	and.w	r2, r6, #15
 800c8a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c8b0:	f7f3 feaa 	bl	8000608 <__aeabi_dmul>
 800c8b4:	e9cd 0100 	strd	r0, r1, [sp]
 800c8b8:	1136      	asrs	r6, r6, #4
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	2502      	movs	r5, #2
 800c8be:	2e00      	cmp	r6, #0
 800c8c0:	d17f      	bne.n	800c9c2 <_dtoa_r+0x49a>
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d1e1      	bne.n	800c88a <_dtoa_r+0x362>
 800c8c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	f000 8087 	beq.w	800c9dc <_dtoa_r+0x4b4>
 800c8ce:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	4b93      	ldr	r3, [pc, #588]	; (800cb24 <_dtoa_r+0x5fc>)
 800c8d6:	4630      	mov	r0, r6
 800c8d8:	4639      	mov	r1, r7
 800c8da:	f7f4 f907 	bl	8000aec <__aeabi_dcmplt>
 800c8de:	2800      	cmp	r0, #0
 800c8e0:	d07c      	beq.n	800c9dc <_dtoa_r+0x4b4>
 800c8e2:	f1b9 0f00 	cmp.w	r9, #0
 800c8e6:	d079      	beq.n	800c9dc <_dtoa_r+0x4b4>
 800c8e8:	9b02      	ldr	r3, [sp, #8]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	dd35      	ble.n	800c95a <_dtoa_r+0x432>
 800c8ee:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c8f2:	9308      	str	r3, [sp, #32]
 800c8f4:	4639      	mov	r1, r7
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	4b8b      	ldr	r3, [pc, #556]	; (800cb28 <_dtoa_r+0x600>)
 800c8fa:	4630      	mov	r0, r6
 800c8fc:	f7f3 fe84 	bl	8000608 <__aeabi_dmul>
 800c900:	e9cd 0100 	strd	r0, r1, [sp]
 800c904:	9f02      	ldr	r7, [sp, #8]
 800c906:	3501      	adds	r5, #1
 800c908:	4628      	mov	r0, r5
 800c90a:	f7f3 fe13 	bl	8000534 <__aeabi_i2d>
 800c90e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c912:	f7f3 fe79 	bl	8000608 <__aeabi_dmul>
 800c916:	2200      	movs	r2, #0
 800c918:	4b84      	ldr	r3, [pc, #528]	; (800cb2c <_dtoa_r+0x604>)
 800c91a:	f7f3 fcbf 	bl	800029c <__adddf3>
 800c91e:	4605      	mov	r5, r0
 800c920:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c924:	2f00      	cmp	r7, #0
 800c926:	d15d      	bne.n	800c9e4 <_dtoa_r+0x4bc>
 800c928:	2200      	movs	r2, #0
 800c92a:	4b81      	ldr	r3, [pc, #516]	; (800cb30 <_dtoa_r+0x608>)
 800c92c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c930:	f7f3 fcb2 	bl	8000298 <__aeabi_dsub>
 800c934:	462a      	mov	r2, r5
 800c936:	4633      	mov	r3, r6
 800c938:	e9cd 0100 	strd	r0, r1, [sp]
 800c93c:	f7f4 f8f4 	bl	8000b28 <__aeabi_dcmpgt>
 800c940:	2800      	cmp	r0, #0
 800c942:	f040 8288 	bne.w	800ce56 <_dtoa_r+0x92e>
 800c946:	462a      	mov	r2, r5
 800c948:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c94c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c950:	f7f4 f8cc 	bl	8000aec <__aeabi_dcmplt>
 800c954:	2800      	cmp	r0, #0
 800c956:	f040 827c 	bne.w	800ce52 <_dtoa_r+0x92a>
 800c95a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c95e:	e9cd 2300 	strd	r2, r3, [sp]
 800c962:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c964:	2b00      	cmp	r3, #0
 800c966:	f2c0 8150 	blt.w	800cc0a <_dtoa_r+0x6e2>
 800c96a:	f1ba 0f0e 	cmp.w	sl, #14
 800c96e:	f300 814c 	bgt.w	800cc0a <_dtoa_r+0x6e2>
 800c972:	4b6a      	ldr	r3, [pc, #424]	; (800cb1c <_dtoa_r+0x5f4>)
 800c974:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c978:	ed93 7b00 	vldr	d7, [r3]
 800c97c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c97e:	2b00      	cmp	r3, #0
 800c980:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c984:	f280 80d8 	bge.w	800cb38 <_dtoa_r+0x610>
 800c988:	f1b9 0f00 	cmp.w	r9, #0
 800c98c:	f300 80d4 	bgt.w	800cb38 <_dtoa_r+0x610>
 800c990:	f040 825e 	bne.w	800ce50 <_dtoa_r+0x928>
 800c994:	2200      	movs	r2, #0
 800c996:	4b66      	ldr	r3, [pc, #408]	; (800cb30 <_dtoa_r+0x608>)
 800c998:	ec51 0b17 	vmov	r0, r1, d7
 800c99c:	f7f3 fe34 	bl	8000608 <__aeabi_dmul>
 800c9a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c9a4:	f7f4 f8b6 	bl	8000b14 <__aeabi_dcmpge>
 800c9a8:	464f      	mov	r7, r9
 800c9aa:	464e      	mov	r6, r9
 800c9ac:	2800      	cmp	r0, #0
 800c9ae:	f040 8234 	bne.w	800ce1a <_dtoa_r+0x8f2>
 800c9b2:	2331      	movs	r3, #49	; 0x31
 800c9b4:	f10b 0501 	add.w	r5, fp, #1
 800c9b8:	f88b 3000 	strb.w	r3, [fp]
 800c9bc:	f10a 0a01 	add.w	sl, sl, #1
 800c9c0:	e22f      	b.n	800ce22 <_dtoa_r+0x8fa>
 800c9c2:	07f2      	lsls	r2, r6, #31
 800c9c4:	d505      	bpl.n	800c9d2 <_dtoa_r+0x4aa>
 800c9c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9ca:	f7f3 fe1d 	bl	8000608 <__aeabi_dmul>
 800c9ce:	3501      	adds	r5, #1
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	1076      	asrs	r6, r6, #1
 800c9d4:	3708      	adds	r7, #8
 800c9d6:	e772      	b.n	800c8be <_dtoa_r+0x396>
 800c9d8:	2502      	movs	r5, #2
 800c9da:	e774      	b.n	800c8c6 <_dtoa_r+0x39e>
 800c9dc:	f8cd a020 	str.w	sl, [sp, #32]
 800c9e0:	464f      	mov	r7, r9
 800c9e2:	e791      	b.n	800c908 <_dtoa_r+0x3e0>
 800c9e4:	4b4d      	ldr	r3, [pc, #308]	; (800cb1c <_dtoa_r+0x5f4>)
 800c9e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c9ea:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800c9ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d047      	beq.n	800ca84 <_dtoa_r+0x55c>
 800c9f4:	4602      	mov	r2, r0
 800c9f6:	460b      	mov	r3, r1
 800c9f8:	2000      	movs	r0, #0
 800c9fa:	494e      	ldr	r1, [pc, #312]	; (800cb34 <_dtoa_r+0x60c>)
 800c9fc:	f7f3 ff2e 	bl	800085c <__aeabi_ddiv>
 800ca00:	462a      	mov	r2, r5
 800ca02:	4633      	mov	r3, r6
 800ca04:	f7f3 fc48 	bl	8000298 <__aeabi_dsub>
 800ca08:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ca0c:	465d      	mov	r5, fp
 800ca0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca12:	f7f4 f8a9 	bl	8000b68 <__aeabi_d2iz>
 800ca16:	4606      	mov	r6, r0
 800ca18:	f7f3 fd8c 	bl	8000534 <__aeabi_i2d>
 800ca1c:	4602      	mov	r2, r0
 800ca1e:	460b      	mov	r3, r1
 800ca20:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca24:	f7f3 fc38 	bl	8000298 <__aeabi_dsub>
 800ca28:	3630      	adds	r6, #48	; 0x30
 800ca2a:	f805 6b01 	strb.w	r6, [r5], #1
 800ca2e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ca32:	e9cd 0100 	strd	r0, r1, [sp]
 800ca36:	f7f4 f859 	bl	8000aec <__aeabi_dcmplt>
 800ca3a:	2800      	cmp	r0, #0
 800ca3c:	d163      	bne.n	800cb06 <_dtoa_r+0x5de>
 800ca3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca42:	2000      	movs	r0, #0
 800ca44:	4937      	ldr	r1, [pc, #220]	; (800cb24 <_dtoa_r+0x5fc>)
 800ca46:	f7f3 fc27 	bl	8000298 <__aeabi_dsub>
 800ca4a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ca4e:	f7f4 f84d 	bl	8000aec <__aeabi_dcmplt>
 800ca52:	2800      	cmp	r0, #0
 800ca54:	f040 80b7 	bne.w	800cbc6 <_dtoa_r+0x69e>
 800ca58:	eba5 030b 	sub.w	r3, r5, fp
 800ca5c:	429f      	cmp	r7, r3
 800ca5e:	f77f af7c 	ble.w	800c95a <_dtoa_r+0x432>
 800ca62:	2200      	movs	r2, #0
 800ca64:	4b30      	ldr	r3, [pc, #192]	; (800cb28 <_dtoa_r+0x600>)
 800ca66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ca6a:	f7f3 fdcd 	bl	8000608 <__aeabi_dmul>
 800ca6e:	2200      	movs	r2, #0
 800ca70:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ca74:	4b2c      	ldr	r3, [pc, #176]	; (800cb28 <_dtoa_r+0x600>)
 800ca76:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca7a:	f7f3 fdc5 	bl	8000608 <__aeabi_dmul>
 800ca7e:	e9cd 0100 	strd	r0, r1, [sp]
 800ca82:	e7c4      	b.n	800ca0e <_dtoa_r+0x4e6>
 800ca84:	462a      	mov	r2, r5
 800ca86:	4633      	mov	r3, r6
 800ca88:	f7f3 fdbe 	bl	8000608 <__aeabi_dmul>
 800ca8c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ca90:	eb0b 0507 	add.w	r5, fp, r7
 800ca94:	465e      	mov	r6, fp
 800ca96:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca9a:	f7f4 f865 	bl	8000b68 <__aeabi_d2iz>
 800ca9e:	4607      	mov	r7, r0
 800caa0:	f7f3 fd48 	bl	8000534 <__aeabi_i2d>
 800caa4:	3730      	adds	r7, #48	; 0x30
 800caa6:	4602      	mov	r2, r0
 800caa8:	460b      	mov	r3, r1
 800caaa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800caae:	f7f3 fbf3 	bl	8000298 <__aeabi_dsub>
 800cab2:	f806 7b01 	strb.w	r7, [r6], #1
 800cab6:	42ae      	cmp	r6, r5
 800cab8:	e9cd 0100 	strd	r0, r1, [sp]
 800cabc:	f04f 0200 	mov.w	r2, #0
 800cac0:	d126      	bne.n	800cb10 <_dtoa_r+0x5e8>
 800cac2:	4b1c      	ldr	r3, [pc, #112]	; (800cb34 <_dtoa_r+0x60c>)
 800cac4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cac8:	f7f3 fbe8 	bl	800029c <__adddf3>
 800cacc:	4602      	mov	r2, r0
 800cace:	460b      	mov	r3, r1
 800cad0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cad4:	f7f4 f828 	bl	8000b28 <__aeabi_dcmpgt>
 800cad8:	2800      	cmp	r0, #0
 800cada:	d174      	bne.n	800cbc6 <_dtoa_r+0x69e>
 800cadc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cae0:	2000      	movs	r0, #0
 800cae2:	4914      	ldr	r1, [pc, #80]	; (800cb34 <_dtoa_r+0x60c>)
 800cae4:	f7f3 fbd8 	bl	8000298 <__aeabi_dsub>
 800cae8:	4602      	mov	r2, r0
 800caea:	460b      	mov	r3, r1
 800caec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800caf0:	f7f3 fffc 	bl	8000aec <__aeabi_dcmplt>
 800caf4:	2800      	cmp	r0, #0
 800caf6:	f43f af30 	beq.w	800c95a <_dtoa_r+0x432>
 800cafa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cafe:	2b30      	cmp	r3, #48	; 0x30
 800cb00:	f105 32ff 	add.w	r2, r5, #4294967295
 800cb04:	d002      	beq.n	800cb0c <_dtoa_r+0x5e4>
 800cb06:	f8dd a020 	ldr.w	sl, [sp, #32]
 800cb0a:	e04a      	b.n	800cba2 <_dtoa_r+0x67a>
 800cb0c:	4615      	mov	r5, r2
 800cb0e:	e7f4      	b.n	800cafa <_dtoa_r+0x5d2>
 800cb10:	4b05      	ldr	r3, [pc, #20]	; (800cb28 <_dtoa_r+0x600>)
 800cb12:	f7f3 fd79 	bl	8000608 <__aeabi_dmul>
 800cb16:	e9cd 0100 	strd	r0, r1, [sp]
 800cb1a:	e7bc      	b.n	800ca96 <_dtoa_r+0x56e>
 800cb1c:	0801ef08 	.word	0x0801ef08
 800cb20:	0801eee0 	.word	0x0801eee0
 800cb24:	3ff00000 	.word	0x3ff00000
 800cb28:	40240000 	.word	0x40240000
 800cb2c:	401c0000 	.word	0x401c0000
 800cb30:	40140000 	.word	0x40140000
 800cb34:	3fe00000 	.word	0x3fe00000
 800cb38:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cb3c:	465d      	mov	r5, fp
 800cb3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cb42:	4630      	mov	r0, r6
 800cb44:	4639      	mov	r1, r7
 800cb46:	f7f3 fe89 	bl	800085c <__aeabi_ddiv>
 800cb4a:	f7f4 f80d 	bl	8000b68 <__aeabi_d2iz>
 800cb4e:	4680      	mov	r8, r0
 800cb50:	f7f3 fcf0 	bl	8000534 <__aeabi_i2d>
 800cb54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cb58:	f7f3 fd56 	bl	8000608 <__aeabi_dmul>
 800cb5c:	4602      	mov	r2, r0
 800cb5e:	460b      	mov	r3, r1
 800cb60:	4630      	mov	r0, r6
 800cb62:	4639      	mov	r1, r7
 800cb64:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800cb68:	f7f3 fb96 	bl	8000298 <__aeabi_dsub>
 800cb6c:	f805 6b01 	strb.w	r6, [r5], #1
 800cb70:	eba5 060b 	sub.w	r6, r5, fp
 800cb74:	45b1      	cmp	r9, r6
 800cb76:	4602      	mov	r2, r0
 800cb78:	460b      	mov	r3, r1
 800cb7a:	d139      	bne.n	800cbf0 <_dtoa_r+0x6c8>
 800cb7c:	f7f3 fb8e 	bl	800029c <__adddf3>
 800cb80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cb84:	4606      	mov	r6, r0
 800cb86:	460f      	mov	r7, r1
 800cb88:	f7f3 ffce 	bl	8000b28 <__aeabi_dcmpgt>
 800cb8c:	b9c8      	cbnz	r0, 800cbc2 <_dtoa_r+0x69a>
 800cb8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cb92:	4630      	mov	r0, r6
 800cb94:	4639      	mov	r1, r7
 800cb96:	f7f3 ff9f 	bl	8000ad8 <__aeabi_dcmpeq>
 800cb9a:	b110      	cbz	r0, 800cba2 <_dtoa_r+0x67a>
 800cb9c:	f018 0f01 	tst.w	r8, #1
 800cba0:	d10f      	bne.n	800cbc2 <_dtoa_r+0x69a>
 800cba2:	9904      	ldr	r1, [sp, #16]
 800cba4:	4620      	mov	r0, r4
 800cba6:	f000 ffd7 	bl	800db58 <_Bfree>
 800cbaa:	2300      	movs	r3, #0
 800cbac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cbae:	702b      	strb	r3, [r5, #0]
 800cbb0:	f10a 0301 	add.w	r3, sl, #1
 800cbb4:	6013      	str	r3, [r2, #0]
 800cbb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	f000 8241 	beq.w	800d040 <_dtoa_r+0xb18>
 800cbbe:	601d      	str	r5, [r3, #0]
 800cbc0:	e23e      	b.n	800d040 <_dtoa_r+0xb18>
 800cbc2:	f8cd a020 	str.w	sl, [sp, #32]
 800cbc6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cbca:	2a39      	cmp	r2, #57	; 0x39
 800cbcc:	f105 33ff 	add.w	r3, r5, #4294967295
 800cbd0:	d108      	bne.n	800cbe4 <_dtoa_r+0x6bc>
 800cbd2:	459b      	cmp	fp, r3
 800cbd4:	d10a      	bne.n	800cbec <_dtoa_r+0x6c4>
 800cbd6:	9b08      	ldr	r3, [sp, #32]
 800cbd8:	3301      	adds	r3, #1
 800cbda:	9308      	str	r3, [sp, #32]
 800cbdc:	2330      	movs	r3, #48	; 0x30
 800cbde:	f88b 3000 	strb.w	r3, [fp]
 800cbe2:	465b      	mov	r3, fp
 800cbe4:	781a      	ldrb	r2, [r3, #0]
 800cbe6:	3201      	adds	r2, #1
 800cbe8:	701a      	strb	r2, [r3, #0]
 800cbea:	e78c      	b.n	800cb06 <_dtoa_r+0x5de>
 800cbec:	461d      	mov	r5, r3
 800cbee:	e7ea      	b.n	800cbc6 <_dtoa_r+0x69e>
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	4b9b      	ldr	r3, [pc, #620]	; (800ce60 <_dtoa_r+0x938>)
 800cbf4:	f7f3 fd08 	bl	8000608 <__aeabi_dmul>
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	4606      	mov	r6, r0
 800cbfe:	460f      	mov	r7, r1
 800cc00:	f7f3 ff6a 	bl	8000ad8 <__aeabi_dcmpeq>
 800cc04:	2800      	cmp	r0, #0
 800cc06:	d09a      	beq.n	800cb3e <_dtoa_r+0x616>
 800cc08:	e7cb      	b.n	800cba2 <_dtoa_r+0x67a>
 800cc0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc0c:	2a00      	cmp	r2, #0
 800cc0e:	f000 808b 	beq.w	800cd28 <_dtoa_r+0x800>
 800cc12:	9a06      	ldr	r2, [sp, #24]
 800cc14:	2a01      	cmp	r2, #1
 800cc16:	dc6e      	bgt.n	800ccf6 <_dtoa_r+0x7ce>
 800cc18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cc1a:	2a00      	cmp	r2, #0
 800cc1c:	d067      	beq.n	800ccee <_dtoa_r+0x7c6>
 800cc1e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cc22:	9f07      	ldr	r7, [sp, #28]
 800cc24:	9d05      	ldr	r5, [sp, #20]
 800cc26:	9a05      	ldr	r2, [sp, #20]
 800cc28:	2101      	movs	r1, #1
 800cc2a:	441a      	add	r2, r3
 800cc2c:	4620      	mov	r0, r4
 800cc2e:	9205      	str	r2, [sp, #20]
 800cc30:	4498      	add	r8, r3
 800cc32:	f001 f86f 	bl	800dd14 <__i2b>
 800cc36:	4606      	mov	r6, r0
 800cc38:	2d00      	cmp	r5, #0
 800cc3a:	dd0c      	ble.n	800cc56 <_dtoa_r+0x72e>
 800cc3c:	f1b8 0f00 	cmp.w	r8, #0
 800cc40:	dd09      	ble.n	800cc56 <_dtoa_r+0x72e>
 800cc42:	4545      	cmp	r5, r8
 800cc44:	9a05      	ldr	r2, [sp, #20]
 800cc46:	462b      	mov	r3, r5
 800cc48:	bfa8      	it	ge
 800cc4a:	4643      	movge	r3, r8
 800cc4c:	1ad2      	subs	r2, r2, r3
 800cc4e:	9205      	str	r2, [sp, #20]
 800cc50:	1aed      	subs	r5, r5, r3
 800cc52:	eba8 0803 	sub.w	r8, r8, r3
 800cc56:	9b07      	ldr	r3, [sp, #28]
 800cc58:	b1eb      	cbz	r3, 800cc96 <_dtoa_r+0x76e>
 800cc5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d067      	beq.n	800cd30 <_dtoa_r+0x808>
 800cc60:	b18f      	cbz	r7, 800cc86 <_dtoa_r+0x75e>
 800cc62:	4631      	mov	r1, r6
 800cc64:	463a      	mov	r2, r7
 800cc66:	4620      	mov	r0, r4
 800cc68:	f001 f8f4 	bl	800de54 <__pow5mult>
 800cc6c:	9a04      	ldr	r2, [sp, #16]
 800cc6e:	4601      	mov	r1, r0
 800cc70:	4606      	mov	r6, r0
 800cc72:	4620      	mov	r0, r4
 800cc74:	f001 f857 	bl	800dd26 <__multiply>
 800cc78:	9904      	ldr	r1, [sp, #16]
 800cc7a:	9008      	str	r0, [sp, #32]
 800cc7c:	4620      	mov	r0, r4
 800cc7e:	f000 ff6b 	bl	800db58 <_Bfree>
 800cc82:	9b08      	ldr	r3, [sp, #32]
 800cc84:	9304      	str	r3, [sp, #16]
 800cc86:	9b07      	ldr	r3, [sp, #28]
 800cc88:	1bda      	subs	r2, r3, r7
 800cc8a:	d004      	beq.n	800cc96 <_dtoa_r+0x76e>
 800cc8c:	9904      	ldr	r1, [sp, #16]
 800cc8e:	4620      	mov	r0, r4
 800cc90:	f001 f8e0 	bl	800de54 <__pow5mult>
 800cc94:	9004      	str	r0, [sp, #16]
 800cc96:	2101      	movs	r1, #1
 800cc98:	4620      	mov	r0, r4
 800cc9a:	f001 f83b 	bl	800dd14 <__i2b>
 800cc9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cca0:	4607      	mov	r7, r0
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	f000 81d0 	beq.w	800d048 <_dtoa_r+0xb20>
 800cca8:	461a      	mov	r2, r3
 800ccaa:	4601      	mov	r1, r0
 800ccac:	4620      	mov	r0, r4
 800ccae:	f001 f8d1 	bl	800de54 <__pow5mult>
 800ccb2:	9b06      	ldr	r3, [sp, #24]
 800ccb4:	2b01      	cmp	r3, #1
 800ccb6:	4607      	mov	r7, r0
 800ccb8:	dc40      	bgt.n	800cd3c <_dtoa_r+0x814>
 800ccba:	9b00      	ldr	r3, [sp, #0]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d139      	bne.n	800cd34 <_dtoa_r+0x80c>
 800ccc0:	9b01      	ldr	r3, [sp, #4]
 800ccc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d136      	bne.n	800cd38 <_dtoa_r+0x810>
 800ccca:	9b01      	ldr	r3, [sp, #4]
 800cccc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ccd0:	0d1b      	lsrs	r3, r3, #20
 800ccd2:	051b      	lsls	r3, r3, #20
 800ccd4:	b12b      	cbz	r3, 800cce2 <_dtoa_r+0x7ba>
 800ccd6:	9b05      	ldr	r3, [sp, #20]
 800ccd8:	3301      	adds	r3, #1
 800ccda:	9305      	str	r3, [sp, #20]
 800ccdc:	f108 0801 	add.w	r8, r8, #1
 800cce0:	2301      	movs	r3, #1
 800cce2:	9307      	str	r3, [sp, #28]
 800cce4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d12a      	bne.n	800cd40 <_dtoa_r+0x818>
 800ccea:	2001      	movs	r0, #1
 800ccec:	e030      	b.n	800cd50 <_dtoa_r+0x828>
 800ccee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ccf0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ccf4:	e795      	b.n	800cc22 <_dtoa_r+0x6fa>
 800ccf6:	9b07      	ldr	r3, [sp, #28]
 800ccf8:	f109 37ff 	add.w	r7, r9, #4294967295
 800ccfc:	42bb      	cmp	r3, r7
 800ccfe:	bfbf      	itttt	lt
 800cd00:	9b07      	ldrlt	r3, [sp, #28]
 800cd02:	9707      	strlt	r7, [sp, #28]
 800cd04:	1afa      	sublt	r2, r7, r3
 800cd06:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800cd08:	bfbb      	ittet	lt
 800cd0a:	189b      	addlt	r3, r3, r2
 800cd0c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800cd0e:	1bdf      	subge	r7, r3, r7
 800cd10:	2700      	movlt	r7, #0
 800cd12:	f1b9 0f00 	cmp.w	r9, #0
 800cd16:	bfb5      	itete	lt
 800cd18:	9b05      	ldrlt	r3, [sp, #20]
 800cd1a:	9d05      	ldrge	r5, [sp, #20]
 800cd1c:	eba3 0509 	sublt.w	r5, r3, r9
 800cd20:	464b      	movge	r3, r9
 800cd22:	bfb8      	it	lt
 800cd24:	2300      	movlt	r3, #0
 800cd26:	e77e      	b.n	800cc26 <_dtoa_r+0x6fe>
 800cd28:	9f07      	ldr	r7, [sp, #28]
 800cd2a:	9d05      	ldr	r5, [sp, #20]
 800cd2c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800cd2e:	e783      	b.n	800cc38 <_dtoa_r+0x710>
 800cd30:	9a07      	ldr	r2, [sp, #28]
 800cd32:	e7ab      	b.n	800cc8c <_dtoa_r+0x764>
 800cd34:	2300      	movs	r3, #0
 800cd36:	e7d4      	b.n	800cce2 <_dtoa_r+0x7ba>
 800cd38:	9b00      	ldr	r3, [sp, #0]
 800cd3a:	e7d2      	b.n	800cce2 <_dtoa_r+0x7ba>
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	9307      	str	r3, [sp, #28]
 800cd40:	693b      	ldr	r3, [r7, #16]
 800cd42:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800cd46:	6918      	ldr	r0, [r3, #16]
 800cd48:	f000 ff96 	bl	800dc78 <__hi0bits>
 800cd4c:	f1c0 0020 	rsb	r0, r0, #32
 800cd50:	4440      	add	r0, r8
 800cd52:	f010 001f 	ands.w	r0, r0, #31
 800cd56:	d047      	beq.n	800cde8 <_dtoa_r+0x8c0>
 800cd58:	f1c0 0320 	rsb	r3, r0, #32
 800cd5c:	2b04      	cmp	r3, #4
 800cd5e:	dd3b      	ble.n	800cdd8 <_dtoa_r+0x8b0>
 800cd60:	9b05      	ldr	r3, [sp, #20]
 800cd62:	f1c0 001c 	rsb	r0, r0, #28
 800cd66:	4403      	add	r3, r0
 800cd68:	9305      	str	r3, [sp, #20]
 800cd6a:	4405      	add	r5, r0
 800cd6c:	4480      	add	r8, r0
 800cd6e:	9b05      	ldr	r3, [sp, #20]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	dd05      	ble.n	800cd80 <_dtoa_r+0x858>
 800cd74:	461a      	mov	r2, r3
 800cd76:	9904      	ldr	r1, [sp, #16]
 800cd78:	4620      	mov	r0, r4
 800cd7a:	f001 f8b9 	bl	800def0 <__lshift>
 800cd7e:	9004      	str	r0, [sp, #16]
 800cd80:	f1b8 0f00 	cmp.w	r8, #0
 800cd84:	dd05      	ble.n	800cd92 <_dtoa_r+0x86a>
 800cd86:	4639      	mov	r1, r7
 800cd88:	4642      	mov	r2, r8
 800cd8a:	4620      	mov	r0, r4
 800cd8c:	f001 f8b0 	bl	800def0 <__lshift>
 800cd90:	4607      	mov	r7, r0
 800cd92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd94:	b353      	cbz	r3, 800cdec <_dtoa_r+0x8c4>
 800cd96:	4639      	mov	r1, r7
 800cd98:	9804      	ldr	r0, [sp, #16]
 800cd9a:	f001 f8fd 	bl	800df98 <__mcmp>
 800cd9e:	2800      	cmp	r0, #0
 800cda0:	da24      	bge.n	800cdec <_dtoa_r+0x8c4>
 800cda2:	2300      	movs	r3, #0
 800cda4:	220a      	movs	r2, #10
 800cda6:	9904      	ldr	r1, [sp, #16]
 800cda8:	4620      	mov	r0, r4
 800cdaa:	f000 feec 	bl	800db86 <__multadd>
 800cdae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdb0:	9004      	str	r0, [sp, #16]
 800cdb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	f000 814d 	beq.w	800d056 <_dtoa_r+0xb2e>
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	4631      	mov	r1, r6
 800cdc0:	220a      	movs	r2, #10
 800cdc2:	4620      	mov	r0, r4
 800cdc4:	f000 fedf 	bl	800db86 <__multadd>
 800cdc8:	9b02      	ldr	r3, [sp, #8]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	4606      	mov	r6, r0
 800cdce:	dc4f      	bgt.n	800ce70 <_dtoa_r+0x948>
 800cdd0:	9b06      	ldr	r3, [sp, #24]
 800cdd2:	2b02      	cmp	r3, #2
 800cdd4:	dd4c      	ble.n	800ce70 <_dtoa_r+0x948>
 800cdd6:	e011      	b.n	800cdfc <_dtoa_r+0x8d4>
 800cdd8:	d0c9      	beq.n	800cd6e <_dtoa_r+0x846>
 800cdda:	9a05      	ldr	r2, [sp, #20]
 800cddc:	331c      	adds	r3, #28
 800cdde:	441a      	add	r2, r3
 800cde0:	9205      	str	r2, [sp, #20]
 800cde2:	441d      	add	r5, r3
 800cde4:	4498      	add	r8, r3
 800cde6:	e7c2      	b.n	800cd6e <_dtoa_r+0x846>
 800cde8:	4603      	mov	r3, r0
 800cdea:	e7f6      	b.n	800cdda <_dtoa_r+0x8b2>
 800cdec:	f1b9 0f00 	cmp.w	r9, #0
 800cdf0:	dc38      	bgt.n	800ce64 <_dtoa_r+0x93c>
 800cdf2:	9b06      	ldr	r3, [sp, #24]
 800cdf4:	2b02      	cmp	r3, #2
 800cdf6:	dd35      	ble.n	800ce64 <_dtoa_r+0x93c>
 800cdf8:	f8cd 9008 	str.w	r9, [sp, #8]
 800cdfc:	9b02      	ldr	r3, [sp, #8]
 800cdfe:	b963      	cbnz	r3, 800ce1a <_dtoa_r+0x8f2>
 800ce00:	4639      	mov	r1, r7
 800ce02:	2205      	movs	r2, #5
 800ce04:	4620      	mov	r0, r4
 800ce06:	f000 febe 	bl	800db86 <__multadd>
 800ce0a:	4601      	mov	r1, r0
 800ce0c:	4607      	mov	r7, r0
 800ce0e:	9804      	ldr	r0, [sp, #16]
 800ce10:	f001 f8c2 	bl	800df98 <__mcmp>
 800ce14:	2800      	cmp	r0, #0
 800ce16:	f73f adcc 	bgt.w	800c9b2 <_dtoa_r+0x48a>
 800ce1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce1c:	465d      	mov	r5, fp
 800ce1e:	ea6f 0a03 	mvn.w	sl, r3
 800ce22:	f04f 0900 	mov.w	r9, #0
 800ce26:	4639      	mov	r1, r7
 800ce28:	4620      	mov	r0, r4
 800ce2a:	f000 fe95 	bl	800db58 <_Bfree>
 800ce2e:	2e00      	cmp	r6, #0
 800ce30:	f43f aeb7 	beq.w	800cba2 <_dtoa_r+0x67a>
 800ce34:	f1b9 0f00 	cmp.w	r9, #0
 800ce38:	d005      	beq.n	800ce46 <_dtoa_r+0x91e>
 800ce3a:	45b1      	cmp	r9, r6
 800ce3c:	d003      	beq.n	800ce46 <_dtoa_r+0x91e>
 800ce3e:	4649      	mov	r1, r9
 800ce40:	4620      	mov	r0, r4
 800ce42:	f000 fe89 	bl	800db58 <_Bfree>
 800ce46:	4631      	mov	r1, r6
 800ce48:	4620      	mov	r0, r4
 800ce4a:	f000 fe85 	bl	800db58 <_Bfree>
 800ce4e:	e6a8      	b.n	800cba2 <_dtoa_r+0x67a>
 800ce50:	2700      	movs	r7, #0
 800ce52:	463e      	mov	r6, r7
 800ce54:	e7e1      	b.n	800ce1a <_dtoa_r+0x8f2>
 800ce56:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ce5a:	463e      	mov	r6, r7
 800ce5c:	e5a9      	b.n	800c9b2 <_dtoa_r+0x48a>
 800ce5e:	bf00      	nop
 800ce60:	40240000 	.word	0x40240000
 800ce64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce66:	f8cd 9008 	str.w	r9, [sp, #8]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	f000 80fa 	beq.w	800d064 <_dtoa_r+0xb3c>
 800ce70:	2d00      	cmp	r5, #0
 800ce72:	dd05      	ble.n	800ce80 <_dtoa_r+0x958>
 800ce74:	4631      	mov	r1, r6
 800ce76:	462a      	mov	r2, r5
 800ce78:	4620      	mov	r0, r4
 800ce7a:	f001 f839 	bl	800def0 <__lshift>
 800ce7e:	4606      	mov	r6, r0
 800ce80:	9b07      	ldr	r3, [sp, #28]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d04c      	beq.n	800cf20 <_dtoa_r+0x9f8>
 800ce86:	6871      	ldr	r1, [r6, #4]
 800ce88:	4620      	mov	r0, r4
 800ce8a:	f000 fe31 	bl	800daf0 <_Balloc>
 800ce8e:	6932      	ldr	r2, [r6, #16]
 800ce90:	3202      	adds	r2, #2
 800ce92:	4605      	mov	r5, r0
 800ce94:	0092      	lsls	r2, r2, #2
 800ce96:	f106 010c 	add.w	r1, r6, #12
 800ce9a:	300c      	adds	r0, #12
 800ce9c:	f7fd fb6e 	bl	800a57c <memcpy>
 800cea0:	2201      	movs	r2, #1
 800cea2:	4629      	mov	r1, r5
 800cea4:	4620      	mov	r0, r4
 800cea6:	f001 f823 	bl	800def0 <__lshift>
 800ceaa:	9b00      	ldr	r3, [sp, #0]
 800ceac:	f8cd b014 	str.w	fp, [sp, #20]
 800ceb0:	f003 0301 	and.w	r3, r3, #1
 800ceb4:	46b1      	mov	r9, r6
 800ceb6:	9307      	str	r3, [sp, #28]
 800ceb8:	4606      	mov	r6, r0
 800ceba:	4639      	mov	r1, r7
 800cebc:	9804      	ldr	r0, [sp, #16]
 800cebe:	f7ff faa5 	bl	800c40c <quorem>
 800cec2:	4649      	mov	r1, r9
 800cec4:	4605      	mov	r5, r0
 800cec6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ceca:	9804      	ldr	r0, [sp, #16]
 800cecc:	f001 f864 	bl	800df98 <__mcmp>
 800ced0:	4632      	mov	r2, r6
 800ced2:	9000      	str	r0, [sp, #0]
 800ced4:	4639      	mov	r1, r7
 800ced6:	4620      	mov	r0, r4
 800ced8:	f001 f878 	bl	800dfcc <__mdiff>
 800cedc:	68c3      	ldr	r3, [r0, #12]
 800cede:	4602      	mov	r2, r0
 800cee0:	bb03      	cbnz	r3, 800cf24 <_dtoa_r+0x9fc>
 800cee2:	4601      	mov	r1, r0
 800cee4:	9008      	str	r0, [sp, #32]
 800cee6:	9804      	ldr	r0, [sp, #16]
 800cee8:	f001 f856 	bl	800df98 <__mcmp>
 800ceec:	9a08      	ldr	r2, [sp, #32]
 800ceee:	4603      	mov	r3, r0
 800cef0:	4611      	mov	r1, r2
 800cef2:	4620      	mov	r0, r4
 800cef4:	9308      	str	r3, [sp, #32]
 800cef6:	f000 fe2f 	bl	800db58 <_Bfree>
 800cefa:	9b08      	ldr	r3, [sp, #32]
 800cefc:	b9a3      	cbnz	r3, 800cf28 <_dtoa_r+0xa00>
 800cefe:	9a06      	ldr	r2, [sp, #24]
 800cf00:	b992      	cbnz	r2, 800cf28 <_dtoa_r+0xa00>
 800cf02:	9a07      	ldr	r2, [sp, #28]
 800cf04:	b982      	cbnz	r2, 800cf28 <_dtoa_r+0xa00>
 800cf06:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800cf0a:	d029      	beq.n	800cf60 <_dtoa_r+0xa38>
 800cf0c:	9b00      	ldr	r3, [sp, #0]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	dd01      	ble.n	800cf16 <_dtoa_r+0x9ee>
 800cf12:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800cf16:	9b05      	ldr	r3, [sp, #20]
 800cf18:	1c5d      	adds	r5, r3, #1
 800cf1a:	f883 8000 	strb.w	r8, [r3]
 800cf1e:	e782      	b.n	800ce26 <_dtoa_r+0x8fe>
 800cf20:	4630      	mov	r0, r6
 800cf22:	e7c2      	b.n	800ceaa <_dtoa_r+0x982>
 800cf24:	2301      	movs	r3, #1
 800cf26:	e7e3      	b.n	800cef0 <_dtoa_r+0x9c8>
 800cf28:	9a00      	ldr	r2, [sp, #0]
 800cf2a:	2a00      	cmp	r2, #0
 800cf2c:	db04      	blt.n	800cf38 <_dtoa_r+0xa10>
 800cf2e:	d125      	bne.n	800cf7c <_dtoa_r+0xa54>
 800cf30:	9a06      	ldr	r2, [sp, #24]
 800cf32:	bb1a      	cbnz	r2, 800cf7c <_dtoa_r+0xa54>
 800cf34:	9a07      	ldr	r2, [sp, #28]
 800cf36:	bb0a      	cbnz	r2, 800cf7c <_dtoa_r+0xa54>
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	ddec      	ble.n	800cf16 <_dtoa_r+0x9ee>
 800cf3c:	2201      	movs	r2, #1
 800cf3e:	9904      	ldr	r1, [sp, #16]
 800cf40:	4620      	mov	r0, r4
 800cf42:	f000 ffd5 	bl	800def0 <__lshift>
 800cf46:	4639      	mov	r1, r7
 800cf48:	9004      	str	r0, [sp, #16]
 800cf4a:	f001 f825 	bl	800df98 <__mcmp>
 800cf4e:	2800      	cmp	r0, #0
 800cf50:	dc03      	bgt.n	800cf5a <_dtoa_r+0xa32>
 800cf52:	d1e0      	bne.n	800cf16 <_dtoa_r+0x9ee>
 800cf54:	f018 0f01 	tst.w	r8, #1
 800cf58:	d0dd      	beq.n	800cf16 <_dtoa_r+0x9ee>
 800cf5a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800cf5e:	d1d8      	bne.n	800cf12 <_dtoa_r+0x9ea>
 800cf60:	9b05      	ldr	r3, [sp, #20]
 800cf62:	9a05      	ldr	r2, [sp, #20]
 800cf64:	1c5d      	adds	r5, r3, #1
 800cf66:	2339      	movs	r3, #57	; 0x39
 800cf68:	7013      	strb	r3, [r2, #0]
 800cf6a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cf6e:	2b39      	cmp	r3, #57	; 0x39
 800cf70:	f105 32ff 	add.w	r2, r5, #4294967295
 800cf74:	d04f      	beq.n	800d016 <_dtoa_r+0xaee>
 800cf76:	3301      	adds	r3, #1
 800cf78:	7013      	strb	r3, [r2, #0]
 800cf7a:	e754      	b.n	800ce26 <_dtoa_r+0x8fe>
 800cf7c:	9a05      	ldr	r2, [sp, #20]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	f102 0501 	add.w	r5, r2, #1
 800cf84:	dd06      	ble.n	800cf94 <_dtoa_r+0xa6c>
 800cf86:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800cf8a:	d0e9      	beq.n	800cf60 <_dtoa_r+0xa38>
 800cf8c:	f108 0801 	add.w	r8, r8, #1
 800cf90:	9b05      	ldr	r3, [sp, #20]
 800cf92:	e7c2      	b.n	800cf1a <_dtoa_r+0x9f2>
 800cf94:	9a02      	ldr	r2, [sp, #8]
 800cf96:	f805 8c01 	strb.w	r8, [r5, #-1]
 800cf9a:	eba5 030b 	sub.w	r3, r5, fp
 800cf9e:	4293      	cmp	r3, r2
 800cfa0:	d021      	beq.n	800cfe6 <_dtoa_r+0xabe>
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	220a      	movs	r2, #10
 800cfa6:	9904      	ldr	r1, [sp, #16]
 800cfa8:	4620      	mov	r0, r4
 800cfaa:	f000 fdec 	bl	800db86 <__multadd>
 800cfae:	45b1      	cmp	r9, r6
 800cfb0:	9004      	str	r0, [sp, #16]
 800cfb2:	f04f 0300 	mov.w	r3, #0
 800cfb6:	f04f 020a 	mov.w	r2, #10
 800cfba:	4649      	mov	r1, r9
 800cfbc:	4620      	mov	r0, r4
 800cfbe:	d105      	bne.n	800cfcc <_dtoa_r+0xaa4>
 800cfc0:	f000 fde1 	bl	800db86 <__multadd>
 800cfc4:	4681      	mov	r9, r0
 800cfc6:	4606      	mov	r6, r0
 800cfc8:	9505      	str	r5, [sp, #20]
 800cfca:	e776      	b.n	800ceba <_dtoa_r+0x992>
 800cfcc:	f000 fddb 	bl	800db86 <__multadd>
 800cfd0:	4631      	mov	r1, r6
 800cfd2:	4681      	mov	r9, r0
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	220a      	movs	r2, #10
 800cfd8:	4620      	mov	r0, r4
 800cfda:	f000 fdd4 	bl	800db86 <__multadd>
 800cfde:	4606      	mov	r6, r0
 800cfe0:	e7f2      	b.n	800cfc8 <_dtoa_r+0xaa0>
 800cfe2:	f04f 0900 	mov.w	r9, #0
 800cfe6:	2201      	movs	r2, #1
 800cfe8:	9904      	ldr	r1, [sp, #16]
 800cfea:	4620      	mov	r0, r4
 800cfec:	f000 ff80 	bl	800def0 <__lshift>
 800cff0:	4639      	mov	r1, r7
 800cff2:	9004      	str	r0, [sp, #16]
 800cff4:	f000 ffd0 	bl	800df98 <__mcmp>
 800cff8:	2800      	cmp	r0, #0
 800cffa:	dcb6      	bgt.n	800cf6a <_dtoa_r+0xa42>
 800cffc:	d102      	bne.n	800d004 <_dtoa_r+0xadc>
 800cffe:	f018 0f01 	tst.w	r8, #1
 800d002:	d1b2      	bne.n	800cf6a <_dtoa_r+0xa42>
 800d004:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d008:	2b30      	cmp	r3, #48	; 0x30
 800d00a:	f105 32ff 	add.w	r2, r5, #4294967295
 800d00e:	f47f af0a 	bne.w	800ce26 <_dtoa_r+0x8fe>
 800d012:	4615      	mov	r5, r2
 800d014:	e7f6      	b.n	800d004 <_dtoa_r+0xadc>
 800d016:	4593      	cmp	fp, r2
 800d018:	d105      	bne.n	800d026 <_dtoa_r+0xafe>
 800d01a:	2331      	movs	r3, #49	; 0x31
 800d01c:	f10a 0a01 	add.w	sl, sl, #1
 800d020:	f88b 3000 	strb.w	r3, [fp]
 800d024:	e6ff      	b.n	800ce26 <_dtoa_r+0x8fe>
 800d026:	4615      	mov	r5, r2
 800d028:	e79f      	b.n	800cf6a <_dtoa_r+0xa42>
 800d02a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800d090 <_dtoa_r+0xb68>
 800d02e:	e007      	b.n	800d040 <_dtoa_r+0xb18>
 800d030:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d032:	f8df b060 	ldr.w	fp, [pc, #96]	; 800d094 <_dtoa_r+0xb6c>
 800d036:	b11b      	cbz	r3, 800d040 <_dtoa_r+0xb18>
 800d038:	f10b 0308 	add.w	r3, fp, #8
 800d03c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d03e:	6013      	str	r3, [r2, #0]
 800d040:	4658      	mov	r0, fp
 800d042:	b017      	add	sp, #92	; 0x5c
 800d044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d048:	9b06      	ldr	r3, [sp, #24]
 800d04a:	2b01      	cmp	r3, #1
 800d04c:	f77f ae35 	ble.w	800ccba <_dtoa_r+0x792>
 800d050:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d052:	9307      	str	r3, [sp, #28]
 800d054:	e649      	b.n	800ccea <_dtoa_r+0x7c2>
 800d056:	9b02      	ldr	r3, [sp, #8]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	dc03      	bgt.n	800d064 <_dtoa_r+0xb3c>
 800d05c:	9b06      	ldr	r3, [sp, #24]
 800d05e:	2b02      	cmp	r3, #2
 800d060:	f73f aecc 	bgt.w	800cdfc <_dtoa_r+0x8d4>
 800d064:	465d      	mov	r5, fp
 800d066:	4639      	mov	r1, r7
 800d068:	9804      	ldr	r0, [sp, #16]
 800d06a:	f7ff f9cf 	bl	800c40c <quorem>
 800d06e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d072:	f805 8b01 	strb.w	r8, [r5], #1
 800d076:	9a02      	ldr	r2, [sp, #8]
 800d078:	eba5 030b 	sub.w	r3, r5, fp
 800d07c:	429a      	cmp	r2, r3
 800d07e:	ddb0      	ble.n	800cfe2 <_dtoa_r+0xaba>
 800d080:	2300      	movs	r3, #0
 800d082:	220a      	movs	r2, #10
 800d084:	9904      	ldr	r1, [sp, #16]
 800d086:	4620      	mov	r0, r4
 800d088:	f000 fd7d 	bl	800db86 <__multadd>
 800d08c:	9004      	str	r0, [sp, #16]
 800d08e:	e7ea      	b.n	800d066 <_dtoa_r+0xb3e>
 800d090:	0801ede0 	.word	0x0801ede0
 800d094:	0801ee60 	.word	0x0801ee60

0800d098 <__sflush_r>:
 800d098:	898a      	ldrh	r2, [r1, #12]
 800d09a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d09e:	4605      	mov	r5, r0
 800d0a0:	0710      	lsls	r0, r2, #28
 800d0a2:	460c      	mov	r4, r1
 800d0a4:	d458      	bmi.n	800d158 <__sflush_r+0xc0>
 800d0a6:	684b      	ldr	r3, [r1, #4]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	dc05      	bgt.n	800d0b8 <__sflush_r+0x20>
 800d0ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	dc02      	bgt.n	800d0b8 <__sflush_r+0x20>
 800d0b2:	2000      	movs	r0, #0
 800d0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d0ba:	2e00      	cmp	r6, #0
 800d0bc:	d0f9      	beq.n	800d0b2 <__sflush_r+0x1a>
 800d0be:	2300      	movs	r3, #0
 800d0c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d0c4:	682f      	ldr	r7, [r5, #0]
 800d0c6:	6a21      	ldr	r1, [r4, #32]
 800d0c8:	602b      	str	r3, [r5, #0]
 800d0ca:	d032      	beq.n	800d132 <__sflush_r+0x9a>
 800d0cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d0ce:	89a3      	ldrh	r3, [r4, #12]
 800d0d0:	075a      	lsls	r2, r3, #29
 800d0d2:	d505      	bpl.n	800d0e0 <__sflush_r+0x48>
 800d0d4:	6863      	ldr	r3, [r4, #4]
 800d0d6:	1ac0      	subs	r0, r0, r3
 800d0d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d0da:	b10b      	cbz	r3, 800d0e0 <__sflush_r+0x48>
 800d0dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d0de:	1ac0      	subs	r0, r0, r3
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	4602      	mov	r2, r0
 800d0e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d0e6:	6a21      	ldr	r1, [r4, #32]
 800d0e8:	4628      	mov	r0, r5
 800d0ea:	47b0      	blx	r6
 800d0ec:	1c43      	adds	r3, r0, #1
 800d0ee:	89a3      	ldrh	r3, [r4, #12]
 800d0f0:	d106      	bne.n	800d100 <__sflush_r+0x68>
 800d0f2:	6829      	ldr	r1, [r5, #0]
 800d0f4:	291d      	cmp	r1, #29
 800d0f6:	d848      	bhi.n	800d18a <__sflush_r+0xf2>
 800d0f8:	4a29      	ldr	r2, [pc, #164]	; (800d1a0 <__sflush_r+0x108>)
 800d0fa:	40ca      	lsrs	r2, r1
 800d0fc:	07d6      	lsls	r6, r2, #31
 800d0fe:	d544      	bpl.n	800d18a <__sflush_r+0xf2>
 800d100:	2200      	movs	r2, #0
 800d102:	6062      	str	r2, [r4, #4]
 800d104:	04d9      	lsls	r1, r3, #19
 800d106:	6922      	ldr	r2, [r4, #16]
 800d108:	6022      	str	r2, [r4, #0]
 800d10a:	d504      	bpl.n	800d116 <__sflush_r+0x7e>
 800d10c:	1c42      	adds	r2, r0, #1
 800d10e:	d101      	bne.n	800d114 <__sflush_r+0x7c>
 800d110:	682b      	ldr	r3, [r5, #0]
 800d112:	b903      	cbnz	r3, 800d116 <__sflush_r+0x7e>
 800d114:	6560      	str	r0, [r4, #84]	; 0x54
 800d116:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d118:	602f      	str	r7, [r5, #0]
 800d11a:	2900      	cmp	r1, #0
 800d11c:	d0c9      	beq.n	800d0b2 <__sflush_r+0x1a>
 800d11e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d122:	4299      	cmp	r1, r3
 800d124:	d002      	beq.n	800d12c <__sflush_r+0x94>
 800d126:	4628      	mov	r0, r5
 800d128:	f7fd fa54 	bl	800a5d4 <_free_r>
 800d12c:	2000      	movs	r0, #0
 800d12e:	6360      	str	r0, [r4, #52]	; 0x34
 800d130:	e7c0      	b.n	800d0b4 <__sflush_r+0x1c>
 800d132:	2301      	movs	r3, #1
 800d134:	4628      	mov	r0, r5
 800d136:	47b0      	blx	r6
 800d138:	1c41      	adds	r1, r0, #1
 800d13a:	d1c8      	bne.n	800d0ce <__sflush_r+0x36>
 800d13c:	682b      	ldr	r3, [r5, #0]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d0c5      	beq.n	800d0ce <__sflush_r+0x36>
 800d142:	2b1d      	cmp	r3, #29
 800d144:	d001      	beq.n	800d14a <__sflush_r+0xb2>
 800d146:	2b16      	cmp	r3, #22
 800d148:	d101      	bne.n	800d14e <__sflush_r+0xb6>
 800d14a:	602f      	str	r7, [r5, #0]
 800d14c:	e7b1      	b.n	800d0b2 <__sflush_r+0x1a>
 800d14e:	89a3      	ldrh	r3, [r4, #12]
 800d150:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d154:	81a3      	strh	r3, [r4, #12]
 800d156:	e7ad      	b.n	800d0b4 <__sflush_r+0x1c>
 800d158:	690f      	ldr	r7, [r1, #16]
 800d15a:	2f00      	cmp	r7, #0
 800d15c:	d0a9      	beq.n	800d0b2 <__sflush_r+0x1a>
 800d15e:	0793      	lsls	r3, r2, #30
 800d160:	680e      	ldr	r6, [r1, #0]
 800d162:	bf08      	it	eq
 800d164:	694b      	ldreq	r3, [r1, #20]
 800d166:	600f      	str	r7, [r1, #0]
 800d168:	bf18      	it	ne
 800d16a:	2300      	movne	r3, #0
 800d16c:	eba6 0807 	sub.w	r8, r6, r7
 800d170:	608b      	str	r3, [r1, #8]
 800d172:	f1b8 0f00 	cmp.w	r8, #0
 800d176:	dd9c      	ble.n	800d0b2 <__sflush_r+0x1a>
 800d178:	4643      	mov	r3, r8
 800d17a:	463a      	mov	r2, r7
 800d17c:	6a21      	ldr	r1, [r4, #32]
 800d17e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d180:	4628      	mov	r0, r5
 800d182:	47b0      	blx	r6
 800d184:	2800      	cmp	r0, #0
 800d186:	dc06      	bgt.n	800d196 <__sflush_r+0xfe>
 800d188:	89a3      	ldrh	r3, [r4, #12]
 800d18a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d18e:	81a3      	strh	r3, [r4, #12]
 800d190:	f04f 30ff 	mov.w	r0, #4294967295
 800d194:	e78e      	b.n	800d0b4 <__sflush_r+0x1c>
 800d196:	4407      	add	r7, r0
 800d198:	eba8 0800 	sub.w	r8, r8, r0
 800d19c:	e7e9      	b.n	800d172 <__sflush_r+0xda>
 800d19e:	bf00      	nop
 800d1a0:	20400001 	.word	0x20400001

0800d1a4 <_fflush_r>:
 800d1a4:	b538      	push	{r3, r4, r5, lr}
 800d1a6:	690b      	ldr	r3, [r1, #16]
 800d1a8:	4605      	mov	r5, r0
 800d1aa:	460c      	mov	r4, r1
 800d1ac:	b1db      	cbz	r3, 800d1e6 <_fflush_r+0x42>
 800d1ae:	b118      	cbz	r0, 800d1b8 <_fflush_r+0x14>
 800d1b0:	6983      	ldr	r3, [r0, #24]
 800d1b2:	b90b      	cbnz	r3, 800d1b8 <_fflush_r+0x14>
 800d1b4:	f000 f860 	bl	800d278 <__sinit>
 800d1b8:	4b0c      	ldr	r3, [pc, #48]	; (800d1ec <_fflush_r+0x48>)
 800d1ba:	429c      	cmp	r4, r3
 800d1bc:	d109      	bne.n	800d1d2 <_fflush_r+0x2e>
 800d1be:	686c      	ldr	r4, [r5, #4]
 800d1c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1c4:	b17b      	cbz	r3, 800d1e6 <_fflush_r+0x42>
 800d1c6:	4621      	mov	r1, r4
 800d1c8:	4628      	mov	r0, r5
 800d1ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1ce:	f7ff bf63 	b.w	800d098 <__sflush_r>
 800d1d2:	4b07      	ldr	r3, [pc, #28]	; (800d1f0 <_fflush_r+0x4c>)
 800d1d4:	429c      	cmp	r4, r3
 800d1d6:	d101      	bne.n	800d1dc <_fflush_r+0x38>
 800d1d8:	68ac      	ldr	r4, [r5, #8]
 800d1da:	e7f1      	b.n	800d1c0 <_fflush_r+0x1c>
 800d1dc:	4b05      	ldr	r3, [pc, #20]	; (800d1f4 <_fflush_r+0x50>)
 800d1de:	429c      	cmp	r4, r3
 800d1e0:	bf08      	it	eq
 800d1e2:	68ec      	ldreq	r4, [r5, #12]
 800d1e4:	e7ec      	b.n	800d1c0 <_fflush_r+0x1c>
 800d1e6:	2000      	movs	r0, #0
 800d1e8:	bd38      	pop	{r3, r4, r5, pc}
 800d1ea:	bf00      	nop
 800d1ec:	0801ee90 	.word	0x0801ee90
 800d1f0:	0801eeb0 	.word	0x0801eeb0
 800d1f4:	0801ee70 	.word	0x0801ee70

0800d1f8 <std>:
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	b510      	push	{r4, lr}
 800d1fc:	4604      	mov	r4, r0
 800d1fe:	e9c0 3300 	strd	r3, r3, [r0]
 800d202:	6083      	str	r3, [r0, #8]
 800d204:	8181      	strh	r1, [r0, #12]
 800d206:	6643      	str	r3, [r0, #100]	; 0x64
 800d208:	81c2      	strh	r2, [r0, #14]
 800d20a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d20e:	6183      	str	r3, [r0, #24]
 800d210:	4619      	mov	r1, r3
 800d212:	2208      	movs	r2, #8
 800d214:	305c      	adds	r0, #92	; 0x5c
 800d216:	f7fd f9d5 	bl	800a5c4 <memset>
 800d21a:	4b05      	ldr	r3, [pc, #20]	; (800d230 <std+0x38>)
 800d21c:	6263      	str	r3, [r4, #36]	; 0x24
 800d21e:	4b05      	ldr	r3, [pc, #20]	; (800d234 <std+0x3c>)
 800d220:	62a3      	str	r3, [r4, #40]	; 0x28
 800d222:	4b05      	ldr	r3, [pc, #20]	; (800d238 <std+0x40>)
 800d224:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d226:	4b05      	ldr	r3, [pc, #20]	; (800d23c <std+0x44>)
 800d228:	6224      	str	r4, [r4, #32]
 800d22a:	6323      	str	r3, [r4, #48]	; 0x30
 800d22c:	bd10      	pop	{r4, pc}
 800d22e:	bf00      	nop
 800d230:	0800e89d 	.word	0x0800e89d
 800d234:	0800e8bf 	.word	0x0800e8bf
 800d238:	0800e8f7 	.word	0x0800e8f7
 800d23c:	0800e91b 	.word	0x0800e91b

0800d240 <_cleanup_r>:
 800d240:	4901      	ldr	r1, [pc, #4]	; (800d248 <_cleanup_r+0x8>)
 800d242:	f000 b885 	b.w	800d350 <_fwalk_reent>
 800d246:	bf00      	nop
 800d248:	0800d1a5 	.word	0x0800d1a5

0800d24c <__sfmoreglue>:
 800d24c:	b570      	push	{r4, r5, r6, lr}
 800d24e:	1e4a      	subs	r2, r1, #1
 800d250:	2568      	movs	r5, #104	; 0x68
 800d252:	4355      	muls	r5, r2
 800d254:	460e      	mov	r6, r1
 800d256:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d25a:	f7fd fa09 	bl	800a670 <_malloc_r>
 800d25e:	4604      	mov	r4, r0
 800d260:	b140      	cbz	r0, 800d274 <__sfmoreglue+0x28>
 800d262:	2100      	movs	r1, #0
 800d264:	e9c0 1600 	strd	r1, r6, [r0]
 800d268:	300c      	adds	r0, #12
 800d26a:	60a0      	str	r0, [r4, #8]
 800d26c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d270:	f7fd f9a8 	bl	800a5c4 <memset>
 800d274:	4620      	mov	r0, r4
 800d276:	bd70      	pop	{r4, r5, r6, pc}

0800d278 <__sinit>:
 800d278:	6983      	ldr	r3, [r0, #24]
 800d27a:	b510      	push	{r4, lr}
 800d27c:	4604      	mov	r4, r0
 800d27e:	bb33      	cbnz	r3, 800d2ce <__sinit+0x56>
 800d280:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800d284:	6503      	str	r3, [r0, #80]	; 0x50
 800d286:	4b12      	ldr	r3, [pc, #72]	; (800d2d0 <__sinit+0x58>)
 800d288:	4a12      	ldr	r2, [pc, #72]	; (800d2d4 <__sinit+0x5c>)
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	6282      	str	r2, [r0, #40]	; 0x28
 800d28e:	4298      	cmp	r0, r3
 800d290:	bf04      	itt	eq
 800d292:	2301      	moveq	r3, #1
 800d294:	6183      	streq	r3, [r0, #24]
 800d296:	f000 f81f 	bl	800d2d8 <__sfp>
 800d29a:	6060      	str	r0, [r4, #4]
 800d29c:	4620      	mov	r0, r4
 800d29e:	f000 f81b 	bl	800d2d8 <__sfp>
 800d2a2:	60a0      	str	r0, [r4, #8]
 800d2a4:	4620      	mov	r0, r4
 800d2a6:	f000 f817 	bl	800d2d8 <__sfp>
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	60e0      	str	r0, [r4, #12]
 800d2ae:	2104      	movs	r1, #4
 800d2b0:	6860      	ldr	r0, [r4, #4]
 800d2b2:	f7ff ffa1 	bl	800d1f8 <std>
 800d2b6:	2201      	movs	r2, #1
 800d2b8:	2109      	movs	r1, #9
 800d2ba:	68a0      	ldr	r0, [r4, #8]
 800d2bc:	f7ff ff9c 	bl	800d1f8 <std>
 800d2c0:	2202      	movs	r2, #2
 800d2c2:	2112      	movs	r1, #18
 800d2c4:	68e0      	ldr	r0, [r4, #12]
 800d2c6:	f7ff ff97 	bl	800d1f8 <std>
 800d2ca:	2301      	movs	r3, #1
 800d2cc:	61a3      	str	r3, [r4, #24]
 800d2ce:	bd10      	pop	{r4, pc}
 800d2d0:	0801edcc 	.word	0x0801edcc
 800d2d4:	0800d241 	.word	0x0800d241

0800d2d8 <__sfp>:
 800d2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2da:	4b1b      	ldr	r3, [pc, #108]	; (800d348 <__sfp+0x70>)
 800d2dc:	681e      	ldr	r6, [r3, #0]
 800d2de:	69b3      	ldr	r3, [r6, #24]
 800d2e0:	4607      	mov	r7, r0
 800d2e2:	b913      	cbnz	r3, 800d2ea <__sfp+0x12>
 800d2e4:	4630      	mov	r0, r6
 800d2e6:	f7ff ffc7 	bl	800d278 <__sinit>
 800d2ea:	3648      	adds	r6, #72	; 0x48
 800d2ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d2f0:	3b01      	subs	r3, #1
 800d2f2:	d503      	bpl.n	800d2fc <__sfp+0x24>
 800d2f4:	6833      	ldr	r3, [r6, #0]
 800d2f6:	b133      	cbz	r3, 800d306 <__sfp+0x2e>
 800d2f8:	6836      	ldr	r6, [r6, #0]
 800d2fa:	e7f7      	b.n	800d2ec <__sfp+0x14>
 800d2fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d300:	b16d      	cbz	r5, 800d31e <__sfp+0x46>
 800d302:	3468      	adds	r4, #104	; 0x68
 800d304:	e7f4      	b.n	800d2f0 <__sfp+0x18>
 800d306:	2104      	movs	r1, #4
 800d308:	4638      	mov	r0, r7
 800d30a:	f7ff ff9f 	bl	800d24c <__sfmoreglue>
 800d30e:	6030      	str	r0, [r6, #0]
 800d310:	2800      	cmp	r0, #0
 800d312:	d1f1      	bne.n	800d2f8 <__sfp+0x20>
 800d314:	230c      	movs	r3, #12
 800d316:	603b      	str	r3, [r7, #0]
 800d318:	4604      	mov	r4, r0
 800d31a:	4620      	mov	r0, r4
 800d31c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d31e:	4b0b      	ldr	r3, [pc, #44]	; (800d34c <__sfp+0x74>)
 800d320:	6665      	str	r5, [r4, #100]	; 0x64
 800d322:	e9c4 5500 	strd	r5, r5, [r4]
 800d326:	60a5      	str	r5, [r4, #8]
 800d328:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d32c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800d330:	2208      	movs	r2, #8
 800d332:	4629      	mov	r1, r5
 800d334:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d338:	f7fd f944 	bl	800a5c4 <memset>
 800d33c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d340:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d344:	e7e9      	b.n	800d31a <__sfp+0x42>
 800d346:	bf00      	nop
 800d348:	0801edcc 	.word	0x0801edcc
 800d34c:	ffff0001 	.word	0xffff0001

0800d350 <_fwalk_reent>:
 800d350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d354:	4680      	mov	r8, r0
 800d356:	4689      	mov	r9, r1
 800d358:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d35c:	2600      	movs	r6, #0
 800d35e:	b914      	cbnz	r4, 800d366 <_fwalk_reent+0x16>
 800d360:	4630      	mov	r0, r6
 800d362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d366:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800d36a:	3f01      	subs	r7, #1
 800d36c:	d501      	bpl.n	800d372 <_fwalk_reent+0x22>
 800d36e:	6824      	ldr	r4, [r4, #0]
 800d370:	e7f5      	b.n	800d35e <_fwalk_reent+0xe>
 800d372:	89ab      	ldrh	r3, [r5, #12]
 800d374:	2b01      	cmp	r3, #1
 800d376:	d907      	bls.n	800d388 <_fwalk_reent+0x38>
 800d378:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d37c:	3301      	adds	r3, #1
 800d37e:	d003      	beq.n	800d388 <_fwalk_reent+0x38>
 800d380:	4629      	mov	r1, r5
 800d382:	4640      	mov	r0, r8
 800d384:	47c8      	blx	r9
 800d386:	4306      	orrs	r6, r0
 800d388:	3568      	adds	r5, #104	; 0x68
 800d38a:	e7ee      	b.n	800d36a <_fwalk_reent+0x1a>

0800d38c <rshift>:
 800d38c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d38e:	6906      	ldr	r6, [r0, #16]
 800d390:	114b      	asrs	r3, r1, #5
 800d392:	429e      	cmp	r6, r3
 800d394:	f100 0414 	add.w	r4, r0, #20
 800d398:	dd30      	ble.n	800d3fc <rshift+0x70>
 800d39a:	f011 011f 	ands.w	r1, r1, #31
 800d39e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800d3a2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800d3a6:	d108      	bne.n	800d3ba <rshift+0x2e>
 800d3a8:	4621      	mov	r1, r4
 800d3aa:	42b2      	cmp	r2, r6
 800d3ac:	460b      	mov	r3, r1
 800d3ae:	d211      	bcs.n	800d3d4 <rshift+0x48>
 800d3b0:	f852 3b04 	ldr.w	r3, [r2], #4
 800d3b4:	f841 3b04 	str.w	r3, [r1], #4
 800d3b8:	e7f7      	b.n	800d3aa <rshift+0x1e>
 800d3ba:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800d3be:	f1c1 0c20 	rsb	ip, r1, #32
 800d3c2:	40cd      	lsrs	r5, r1
 800d3c4:	3204      	adds	r2, #4
 800d3c6:	4623      	mov	r3, r4
 800d3c8:	42b2      	cmp	r2, r6
 800d3ca:	4617      	mov	r7, r2
 800d3cc:	d30c      	bcc.n	800d3e8 <rshift+0x5c>
 800d3ce:	601d      	str	r5, [r3, #0]
 800d3d0:	b105      	cbz	r5, 800d3d4 <rshift+0x48>
 800d3d2:	3304      	adds	r3, #4
 800d3d4:	1b1a      	subs	r2, r3, r4
 800d3d6:	42a3      	cmp	r3, r4
 800d3d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d3dc:	bf08      	it	eq
 800d3de:	2300      	moveq	r3, #0
 800d3e0:	6102      	str	r2, [r0, #16]
 800d3e2:	bf08      	it	eq
 800d3e4:	6143      	streq	r3, [r0, #20]
 800d3e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3e8:	683f      	ldr	r7, [r7, #0]
 800d3ea:	fa07 f70c 	lsl.w	r7, r7, ip
 800d3ee:	433d      	orrs	r5, r7
 800d3f0:	f843 5b04 	str.w	r5, [r3], #4
 800d3f4:	f852 5b04 	ldr.w	r5, [r2], #4
 800d3f8:	40cd      	lsrs	r5, r1
 800d3fa:	e7e5      	b.n	800d3c8 <rshift+0x3c>
 800d3fc:	4623      	mov	r3, r4
 800d3fe:	e7e9      	b.n	800d3d4 <rshift+0x48>

0800d400 <__hexdig_fun>:
 800d400:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d404:	2b09      	cmp	r3, #9
 800d406:	d802      	bhi.n	800d40e <__hexdig_fun+0xe>
 800d408:	3820      	subs	r0, #32
 800d40a:	b2c0      	uxtb	r0, r0
 800d40c:	4770      	bx	lr
 800d40e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d412:	2b05      	cmp	r3, #5
 800d414:	d801      	bhi.n	800d41a <__hexdig_fun+0x1a>
 800d416:	3847      	subs	r0, #71	; 0x47
 800d418:	e7f7      	b.n	800d40a <__hexdig_fun+0xa>
 800d41a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d41e:	2b05      	cmp	r3, #5
 800d420:	d801      	bhi.n	800d426 <__hexdig_fun+0x26>
 800d422:	3827      	subs	r0, #39	; 0x27
 800d424:	e7f1      	b.n	800d40a <__hexdig_fun+0xa>
 800d426:	2000      	movs	r0, #0
 800d428:	4770      	bx	lr

0800d42a <__gethex>:
 800d42a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d42e:	b08b      	sub	sp, #44	; 0x2c
 800d430:	468a      	mov	sl, r1
 800d432:	9002      	str	r0, [sp, #8]
 800d434:	9816      	ldr	r0, [sp, #88]	; 0x58
 800d436:	9306      	str	r3, [sp, #24]
 800d438:	4690      	mov	r8, r2
 800d43a:	f000 fad0 	bl	800d9de <__localeconv_l>
 800d43e:	6803      	ldr	r3, [r0, #0]
 800d440:	9303      	str	r3, [sp, #12]
 800d442:	4618      	mov	r0, r3
 800d444:	f7f2 fecc 	bl	80001e0 <strlen>
 800d448:	9b03      	ldr	r3, [sp, #12]
 800d44a:	9001      	str	r0, [sp, #4]
 800d44c:	4403      	add	r3, r0
 800d44e:	f04f 0b00 	mov.w	fp, #0
 800d452:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d456:	9307      	str	r3, [sp, #28]
 800d458:	f8da 3000 	ldr.w	r3, [sl]
 800d45c:	3302      	adds	r3, #2
 800d45e:	461f      	mov	r7, r3
 800d460:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d464:	2830      	cmp	r0, #48	; 0x30
 800d466:	d06c      	beq.n	800d542 <__gethex+0x118>
 800d468:	f7ff ffca 	bl	800d400 <__hexdig_fun>
 800d46c:	4604      	mov	r4, r0
 800d46e:	2800      	cmp	r0, #0
 800d470:	d16a      	bne.n	800d548 <__gethex+0x11e>
 800d472:	9a01      	ldr	r2, [sp, #4]
 800d474:	9903      	ldr	r1, [sp, #12]
 800d476:	4638      	mov	r0, r7
 800d478:	f001 fa53 	bl	800e922 <strncmp>
 800d47c:	2800      	cmp	r0, #0
 800d47e:	d166      	bne.n	800d54e <__gethex+0x124>
 800d480:	9b01      	ldr	r3, [sp, #4]
 800d482:	5cf8      	ldrb	r0, [r7, r3]
 800d484:	18fe      	adds	r6, r7, r3
 800d486:	f7ff ffbb 	bl	800d400 <__hexdig_fun>
 800d48a:	2800      	cmp	r0, #0
 800d48c:	d062      	beq.n	800d554 <__gethex+0x12a>
 800d48e:	4633      	mov	r3, r6
 800d490:	7818      	ldrb	r0, [r3, #0]
 800d492:	2830      	cmp	r0, #48	; 0x30
 800d494:	461f      	mov	r7, r3
 800d496:	f103 0301 	add.w	r3, r3, #1
 800d49a:	d0f9      	beq.n	800d490 <__gethex+0x66>
 800d49c:	f7ff ffb0 	bl	800d400 <__hexdig_fun>
 800d4a0:	fab0 f580 	clz	r5, r0
 800d4a4:	096d      	lsrs	r5, r5, #5
 800d4a6:	4634      	mov	r4, r6
 800d4a8:	f04f 0b01 	mov.w	fp, #1
 800d4ac:	463a      	mov	r2, r7
 800d4ae:	4616      	mov	r6, r2
 800d4b0:	3201      	adds	r2, #1
 800d4b2:	7830      	ldrb	r0, [r6, #0]
 800d4b4:	f7ff ffa4 	bl	800d400 <__hexdig_fun>
 800d4b8:	2800      	cmp	r0, #0
 800d4ba:	d1f8      	bne.n	800d4ae <__gethex+0x84>
 800d4bc:	9a01      	ldr	r2, [sp, #4]
 800d4be:	9903      	ldr	r1, [sp, #12]
 800d4c0:	4630      	mov	r0, r6
 800d4c2:	f001 fa2e 	bl	800e922 <strncmp>
 800d4c6:	b950      	cbnz	r0, 800d4de <__gethex+0xb4>
 800d4c8:	b954      	cbnz	r4, 800d4e0 <__gethex+0xb6>
 800d4ca:	9b01      	ldr	r3, [sp, #4]
 800d4cc:	18f4      	adds	r4, r6, r3
 800d4ce:	4622      	mov	r2, r4
 800d4d0:	4616      	mov	r6, r2
 800d4d2:	3201      	adds	r2, #1
 800d4d4:	7830      	ldrb	r0, [r6, #0]
 800d4d6:	f7ff ff93 	bl	800d400 <__hexdig_fun>
 800d4da:	2800      	cmp	r0, #0
 800d4dc:	d1f8      	bne.n	800d4d0 <__gethex+0xa6>
 800d4de:	b10c      	cbz	r4, 800d4e4 <__gethex+0xba>
 800d4e0:	1ba4      	subs	r4, r4, r6
 800d4e2:	00a4      	lsls	r4, r4, #2
 800d4e4:	7833      	ldrb	r3, [r6, #0]
 800d4e6:	2b50      	cmp	r3, #80	; 0x50
 800d4e8:	d001      	beq.n	800d4ee <__gethex+0xc4>
 800d4ea:	2b70      	cmp	r3, #112	; 0x70
 800d4ec:	d140      	bne.n	800d570 <__gethex+0x146>
 800d4ee:	7873      	ldrb	r3, [r6, #1]
 800d4f0:	2b2b      	cmp	r3, #43	; 0x2b
 800d4f2:	d031      	beq.n	800d558 <__gethex+0x12e>
 800d4f4:	2b2d      	cmp	r3, #45	; 0x2d
 800d4f6:	d033      	beq.n	800d560 <__gethex+0x136>
 800d4f8:	1c71      	adds	r1, r6, #1
 800d4fa:	f04f 0900 	mov.w	r9, #0
 800d4fe:	7808      	ldrb	r0, [r1, #0]
 800d500:	f7ff ff7e 	bl	800d400 <__hexdig_fun>
 800d504:	1e43      	subs	r3, r0, #1
 800d506:	b2db      	uxtb	r3, r3
 800d508:	2b18      	cmp	r3, #24
 800d50a:	d831      	bhi.n	800d570 <__gethex+0x146>
 800d50c:	f1a0 0210 	sub.w	r2, r0, #16
 800d510:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d514:	f7ff ff74 	bl	800d400 <__hexdig_fun>
 800d518:	1e43      	subs	r3, r0, #1
 800d51a:	b2db      	uxtb	r3, r3
 800d51c:	2b18      	cmp	r3, #24
 800d51e:	d922      	bls.n	800d566 <__gethex+0x13c>
 800d520:	f1b9 0f00 	cmp.w	r9, #0
 800d524:	d000      	beq.n	800d528 <__gethex+0xfe>
 800d526:	4252      	negs	r2, r2
 800d528:	4414      	add	r4, r2
 800d52a:	f8ca 1000 	str.w	r1, [sl]
 800d52e:	b30d      	cbz	r5, 800d574 <__gethex+0x14a>
 800d530:	f1bb 0f00 	cmp.w	fp, #0
 800d534:	bf0c      	ite	eq
 800d536:	2706      	moveq	r7, #6
 800d538:	2700      	movne	r7, #0
 800d53a:	4638      	mov	r0, r7
 800d53c:	b00b      	add	sp, #44	; 0x2c
 800d53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d542:	f10b 0b01 	add.w	fp, fp, #1
 800d546:	e78a      	b.n	800d45e <__gethex+0x34>
 800d548:	2500      	movs	r5, #0
 800d54a:	462c      	mov	r4, r5
 800d54c:	e7ae      	b.n	800d4ac <__gethex+0x82>
 800d54e:	463e      	mov	r6, r7
 800d550:	2501      	movs	r5, #1
 800d552:	e7c7      	b.n	800d4e4 <__gethex+0xba>
 800d554:	4604      	mov	r4, r0
 800d556:	e7fb      	b.n	800d550 <__gethex+0x126>
 800d558:	f04f 0900 	mov.w	r9, #0
 800d55c:	1cb1      	adds	r1, r6, #2
 800d55e:	e7ce      	b.n	800d4fe <__gethex+0xd4>
 800d560:	f04f 0901 	mov.w	r9, #1
 800d564:	e7fa      	b.n	800d55c <__gethex+0x132>
 800d566:	230a      	movs	r3, #10
 800d568:	fb03 0202 	mla	r2, r3, r2, r0
 800d56c:	3a10      	subs	r2, #16
 800d56e:	e7cf      	b.n	800d510 <__gethex+0xe6>
 800d570:	4631      	mov	r1, r6
 800d572:	e7da      	b.n	800d52a <__gethex+0x100>
 800d574:	1bf3      	subs	r3, r6, r7
 800d576:	3b01      	subs	r3, #1
 800d578:	4629      	mov	r1, r5
 800d57a:	2b07      	cmp	r3, #7
 800d57c:	dc49      	bgt.n	800d612 <__gethex+0x1e8>
 800d57e:	9802      	ldr	r0, [sp, #8]
 800d580:	f000 fab6 	bl	800daf0 <_Balloc>
 800d584:	9b01      	ldr	r3, [sp, #4]
 800d586:	f100 0914 	add.w	r9, r0, #20
 800d58a:	f04f 0b00 	mov.w	fp, #0
 800d58e:	f1c3 0301 	rsb	r3, r3, #1
 800d592:	4605      	mov	r5, r0
 800d594:	f8cd 9010 	str.w	r9, [sp, #16]
 800d598:	46da      	mov	sl, fp
 800d59a:	9308      	str	r3, [sp, #32]
 800d59c:	42b7      	cmp	r7, r6
 800d59e:	d33b      	bcc.n	800d618 <__gethex+0x1ee>
 800d5a0:	9804      	ldr	r0, [sp, #16]
 800d5a2:	f840 ab04 	str.w	sl, [r0], #4
 800d5a6:	eba0 0009 	sub.w	r0, r0, r9
 800d5aa:	1080      	asrs	r0, r0, #2
 800d5ac:	6128      	str	r0, [r5, #16]
 800d5ae:	0147      	lsls	r7, r0, #5
 800d5b0:	4650      	mov	r0, sl
 800d5b2:	f000 fb61 	bl	800dc78 <__hi0bits>
 800d5b6:	f8d8 6000 	ldr.w	r6, [r8]
 800d5ba:	1a3f      	subs	r7, r7, r0
 800d5bc:	42b7      	cmp	r7, r6
 800d5be:	dd64      	ble.n	800d68a <__gethex+0x260>
 800d5c0:	1bbf      	subs	r7, r7, r6
 800d5c2:	4639      	mov	r1, r7
 800d5c4:	4628      	mov	r0, r5
 800d5c6:	f000 fe71 	bl	800e2ac <__any_on>
 800d5ca:	4682      	mov	sl, r0
 800d5cc:	b178      	cbz	r0, 800d5ee <__gethex+0x1c4>
 800d5ce:	1e7b      	subs	r3, r7, #1
 800d5d0:	1159      	asrs	r1, r3, #5
 800d5d2:	f003 021f 	and.w	r2, r3, #31
 800d5d6:	f04f 0a01 	mov.w	sl, #1
 800d5da:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d5de:	fa0a f202 	lsl.w	r2, sl, r2
 800d5e2:	420a      	tst	r2, r1
 800d5e4:	d003      	beq.n	800d5ee <__gethex+0x1c4>
 800d5e6:	4553      	cmp	r3, sl
 800d5e8:	dc46      	bgt.n	800d678 <__gethex+0x24e>
 800d5ea:	f04f 0a02 	mov.w	sl, #2
 800d5ee:	4639      	mov	r1, r7
 800d5f0:	4628      	mov	r0, r5
 800d5f2:	f7ff fecb 	bl	800d38c <rshift>
 800d5f6:	443c      	add	r4, r7
 800d5f8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d5fc:	42a3      	cmp	r3, r4
 800d5fe:	da52      	bge.n	800d6a6 <__gethex+0x27c>
 800d600:	4629      	mov	r1, r5
 800d602:	9802      	ldr	r0, [sp, #8]
 800d604:	f000 faa8 	bl	800db58 <_Bfree>
 800d608:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d60a:	2300      	movs	r3, #0
 800d60c:	6013      	str	r3, [r2, #0]
 800d60e:	27a3      	movs	r7, #163	; 0xa3
 800d610:	e793      	b.n	800d53a <__gethex+0x110>
 800d612:	3101      	adds	r1, #1
 800d614:	105b      	asrs	r3, r3, #1
 800d616:	e7b0      	b.n	800d57a <__gethex+0x150>
 800d618:	1e73      	subs	r3, r6, #1
 800d61a:	9305      	str	r3, [sp, #20]
 800d61c:	9a07      	ldr	r2, [sp, #28]
 800d61e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d622:	4293      	cmp	r3, r2
 800d624:	d018      	beq.n	800d658 <__gethex+0x22e>
 800d626:	f1bb 0f20 	cmp.w	fp, #32
 800d62a:	d107      	bne.n	800d63c <__gethex+0x212>
 800d62c:	9b04      	ldr	r3, [sp, #16]
 800d62e:	f8c3 a000 	str.w	sl, [r3]
 800d632:	3304      	adds	r3, #4
 800d634:	f04f 0a00 	mov.w	sl, #0
 800d638:	9304      	str	r3, [sp, #16]
 800d63a:	46d3      	mov	fp, sl
 800d63c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d640:	f7ff fede 	bl	800d400 <__hexdig_fun>
 800d644:	f000 000f 	and.w	r0, r0, #15
 800d648:	fa00 f00b 	lsl.w	r0, r0, fp
 800d64c:	ea4a 0a00 	orr.w	sl, sl, r0
 800d650:	f10b 0b04 	add.w	fp, fp, #4
 800d654:	9b05      	ldr	r3, [sp, #20]
 800d656:	e00d      	b.n	800d674 <__gethex+0x24a>
 800d658:	9b05      	ldr	r3, [sp, #20]
 800d65a:	9a08      	ldr	r2, [sp, #32]
 800d65c:	4413      	add	r3, r2
 800d65e:	42bb      	cmp	r3, r7
 800d660:	d3e1      	bcc.n	800d626 <__gethex+0x1fc>
 800d662:	4618      	mov	r0, r3
 800d664:	9a01      	ldr	r2, [sp, #4]
 800d666:	9903      	ldr	r1, [sp, #12]
 800d668:	9309      	str	r3, [sp, #36]	; 0x24
 800d66a:	f001 f95a 	bl	800e922 <strncmp>
 800d66e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d670:	2800      	cmp	r0, #0
 800d672:	d1d8      	bne.n	800d626 <__gethex+0x1fc>
 800d674:	461e      	mov	r6, r3
 800d676:	e791      	b.n	800d59c <__gethex+0x172>
 800d678:	1eb9      	subs	r1, r7, #2
 800d67a:	4628      	mov	r0, r5
 800d67c:	f000 fe16 	bl	800e2ac <__any_on>
 800d680:	2800      	cmp	r0, #0
 800d682:	d0b2      	beq.n	800d5ea <__gethex+0x1c0>
 800d684:	f04f 0a03 	mov.w	sl, #3
 800d688:	e7b1      	b.n	800d5ee <__gethex+0x1c4>
 800d68a:	da09      	bge.n	800d6a0 <__gethex+0x276>
 800d68c:	1bf7      	subs	r7, r6, r7
 800d68e:	4629      	mov	r1, r5
 800d690:	463a      	mov	r2, r7
 800d692:	9802      	ldr	r0, [sp, #8]
 800d694:	f000 fc2c 	bl	800def0 <__lshift>
 800d698:	1be4      	subs	r4, r4, r7
 800d69a:	4605      	mov	r5, r0
 800d69c:	f100 0914 	add.w	r9, r0, #20
 800d6a0:	f04f 0a00 	mov.w	sl, #0
 800d6a4:	e7a8      	b.n	800d5f8 <__gethex+0x1ce>
 800d6a6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d6aa:	42a0      	cmp	r0, r4
 800d6ac:	dd6a      	ble.n	800d784 <__gethex+0x35a>
 800d6ae:	1b04      	subs	r4, r0, r4
 800d6b0:	42a6      	cmp	r6, r4
 800d6b2:	dc2e      	bgt.n	800d712 <__gethex+0x2e8>
 800d6b4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d6b8:	2b02      	cmp	r3, #2
 800d6ba:	d022      	beq.n	800d702 <__gethex+0x2d8>
 800d6bc:	2b03      	cmp	r3, #3
 800d6be:	d024      	beq.n	800d70a <__gethex+0x2e0>
 800d6c0:	2b01      	cmp	r3, #1
 800d6c2:	d115      	bne.n	800d6f0 <__gethex+0x2c6>
 800d6c4:	42a6      	cmp	r6, r4
 800d6c6:	d113      	bne.n	800d6f0 <__gethex+0x2c6>
 800d6c8:	2e01      	cmp	r6, #1
 800d6ca:	dc0b      	bgt.n	800d6e4 <__gethex+0x2ba>
 800d6cc:	9a06      	ldr	r2, [sp, #24]
 800d6ce:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d6d2:	6013      	str	r3, [r2, #0]
 800d6d4:	2301      	movs	r3, #1
 800d6d6:	612b      	str	r3, [r5, #16]
 800d6d8:	f8c9 3000 	str.w	r3, [r9]
 800d6dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d6de:	2762      	movs	r7, #98	; 0x62
 800d6e0:	601d      	str	r5, [r3, #0]
 800d6e2:	e72a      	b.n	800d53a <__gethex+0x110>
 800d6e4:	1e71      	subs	r1, r6, #1
 800d6e6:	4628      	mov	r0, r5
 800d6e8:	f000 fde0 	bl	800e2ac <__any_on>
 800d6ec:	2800      	cmp	r0, #0
 800d6ee:	d1ed      	bne.n	800d6cc <__gethex+0x2a2>
 800d6f0:	4629      	mov	r1, r5
 800d6f2:	9802      	ldr	r0, [sp, #8]
 800d6f4:	f000 fa30 	bl	800db58 <_Bfree>
 800d6f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	6013      	str	r3, [r2, #0]
 800d6fe:	2750      	movs	r7, #80	; 0x50
 800d700:	e71b      	b.n	800d53a <__gethex+0x110>
 800d702:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d704:	2b00      	cmp	r3, #0
 800d706:	d0e1      	beq.n	800d6cc <__gethex+0x2a2>
 800d708:	e7f2      	b.n	800d6f0 <__gethex+0x2c6>
 800d70a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d1dd      	bne.n	800d6cc <__gethex+0x2a2>
 800d710:	e7ee      	b.n	800d6f0 <__gethex+0x2c6>
 800d712:	1e67      	subs	r7, r4, #1
 800d714:	f1ba 0f00 	cmp.w	sl, #0
 800d718:	d131      	bne.n	800d77e <__gethex+0x354>
 800d71a:	b127      	cbz	r7, 800d726 <__gethex+0x2fc>
 800d71c:	4639      	mov	r1, r7
 800d71e:	4628      	mov	r0, r5
 800d720:	f000 fdc4 	bl	800e2ac <__any_on>
 800d724:	4682      	mov	sl, r0
 800d726:	117a      	asrs	r2, r7, #5
 800d728:	2301      	movs	r3, #1
 800d72a:	f007 071f 	and.w	r7, r7, #31
 800d72e:	fa03 f707 	lsl.w	r7, r3, r7
 800d732:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800d736:	4621      	mov	r1, r4
 800d738:	421f      	tst	r7, r3
 800d73a:	4628      	mov	r0, r5
 800d73c:	bf18      	it	ne
 800d73e:	f04a 0a02 	orrne.w	sl, sl, #2
 800d742:	1b36      	subs	r6, r6, r4
 800d744:	f7ff fe22 	bl	800d38c <rshift>
 800d748:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800d74c:	2702      	movs	r7, #2
 800d74e:	f1ba 0f00 	cmp.w	sl, #0
 800d752:	d048      	beq.n	800d7e6 <__gethex+0x3bc>
 800d754:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d758:	2b02      	cmp	r3, #2
 800d75a:	d015      	beq.n	800d788 <__gethex+0x35e>
 800d75c:	2b03      	cmp	r3, #3
 800d75e:	d017      	beq.n	800d790 <__gethex+0x366>
 800d760:	2b01      	cmp	r3, #1
 800d762:	d109      	bne.n	800d778 <__gethex+0x34e>
 800d764:	f01a 0f02 	tst.w	sl, #2
 800d768:	d006      	beq.n	800d778 <__gethex+0x34e>
 800d76a:	f8d9 3000 	ldr.w	r3, [r9]
 800d76e:	ea4a 0a03 	orr.w	sl, sl, r3
 800d772:	f01a 0f01 	tst.w	sl, #1
 800d776:	d10e      	bne.n	800d796 <__gethex+0x36c>
 800d778:	f047 0710 	orr.w	r7, r7, #16
 800d77c:	e033      	b.n	800d7e6 <__gethex+0x3bc>
 800d77e:	f04f 0a01 	mov.w	sl, #1
 800d782:	e7d0      	b.n	800d726 <__gethex+0x2fc>
 800d784:	2701      	movs	r7, #1
 800d786:	e7e2      	b.n	800d74e <__gethex+0x324>
 800d788:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d78a:	f1c3 0301 	rsb	r3, r3, #1
 800d78e:	9315      	str	r3, [sp, #84]	; 0x54
 800d790:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d792:	2b00      	cmp	r3, #0
 800d794:	d0f0      	beq.n	800d778 <__gethex+0x34e>
 800d796:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800d79a:	f105 0314 	add.w	r3, r5, #20
 800d79e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800d7a2:	eb03 010a 	add.w	r1, r3, sl
 800d7a6:	f04f 0c00 	mov.w	ip, #0
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7b0:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d7b4:	d01c      	beq.n	800d7f0 <__gethex+0x3c6>
 800d7b6:	3201      	adds	r2, #1
 800d7b8:	6002      	str	r2, [r0, #0]
 800d7ba:	2f02      	cmp	r7, #2
 800d7bc:	f105 0314 	add.w	r3, r5, #20
 800d7c0:	d138      	bne.n	800d834 <__gethex+0x40a>
 800d7c2:	f8d8 2000 	ldr.w	r2, [r8]
 800d7c6:	3a01      	subs	r2, #1
 800d7c8:	42b2      	cmp	r2, r6
 800d7ca:	d10a      	bne.n	800d7e2 <__gethex+0x3b8>
 800d7cc:	1171      	asrs	r1, r6, #5
 800d7ce:	2201      	movs	r2, #1
 800d7d0:	f006 061f 	and.w	r6, r6, #31
 800d7d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d7d8:	fa02 f606 	lsl.w	r6, r2, r6
 800d7dc:	421e      	tst	r6, r3
 800d7de:	bf18      	it	ne
 800d7e0:	4617      	movne	r7, r2
 800d7e2:	f047 0720 	orr.w	r7, r7, #32
 800d7e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d7e8:	601d      	str	r5, [r3, #0]
 800d7ea:	9b06      	ldr	r3, [sp, #24]
 800d7ec:	601c      	str	r4, [r3, #0]
 800d7ee:	e6a4      	b.n	800d53a <__gethex+0x110>
 800d7f0:	4299      	cmp	r1, r3
 800d7f2:	f843 cc04 	str.w	ip, [r3, #-4]
 800d7f6:	d8d8      	bhi.n	800d7aa <__gethex+0x380>
 800d7f8:	68ab      	ldr	r3, [r5, #8]
 800d7fa:	4599      	cmp	r9, r3
 800d7fc:	db12      	blt.n	800d824 <__gethex+0x3fa>
 800d7fe:	6869      	ldr	r1, [r5, #4]
 800d800:	9802      	ldr	r0, [sp, #8]
 800d802:	3101      	adds	r1, #1
 800d804:	f000 f974 	bl	800daf0 <_Balloc>
 800d808:	692a      	ldr	r2, [r5, #16]
 800d80a:	3202      	adds	r2, #2
 800d80c:	f105 010c 	add.w	r1, r5, #12
 800d810:	4683      	mov	fp, r0
 800d812:	0092      	lsls	r2, r2, #2
 800d814:	300c      	adds	r0, #12
 800d816:	f7fc feb1 	bl	800a57c <memcpy>
 800d81a:	4629      	mov	r1, r5
 800d81c:	9802      	ldr	r0, [sp, #8]
 800d81e:	f000 f99b 	bl	800db58 <_Bfree>
 800d822:	465d      	mov	r5, fp
 800d824:	692b      	ldr	r3, [r5, #16]
 800d826:	1c5a      	adds	r2, r3, #1
 800d828:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800d82c:	612a      	str	r2, [r5, #16]
 800d82e:	2201      	movs	r2, #1
 800d830:	615a      	str	r2, [r3, #20]
 800d832:	e7c2      	b.n	800d7ba <__gethex+0x390>
 800d834:	692a      	ldr	r2, [r5, #16]
 800d836:	454a      	cmp	r2, r9
 800d838:	dd0b      	ble.n	800d852 <__gethex+0x428>
 800d83a:	2101      	movs	r1, #1
 800d83c:	4628      	mov	r0, r5
 800d83e:	f7ff fda5 	bl	800d38c <rshift>
 800d842:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d846:	3401      	adds	r4, #1
 800d848:	42a3      	cmp	r3, r4
 800d84a:	f6ff aed9 	blt.w	800d600 <__gethex+0x1d6>
 800d84e:	2701      	movs	r7, #1
 800d850:	e7c7      	b.n	800d7e2 <__gethex+0x3b8>
 800d852:	f016 061f 	ands.w	r6, r6, #31
 800d856:	d0fa      	beq.n	800d84e <__gethex+0x424>
 800d858:	449a      	add	sl, r3
 800d85a:	f1c6 0620 	rsb	r6, r6, #32
 800d85e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800d862:	f000 fa09 	bl	800dc78 <__hi0bits>
 800d866:	42b0      	cmp	r0, r6
 800d868:	dbe7      	blt.n	800d83a <__gethex+0x410>
 800d86a:	e7f0      	b.n	800d84e <__gethex+0x424>

0800d86c <L_shift>:
 800d86c:	f1c2 0208 	rsb	r2, r2, #8
 800d870:	0092      	lsls	r2, r2, #2
 800d872:	b570      	push	{r4, r5, r6, lr}
 800d874:	f1c2 0620 	rsb	r6, r2, #32
 800d878:	6843      	ldr	r3, [r0, #4]
 800d87a:	6804      	ldr	r4, [r0, #0]
 800d87c:	fa03 f506 	lsl.w	r5, r3, r6
 800d880:	432c      	orrs	r4, r5
 800d882:	40d3      	lsrs	r3, r2
 800d884:	6004      	str	r4, [r0, #0]
 800d886:	f840 3f04 	str.w	r3, [r0, #4]!
 800d88a:	4288      	cmp	r0, r1
 800d88c:	d3f4      	bcc.n	800d878 <L_shift+0xc>
 800d88e:	bd70      	pop	{r4, r5, r6, pc}

0800d890 <__match>:
 800d890:	b530      	push	{r4, r5, lr}
 800d892:	6803      	ldr	r3, [r0, #0]
 800d894:	3301      	adds	r3, #1
 800d896:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d89a:	b914      	cbnz	r4, 800d8a2 <__match+0x12>
 800d89c:	6003      	str	r3, [r0, #0]
 800d89e:	2001      	movs	r0, #1
 800d8a0:	bd30      	pop	{r4, r5, pc}
 800d8a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d8a6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d8aa:	2d19      	cmp	r5, #25
 800d8ac:	bf98      	it	ls
 800d8ae:	3220      	addls	r2, #32
 800d8b0:	42a2      	cmp	r2, r4
 800d8b2:	d0f0      	beq.n	800d896 <__match+0x6>
 800d8b4:	2000      	movs	r0, #0
 800d8b6:	e7f3      	b.n	800d8a0 <__match+0x10>

0800d8b8 <__hexnan>:
 800d8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8bc:	680b      	ldr	r3, [r1, #0]
 800d8be:	6801      	ldr	r1, [r0, #0]
 800d8c0:	115f      	asrs	r7, r3, #5
 800d8c2:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800d8c6:	f013 031f 	ands.w	r3, r3, #31
 800d8ca:	b087      	sub	sp, #28
 800d8cc:	bf18      	it	ne
 800d8ce:	3704      	addne	r7, #4
 800d8d0:	2500      	movs	r5, #0
 800d8d2:	1f3e      	subs	r6, r7, #4
 800d8d4:	4682      	mov	sl, r0
 800d8d6:	4690      	mov	r8, r2
 800d8d8:	9301      	str	r3, [sp, #4]
 800d8da:	f847 5c04 	str.w	r5, [r7, #-4]
 800d8de:	46b1      	mov	r9, r6
 800d8e0:	4634      	mov	r4, r6
 800d8e2:	9502      	str	r5, [sp, #8]
 800d8e4:	46ab      	mov	fp, r5
 800d8e6:	784a      	ldrb	r2, [r1, #1]
 800d8e8:	1c4b      	adds	r3, r1, #1
 800d8ea:	9303      	str	r3, [sp, #12]
 800d8ec:	b342      	cbz	r2, 800d940 <__hexnan+0x88>
 800d8ee:	4610      	mov	r0, r2
 800d8f0:	9105      	str	r1, [sp, #20]
 800d8f2:	9204      	str	r2, [sp, #16]
 800d8f4:	f7ff fd84 	bl	800d400 <__hexdig_fun>
 800d8f8:	2800      	cmp	r0, #0
 800d8fa:	d143      	bne.n	800d984 <__hexnan+0xcc>
 800d8fc:	9a04      	ldr	r2, [sp, #16]
 800d8fe:	9905      	ldr	r1, [sp, #20]
 800d900:	2a20      	cmp	r2, #32
 800d902:	d818      	bhi.n	800d936 <__hexnan+0x7e>
 800d904:	9b02      	ldr	r3, [sp, #8]
 800d906:	459b      	cmp	fp, r3
 800d908:	dd13      	ble.n	800d932 <__hexnan+0x7a>
 800d90a:	454c      	cmp	r4, r9
 800d90c:	d206      	bcs.n	800d91c <__hexnan+0x64>
 800d90e:	2d07      	cmp	r5, #7
 800d910:	dc04      	bgt.n	800d91c <__hexnan+0x64>
 800d912:	462a      	mov	r2, r5
 800d914:	4649      	mov	r1, r9
 800d916:	4620      	mov	r0, r4
 800d918:	f7ff ffa8 	bl	800d86c <L_shift>
 800d91c:	4544      	cmp	r4, r8
 800d91e:	d944      	bls.n	800d9aa <__hexnan+0xf2>
 800d920:	2300      	movs	r3, #0
 800d922:	f1a4 0904 	sub.w	r9, r4, #4
 800d926:	f844 3c04 	str.w	r3, [r4, #-4]
 800d92a:	f8cd b008 	str.w	fp, [sp, #8]
 800d92e:	464c      	mov	r4, r9
 800d930:	461d      	mov	r5, r3
 800d932:	9903      	ldr	r1, [sp, #12]
 800d934:	e7d7      	b.n	800d8e6 <__hexnan+0x2e>
 800d936:	2a29      	cmp	r2, #41	; 0x29
 800d938:	d14a      	bne.n	800d9d0 <__hexnan+0x118>
 800d93a:	3102      	adds	r1, #2
 800d93c:	f8ca 1000 	str.w	r1, [sl]
 800d940:	f1bb 0f00 	cmp.w	fp, #0
 800d944:	d044      	beq.n	800d9d0 <__hexnan+0x118>
 800d946:	454c      	cmp	r4, r9
 800d948:	d206      	bcs.n	800d958 <__hexnan+0xa0>
 800d94a:	2d07      	cmp	r5, #7
 800d94c:	dc04      	bgt.n	800d958 <__hexnan+0xa0>
 800d94e:	462a      	mov	r2, r5
 800d950:	4649      	mov	r1, r9
 800d952:	4620      	mov	r0, r4
 800d954:	f7ff ff8a 	bl	800d86c <L_shift>
 800d958:	4544      	cmp	r4, r8
 800d95a:	d928      	bls.n	800d9ae <__hexnan+0xf6>
 800d95c:	4643      	mov	r3, r8
 800d95e:	f854 2b04 	ldr.w	r2, [r4], #4
 800d962:	f843 2b04 	str.w	r2, [r3], #4
 800d966:	42a6      	cmp	r6, r4
 800d968:	d2f9      	bcs.n	800d95e <__hexnan+0xa6>
 800d96a:	2200      	movs	r2, #0
 800d96c:	f843 2b04 	str.w	r2, [r3], #4
 800d970:	429e      	cmp	r6, r3
 800d972:	d2fb      	bcs.n	800d96c <__hexnan+0xb4>
 800d974:	6833      	ldr	r3, [r6, #0]
 800d976:	b91b      	cbnz	r3, 800d980 <__hexnan+0xc8>
 800d978:	4546      	cmp	r6, r8
 800d97a:	d127      	bne.n	800d9cc <__hexnan+0x114>
 800d97c:	2301      	movs	r3, #1
 800d97e:	6033      	str	r3, [r6, #0]
 800d980:	2005      	movs	r0, #5
 800d982:	e026      	b.n	800d9d2 <__hexnan+0x11a>
 800d984:	3501      	adds	r5, #1
 800d986:	2d08      	cmp	r5, #8
 800d988:	f10b 0b01 	add.w	fp, fp, #1
 800d98c:	dd06      	ble.n	800d99c <__hexnan+0xe4>
 800d98e:	4544      	cmp	r4, r8
 800d990:	d9cf      	bls.n	800d932 <__hexnan+0x7a>
 800d992:	2300      	movs	r3, #0
 800d994:	f844 3c04 	str.w	r3, [r4, #-4]
 800d998:	2501      	movs	r5, #1
 800d99a:	3c04      	subs	r4, #4
 800d99c:	6822      	ldr	r2, [r4, #0]
 800d99e:	f000 000f 	and.w	r0, r0, #15
 800d9a2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d9a6:	6020      	str	r0, [r4, #0]
 800d9a8:	e7c3      	b.n	800d932 <__hexnan+0x7a>
 800d9aa:	2508      	movs	r5, #8
 800d9ac:	e7c1      	b.n	800d932 <__hexnan+0x7a>
 800d9ae:	9b01      	ldr	r3, [sp, #4]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d0df      	beq.n	800d974 <__hexnan+0xbc>
 800d9b4:	f04f 32ff 	mov.w	r2, #4294967295
 800d9b8:	f1c3 0320 	rsb	r3, r3, #32
 800d9bc:	fa22 f303 	lsr.w	r3, r2, r3
 800d9c0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800d9c4:	401a      	ands	r2, r3
 800d9c6:	f847 2c04 	str.w	r2, [r7, #-4]
 800d9ca:	e7d3      	b.n	800d974 <__hexnan+0xbc>
 800d9cc:	3e04      	subs	r6, #4
 800d9ce:	e7d1      	b.n	800d974 <__hexnan+0xbc>
 800d9d0:	2004      	movs	r0, #4
 800d9d2:	b007      	add	sp, #28
 800d9d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d9d8 <__locale_ctype_ptr_l>:
 800d9d8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800d9dc:	4770      	bx	lr

0800d9de <__localeconv_l>:
 800d9de:	30f0      	adds	r0, #240	; 0xf0
 800d9e0:	4770      	bx	lr
	...

0800d9e4 <_localeconv_r>:
 800d9e4:	4b04      	ldr	r3, [pc, #16]	; (800d9f8 <_localeconv_r+0x14>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	6a18      	ldr	r0, [r3, #32]
 800d9ea:	4b04      	ldr	r3, [pc, #16]	; (800d9fc <_localeconv_r+0x18>)
 800d9ec:	2800      	cmp	r0, #0
 800d9ee:	bf08      	it	eq
 800d9f0:	4618      	moveq	r0, r3
 800d9f2:	30f0      	adds	r0, #240	; 0xf0
 800d9f4:	4770      	bx	lr
 800d9f6:	bf00      	nop
 800d9f8:	2000000c 	.word	0x2000000c
 800d9fc:	20000070 	.word	0x20000070

0800da00 <__swhatbuf_r>:
 800da00:	b570      	push	{r4, r5, r6, lr}
 800da02:	460e      	mov	r6, r1
 800da04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da08:	2900      	cmp	r1, #0
 800da0a:	b096      	sub	sp, #88	; 0x58
 800da0c:	4614      	mov	r4, r2
 800da0e:	461d      	mov	r5, r3
 800da10:	da07      	bge.n	800da22 <__swhatbuf_r+0x22>
 800da12:	2300      	movs	r3, #0
 800da14:	602b      	str	r3, [r5, #0]
 800da16:	89b3      	ldrh	r3, [r6, #12]
 800da18:	061a      	lsls	r2, r3, #24
 800da1a:	d410      	bmi.n	800da3e <__swhatbuf_r+0x3e>
 800da1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da20:	e00e      	b.n	800da40 <__swhatbuf_r+0x40>
 800da22:	466a      	mov	r2, sp
 800da24:	f000 ffbe 	bl	800e9a4 <_fstat_r>
 800da28:	2800      	cmp	r0, #0
 800da2a:	dbf2      	blt.n	800da12 <__swhatbuf_r+0x12>
 800da2c:	9a01      	ldr	r2, [sp, #4]
 800da2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800da32:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800da36:	425a      	negs	r2, r3
 800da38:	415a      	adcs	r2, r3
 800da3a:	602a      	str	r2, [r5, #0]
 800da3c:	e7ee      	b.n	800da1c <__swhatbuf_r+0x1c>
 800da3e:	2340      	movs	r3, #64	; 0x40
 800da40:	2000      	movs	r0, #0
 800da42:	6023      	str	r3, [r4, #0]
 800da44:	b016      	add	sp, #88	; 0x58
 800da46:	bd70      	pop	{r4, r5, r6, pc}

0800da48 <__smakebuf_r>:
 800da48:	898b      	ldrh	r3, [r1, #12]
 800da4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800da4c:	079d      	lsls	r5, r3, #30
 800da4e:	4606      	mov	r6, r0
 800da50:	460c      	mov	r4, r1
 800da52:	d507      	bpl.n	800da64 <__smakebuf_r+0x1c>
 800da54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800da58:	6023      	str	r3, [r4, #0]
 800da5a:	6123      	str	r3, [r4, #16]
 800da5c:	2301      	movs	r3, #1
 800da5e:	6163      	str	r3, [r4, #20]
 800da60:	b002      	add	sp, #8
 800da62:	bd70      	pop	{r4, r5, r6, pc}
 800da64:	ab01      	add	r3, sp, #4
 800da66:	466a      	mov	r2, sp
 800da68:	f7ff ffca 	bl	800da00 <__swhatbuf_r>
 800da6c:	9900      	ldr	r1, [sp, #0]
 800da6e:	4605      	mov	r5, r0
 800da70:	4630      	mov	r0, r6
 800da72:	f7fc fdfd 	bl	800a670 <_malloc_r>
 800da76:	b948      	cbnz	r0, 800da8c <__smakebuf_r+0x44>
 800da78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da7c:	059a      	lsls	r2, r3, #22
 800da7e:	d4ef      	bmi.n	800da60 <__smakebuf_r+0x18>
 800da80:	f023 0303 	bic.w	r3, r3, #3
 800da84:	f043 0302 	orr.w	r3, r3, #2
 800da88:	81a3      	strh	r3, [r4, #12]
 800da8a:	e7e3      	b.n	800da54 <__smakebuf_r+0xc>
 800da8c:	4b0d      	ldr	r3, [pc, #52]	; (800dac4 <__smakebuf_r+0x7c>)
 800da8e:	62b3      	str	r3, [r6, #40]	; 0x28
 800da90:	89a3      	ldrh	r3, [r4, #12]
 800da92:	6020      	str	r0, [r4, #0]
 800da94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da98:	81a3      	strh	r3, [r4, #12]
 800da9a:	9b00      	ldr	r3, [sp, #0]
 800da9c:	6163      	str	r3, [r4, #20]
 800da9e:	9b01      	ldr	r3, [sp, #4]
 800daa0:	6120      	str	r0, [r4, #16]
 800daa2:	b15b      	cbz	r3, 800dabc <__smakebuf_r+0x74>
 800daa4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800daa8:	4630      	mov	r0, r6
 800daaa:	f000 ff8d 	bl	800e9c8 <_isatty_r>
 800daae:	b128      	cbz	r0, 800dabc <__smakebuf_r+0x74>
 800dab0:	89a3      	ldrh	r3, [r4, #12]
 800dab2:	f023 0303 	bic.w	r3, r3, #3
 800dab6:	f043 0301 	orr.w	r3, r3, #1
 800daba:	81a3      	strh	r3, [r4, #12]
 800dabc:	89a3      	ldrh	r3, [r4, #12]
 800dabe:	431d      	orrs	r5, r3
 800dac0:	81a5      	strh	r5, [r4, #12]
 800dac2:	e7cd      	b.n	800da60 <__smakebuf_r+0x18>
 800dac4:	0800d241 	.word	0x0800d241

0800dac8 <__ascii_mbtowc>:
 800dac8:	b082      	sub	sp, #8
 800daca:	b901      	cbnz	r1, 800dace <__ascii_mbtowc+0x6>
 800dacc:	a901      	add	r1, sp, #4
 800dace:	b142      	cbz	r2, 800dae2 <__ascii_mbtowc+0x1a>
 800dad0:	b14b      	cbz	r3, 800dae6 <__ascii_mbtowc+0x1e>
 800dad2:	7813      	ldrb	r3, [r2, #0]
 800dad4:	600b      	str	r3, [r1, #0]
 800dad6:	7812      	ldrb	r2, [r2, #0]
 800dad8:	1c10      	adds	r0, r2, #0
 800dada:	bf18      	it	ne
 800dadc:	2001      	movne	r0, #1
 800dade:	b002      	add	sp, #8
 800dae0:	4770      	bx	lr
 800dae2:	4610      	mov	r0, r2
 800dae4:	e7fb      	b.n	800dade <__ascii_mbtowc+0x16>
 800dae6:	f06f 0001 	mvn.w	r0, #1
 800daea:	e7f8      	b.n	800dade <__ascii_mbtowc+0x16>

0800daec <__malloc_lock>:
 800daec:	4770      	bx	lr

0800daee <__malloc_unlock>:
 800daee:	4770      	bx	lr

0800daf0 <_Balloc>:
 800daf0:	b570      	push	{r4, r5, r6, lr}
 800daf2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800daf4:	4604      	mov	r4, r0
 800daf6:	460e      	mov	r6, r1
 800daf8:	b93d      	cbnz	r5, 800db0a <_Balloc+0x1a>
 800dafa:	2010      	movs	r0, #16
 800dafc:	f7fc fd36 	bl	800a56c <malloc>
 800db00:	6260      	str	r0, [r4, #36]	; 0x24
 800db02:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800db06:	6005      	str	r5, [r0, #0]
 800db08:	60c5      	str	r5, [r0, #12]
 800db0a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800db0c:	68eb      	ldr	r3, [r5, #12]
 800db0e:	b183      	cbz	r3, 800db32 <_Balloc+0x42>
 800db10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db12:	68db      	ldr	r3, [r3, #12]
 800db14:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800db18:	b9b8      	cbnz	r0, 800db4a <_Balloc+0x5a>
 800db1a:	2101      	movs	r1, #1
 800db1c:	fa01 f506 	lsl.w	r5, r1, r6
 800db20:	1d6a      	adds	r2, r5, #5
 800db22:	0092      	lsls	r2, r2, #2
 800db24:	4620      	mov	r0, r4
 800db26:	f000 fbe2 	bl	800e2ee <_calloc_r>
 800db2a:	b160      	cbz	r0, 800db46 <_Balloc+0x56>
 800db2c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800db30:	e00e      	b.n	800db50 <_Balloc+0x60>
 800db32:	2221      	movs	r2, #33	; 0x21
 800db34:	2104      	movs	r1, #4
 800db36:	4620      	mov	r0, r4
 800db38:	f000 fbd9 	bl	800e2ee <_calloc_r>
 800db3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db3e:	60e8      	str	r0, [r5, #12]
 800db40:	68db      	ldr	r3, [r3, #12]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d1e4      	bne.n	800db10 <_Balloc+0x20>
 800db46:	2000      	movs	r0, #0
 800db48:	bd70      	pop	{r4, r5, r6, pc}
 800db4a:	6802      	ldr	r2, [r0, #0]
 800db4c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800db50:	2300      	movs	r3, #0
 800db52:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800db56:	e7f7      	b.n	800db48 <_Balloc+0x58>

0800db58 <_Bfree>:
 800db58:	b570      	push	{r4, r5, r6, lr}
 800db5a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800db5c:	4606      	mov	r6, r0
 800db5e:	460d      	mov	r5, r1
 800db60:	b93c      	cbnz	r4, 800db72 <_Bfree+0x1a>
 800db62:	2010      	movs	r0, #16
 800db64:	f7fc fd02 	bl	800a56c <malloc>
 800db68:	6270      	str	r0, [r6, #36]	; 0x24
 800db6a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800db6e:	6004      	str	r4, [r0, #0]
 800db70:	60c4      	str	r4, [r0, #12]
 800db72:	b13d      	cbz	r5, 800db84 <_Bfree+0x2c>
 800db74:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800db76:	686a      	ldr	r2, [r5, #4]
 800db78:	68db      	ldr	r3, [r3, #12]
 800db7a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800db7e:	6029      	str	r1, [r5, #0]
 800db80:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800db84:	bd70      	pop	{r4, r5, r6, pc}

0800db86 <__multadd>:
 800db86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db8a:	690d      	ldr	r5, [r1, #16]
 800db8c:	461f      	mov	r7, r3
 800db8e:	4606      	mov	r6, r0
 800db90:	460c      	mov	r4, r1
 800db92:	f101 0c14 	add.w	ip, r1, #20
 800db96:	2300      	movs	r3, #0
 800db98:	f8dc 0000 	ldr.w	r0, [ip]
 800db9c:	b281      	uxth	r1, r0
 800db9e:	fb02 7101 	mla	r1, r2, r1, r7
 800dba2:	0c0f      	lsrs	r7, r1, #16
 800dba4:	0c00      	lsrs	r0, r0, #16
 800dba6:	fb02 7000 	mla	r0, r2, r0, r7
 800dbaa:	b289      	uxth	r1, r1
 800dbac:	3301      	adds	r3, #1
 800dbae:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800dbb2:	429d      	cmp	r5, r3
 800dbb4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800dbb8:	f84c 1b04 	str.w	r1, [ip], #4
 800dbbc:	dcec      	bgt.n	800db98 <__multadd+0x12>
 800dbbe:	b1d7      	cbz	r7, 800dbf6 <__multadd+0x70>
 800dbc0:	68a3      	ldr	r3, [r4, #8]
 800dbc2:	42ab      	cmp	r3, r5
 800dbc4:	dc12      	bgt.n	800dbec <__multadd+0x66>
 800dbc6:	6861      	ldr	r1, [r4, #4]
 800dbc8:	4630      	mov	r0, r6
 800dbca:	3101      	adds	r1, #1
 800dbcc:	f7ff ff90 	bl	800daf0 <_Balloc>
 800dbd0:	6922      	ldr	r2, [r4, #16]
 800dbd2:	3202      	adds	r2, #2
 800dbd4:	f104 010c 	add.w	r1, r4, #12
 800dbd8:	4680      	mov	r8, r0
 800dbda:	0092      	lsls	r2, r2, #2
 800dbdc:	300c      	adds	r0, #12
 800dbde:	f7fc fccd 	bl	800a57c <memcpy>
 800dbe2:	4621      	mov	r1, r4
 800dbe4:	4630      	mov	r0, r6
 800dbe6:	f7ff ffb7 	bl	800db58 <_Bfree>
 800dbea:	4644      	mov	r4, r8
 800dbec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dbf0:	3501      	adds	r5, #1
 800dbf2:	615f      	str	r7, [r3, #20]
 800dbf4:	6125      	str	r5, [r4, #16]
 800dbf6:	4620      	mov	r0, r4
 800dbf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dbfc <__s2b>:
 800dbfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc00:	460c      	mov	r4, r1
 800dc02:	4615      	mov	r5, r2
 800dc04:	461f      	mov	r7, r3
 800dc06:	2209      	movs	r2, #9
 800dc08:	3308      	adds	r3, #8
 800dc0a:	4606      	mov	r6, r0
 800dc0c:	fb93 f3f2 	sdiv	r3, r3, r2
 800dc10:	2100      	movs	r1, #0
 800dc12:	2201      	movs	r2, #1
 800dc14:	429a      	cmp	r2, r3
 800dc16:	db20      	blt.n	800dc5a <__s2b+0x5e>
 800dc18:	4630      	mov	r0, r6
 800dc1a:	f7ff ff69 	bl	800daf0 <_Balloc>
 800dc1e:	9b08      	ldr	r3, [sp, #32]
 800dc20:	6143      	str	r3, [r0, #20]
 800dc22:	2d09      	cmp	r5, #9
 800dc24:	f04f 0301 	mov.w	r3, #1
 800dc28:	6103      	str	r3, [r0, #16]
 800dc2a:	dd19      	ble.n	800dc60 <__s2b+0x64>
 800dc2c:	f104 0809 	add.w	r8, r4, #9
 800dc30:	46c1      	mov	r9, r8
 800dc32:	442c      	add	r4, r5
 800dc34:	f819 3b01 	ldrb.w	r3, [r9], #1
 800dc38:	4601      	mov	r1, r0
 800dc3a:	3b30      	subs	r3, #48	; 0x30
 800dc3c:	220a      	movs	r2, #10
 800dc3e:	4630      	mov	r0, r6
 800dc40:	f7ff ffa1 	bl	800db86 <__multadd>
 800dc44:	45a1      	cmp	r9, r4
 800dc46:	d1f5      	bne.n	800dc34 <__s2b+0x38>
 800dc48:	eb08 0405 	add.w	r4, r8, r5
 800dc4c:	3c08      	subs	r4, #8
 800dc4e:	1b2d      	subs	r5, r5, r4
 800dc50:	1963      	adds	r3, r4, r5
 800dc52:	42bb      	cmp	r3, r7
 800dc54:	db07      	blt.n	800dc66 <__s2b+0x6a>
 800dc56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc5a:	0052      	lsls	r2, r2, #1
 800dc5c:	3101      	adds	r1, #1
 800dc5e:	e7d9      	b.n	800dc14 <__s2b+0x18>
 800dc60:	340a      	adds	r4, #10
 800dc62:	2509      	movs	r5, #9
 800dc64:	e7f3      	b.n	800dc4e <__s2b+0x52>
 800dc66:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dc6a:	4601      	mov	r1, r0
 800dc6c:	3b30      	subs	r3, #48	; 0x30
 800dc6e:	220a      	movs	r2, #10
 800dc70:	4630      	mov	r0, r6
 800dc72:	f7ff ff88 	bl	800db86 <__multadd>
 800dc76:	e7eb      	b.n	800dc50 <__s2b+0x54>

0800dc78 <__hi0bits>:
 800dc78:	0c02      	lsrs	r2, r0, #16
 800dc7a:	0412      	lsls	r2, r2, #16
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	b9b2      	cbnz	r2, 800dcae <__hi0bits+0x36>
 800dc80:	0403      	lsls	r3, r0, #16
 800dc82:	2010      	movs	r0, #16
 800dc84:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800dc88:	bf04      	itt	eq
 800dc8a:	021b      	lsleq	r3, r3, #8
 800dc8c:	3008      	addeq	r0, #8
 800dc8e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800dc92:	bf04      	itt	eq
 800dc94:	011b      	lsleq	r3, r3, #4
 800dc96:	3004      	addeq	r0, #4
 800dc98:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800dc9c:	bf04      	itt	eq
 800dc9e:	009b      	lsleq	r3, r3, #2
 800dca0:	3002      	addeq	r0, #2
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	db06      	blt.n	800dcb4 <__hi0bits+0x3c>
 800dca6:	005b      	lsls	r3, r3, #1
 800dca8:	d503      	bpl.n	800dcb2 <__hi0bits+0x3a>
 800dcaa:	3001      	adds	r0, #1
 800dcac:	4770      	bx	lr
 800dcae:	2000      	movs	r0, #0
 800dcb0:	e7e8      	b.n	800dc84 <__hi0bits+0xc>
 800dcb2:	2020      	movs	r0, #32
 800dcb4:	4770      	bx	lr

0800dcb6 <__lo0bits>:
 800dcb6:	6803      	ldr	r3, [r0, #0]
 800dcb8:	f013 0207 	ands.w	r2, r3, #7
 800dcbc:	4601      	mov	r1, r0
 800dcbe:	d00b      	beq.n	800dcd8 <__lo0bits+0x22>
 800dcc0:	07da      	lsls	r2, r3, #31
 800dcc2:	d423      	bmi.n	800dd0c <__lo0bits+0x56>
 800dcc4:	0798      	lsls	r0, r3, #30
 800dcc6:	bf49      	itett	mi
 800dcc8:	085b      	lsrmi	r3, r3, #1
 800dcca:	089b      	lsrpl	r3, r3, #2
 800dccc:	2001      	movmi	r0, #1
 800dcce:	600b      	strmi	r3, [r1, #0]
 800dcd0:	bf5c      	itt	pl
 800dcd2:	600b      	strpl	r3, [r1, #0]
 800dcd4:	2002      	movpl	r0, #2
 800dcd6:	4770      	bx	lr
 800dcd8:	b298      	uxth	r0, r3
 800dcda:	b9a8      	cbnz	r0, 800dd08 <__lo0bits+0x52>
 800dcdc:	0c1b      	lsrs	r3, r3, #16
 800dcde:	2010      	movs	r0, #16
 800dce0:	f013 0fff 	tst.w	r3, #255	; 0xff
 800dce4:	bf04      	itt	eq
 800dce6:	0a1b      	lsreq	r3, r3, #8
 800dce8:	3008      	addeq	r0, #8
 800dcea:	071a      	lsls	r2, r3, #28
 800dcec:	bf04      	itt	eq
 800dcee:	091b      	lsreq	r3, r3, #4
 800dcf0:	3004      	addeq	r0, #4
 800dcf2:	079a      	lsls	r2, r3, #30
 800dcf4:	bf04      	itt	eq
 800dcf6:	089b      	lsreq	r3, r3, #2
 800dcf8:	3002      	addeq	r0, #2
 800dcfa:	07da      	lsls	r2, r3, #31
 800dcfc:	d402      	bmi.n	800dd04 <__lo0bits+0x4e>
 800dcfe:	085b      	lsrs	r3, r3, #1
 800dd00:	d006      	beq.n	800dd10 <__lo0bits+0x5a>
 800dd02:	3001      	adds	r0, #1
 800dd04:	600b      	str	r3, [r1, #0]
 800dd06:	4770      	bx	lr
 800dd08:	4610      	mov	r0, r2
 800dd0a:	e7e9      	b.n	800dce0 <__lo0bits+0x2a>
 800dd0c:	2000      	movs	r0, #0
 800dd0e:	4770      	bx	lr
 800dd10:	2020      	movs	r0, #32
 800dd12:	4770      	bx	lr

0800dd14 <__i2b>:
 800dd14:	b510      	push	{r4, lr}
 800dd16:	460c      	mov	r4, r1
 800dd18:	2101      	movs	r1, #1
 800dd1a:	f7ff fee9 	bl	800daf0 <_Balloc>
 800dd1e:	2201      	movs	r2, #1
 800dd20:	6144      	str	r4, [r0, #20]
 800dd22:	6102      	str	r2, [r0, #16]
 800dd24:	bd10      	pop	{r4, pc}

0800dd26 <__multiply>:
 800dd26:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd2a:	4614      	mov	r4, r2
 800dd2c:	690a      	ldr	r2, [r1, #16]
 800dd2e:	6923      	ldr	r3, [r4, #16]
 800dd30:	429a      	cmp	r2, r3
 800dd32:	bfb8      	it	lt
 800dd34:	460b      	movlt	r3, r1
 800dd36:	4688      	mov	r8, r1
 800dd38:	bfbc      	itt	lt
 800dd3a:	46a0      	movlt	r8, r4
 800dd3c:	461c      	movlt	r4, r3
 800dd3e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dd42:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800dd46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dd4a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dd4e:	eb07 0609 	add.w	r6, r7, r9
 800dd52:	42b3      	cmp	r3, r6
 800dd54:	bfb8      	it	lt
 800dd56:	3101      	addlt	r1, #1
 800dd58:	f7ff feca 	bl	800daf0 <_Balloc>
 800dd5c:	f100 0514 	add.w	r5, r0, #20
 800dd60:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800dd64:	462b      	mov	r3, r5
 800dd66:	2200      	movs	r2, #0
 800dd68:	4573      	cmp	r3, lr
 800dd6a:	d316      	bcc.n	800dd9a <__multiply+0x74>
 800dd6c:	f104 0214 	add.w	r2, r4, #20
 800dd70:	f108 0114 	add.w	r1, r8, #20
 800dd74:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800dd78:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800dd7c:	9300      	str	r3, [sp, #0]
 800dd7e:	9b00      	ldr	r3, [sp, #0]
 800dd80:	9201      	str	r2, [sp, #4]
 800dd82:	4293      	cmp	r3, r2
 800dd84:	d80c      	bhi.n	800dda0 <__multiply+0x7a>
 800dd86:	2e00      	cmp	r6, #0
 800dd88:	dd03      	ble.n	800dd92 <__multiply+0x6c>
 800dd8a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d05d      	beq.n	800de4e <__multiply+0x128>
 800dd92:	6106      	str	r6, [r0, #16]
 800dd94:	b003      	add	sp, #12
 800dd96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd9a:	f843 2b04 	str.w	r2, [r3], #4
 800dd9e:	e7e3      	b.n	800dd68 <__multiply+0x42>
 800dda0:	f8b2 b000 	ldrh.w	fp, [r2]
 800dda4:	f1bb 0f00 	cmp.w	fp, #0
 800dda8:	d023      	beq.n	800ddf2 <__multiply+0xcc>
 800ddaa:	4689      	mov	r9, r1
 800ddac:	46ac      	mov	ip, r5
 800ddae:	f04f 0800 	mov.w	r8, #0
 800ddb2:	f859 4b04 	ldr.w	r4, [r9], #4
 800ddb6:	f8dc a000 	ldr.w	sl, [ip]
 800ddba:	b2a3      	uxth	r3, r4
 800ddbc:	fa1f fa8a 	uxth.w	sl, sl
 800ddc0:	fb0b a303 	mla	r3, fp, r3, sl
 800ddc4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ddc8:	f8dc 4000 	ldr.w	r4, [ip]
 800ddcc:	4443      	add	r3, r8
 800ddce:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ddd2:	fb0b 840a 	mla	r4, fp, sl, r8
 800ddd6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800ddda:	46e2      	mov	sl, ip
 800dddc:	b29b      	uxth	r3, r3
 800ddde:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800dde2:	454f      	cmp	r7, r9
 800dde4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800dde8:	f84a 3b04 	str.w	r3, [sl], #4
 800ddec:	d82b      	bhi.n	800de46 <__multiply+0x120>
 800ddee:	f8cc 8004 	str.w	r8, [ip, #4]
 800ddf2:	9b01      	ldr	r3, [sp, #4]
 800ddf4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800ddf8:	3204      	adds	r2, #4
 800ddfa:	f1ba 0f00 	cmp.w	sl, #0
 800ddfe:	d020      	beq.n	800de42 <__multiply+0x11c>
 800de00:	682b      	ldr	r3, [r5, #0]
 800de02:	4689      	mov	r9, r1
 800de04:	46a8      	mov	r8, r5
 800de06:	f04f 0b00 	mov.w	fp, #0
 800de0a:	f8b9 c000 	ldrh.w	ip, [r9]
 800de0e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800de12:	fb0a 440c 	mla	r4, sl, ip, r4
 800de16:	445c      	add	r4, fp
 800de18:	46c4      	mov	ip, r8
 800de1a:	b29b      	uxth	r3, r3
 800de1c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800de20:	f84c 3b04 	str.w	r3, [ip], #4
 800de24:	f859 3b04 	ldr.w	r3, [r9], #4
 800de28:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800de2c:	0c1b      	lsrs	r3, r3, #16
 800de2e:	fb0a b303 	mla	r3, sl, r3, fp
 800de32:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800de36:	454f      	cmp	r7, r9
 800de38:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800de3c:	d805      	bhi.n	800de4a <__multiply+0x124>
 800de3e:	f8c8 3004 	str.w	r3, [r8, #4]
 800de42:	3504      	adds	r5, #4
 800de44:	e79b      	b.n	800dd7e <__multiply+0x58>
 800de46:	46d4      	mov	ip, sl
 800de48:	e7b3      	b.n	800ddb2 <__multiply+0x8c>
 800de4a:	46e0      	mov	r8, ip
 800de4c:	e7dd      	b.n	800de0a <__multiply+0xe4>
 800de4e:	3e01      	subs	r6, #1
 800de50:	e799      	b.n	800dd86 <__multiply+0x60>
	...

0800de54 <__pow5mult>:
 800de54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de58:	4615      	mov	r5, r2
 800de5a:	f012 0203 	ands.w	r2, r2, #3
 800de5e:	4606      	mov	r6, r0
 800de60:	460f      	mov	r7, r1
 800de62:	d007      	beq.n	800de74 <__pow5mult+0x20>
 800de64:	3a01      	subs	r2, #1
 800de66:	4c21      	ldr	r4, [pc, #132]	; (800deec <__pow5mult+0x98>)
 800de68:	2300      	movs	r3, #0
 800de6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800de6e:	f7ff fe8a 	bl	800db86 <__multadd>
 800de72:	4607      	mov	r7, r0
 800de74:	10ad      	asrs	r5, r5, #2
 800de76:	d035      	beq.n	800dee4 <__pow5mult+0x90>
 800de78:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800de7a:	b93c      	cbnz	r4, 800de8c <__pow5mult+0x38>
 800de7c:	2010      	movs	r0, #16
 800de7e:	f7fc fb75 	bl	800a56c <malloc>
 800de82:	6270      	str	r0, [r6, #36]	; 0x24
 800de84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800de88:	6004      	str	r4, [r0, #0]
 800de8a:	60c4      	str	r4, [r0, #12]
 800de8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800de90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800de94:	b94c      	cbnz	r4, 800deaa <__pow5mult+0x56>
 800de96:	f240 2171 	movw	r1, #625	; 0x271
 800de9a:	4630      	mov	r0, r6
 800de9c:	f7ff ff3a 	bl	800dd14 <__i2b>
 800dea0:	2300      	movs	r3, #0
 800dea2:	f8c8 0008 	str.w	r0, [r8, #8]
 800dea6:	4604      	mov	r4, r0
 800dea8:	6003      	str	r3, [r0, #0]
 800deaa:	f04f 0800 	mov.w	r8, #0
 800deae:	07eb      	lsls	r3, r5, #31
 800deb0:	d50a      	bpl.n	800dec8 <__pow5mult+0x74>
 800deb2:	4639      	mov	r1, r7
 800deb4:	4622      	mov	r2, r4
 800deb6:	4630      	mov	r0, r6
 800deb8:	f7ff ff35 	bl	800dd26 <__multiply>
 800debc:	4639      	mov	r1, r7
 800debe:	4681      	mov	r9, r0
 800dec0:	4630      	mov	r0, r6
 800dec2:	f7ff fe49 	bl	800db58 <_Bfree>
 800dec6:	464f      	mov	r7, r9
 800dec8:	106d      	asrs	r5, r5, #1
 800deca:	d00b      	beq.n	800dee4 <__pow5mult+0x90>
 800decc:	6820      	ldr	r0, [r4, #0]
 800dece:	b938      	cbnz	r0, 800dee0 <__pow5mult+0x8c>
 800ded0:	4622      	mov	r2, r4
 800ded2:	4621      	mov	r1, r4
 800ded4:	4630      	mov	r0, r6
 800ded6:	f7ff ff26 	bl	800dd26 <__multiply>
 800deda:	6020      	str	r0, [r4, #0]
 800dedc:	f8c0 8000 	str.w	r8, [r0]
 800dee0:	4604      	mov	r4, r0
 800dee2:	e7e4      	b.n	800deae <__pow5mult+0x5a>
 800dee4:	4638      	mov	r0, r7
 800dee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800deea:	bf00      	nop
 800deec:	0801efd0 	.word	0x0801efd0

0800def0 <__lshift>:
 800def0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800def4:	460c      	mov	r4, r1
 800def6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800defa:	6923      	ldr	r3, [r4, #16]
 800defc:	6849      	ldr	r1, [r1, #4]
 800defe:	eb0a 0903 	add.w	r9, sl, r3
 800df02:	68a3      	ldr	r3, [r4, #8]
 800df04:	4607      	mov	r7, r0
 800df06:	4616      	mov	r6, r2
 800df08:	f109 0501 	add.w	r5, r9, #1
 800df0c:	42ab      	cmp	r3, r5
 800df0e:	db32      	blt.n	800df76 <__lshift+0x86>
 800df10:	4638      	mov	r0, r7
 800df12:	f7ff fded 	bl	800daf0 <_Balloc>
 800df16:	2300      	movs	r3, #0
 800df18:	4680      	mov	r8, r0
 800df1a:	f100 0114 	add.w	r1, r0, #20
 800df1e:	461a      	mov	r2, r3
 800df20:	4553      	cmp	r3, sl
 800df22:	db2b      	blt.n	800df7c <__lshift+0x8c>
 800df24:	6920      	ldr	r0, [r4, #16]
 800df26:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800df2a:	f104 0314 	add.w	r3, r4, #20
 800df2e:	f016 021f 	ands.w	r2, r6, #31
 800df32:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800df36:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800df3a:	d025      	beq.n	800df88 <__lshift+0x98>
 800df3c:	f1c2 0e20 	rsb	lr, r2, #32
 800df40:	2000      	movs	r0, #0
 800df42:	681e      	ldr	r6, [r3, #0]
 800df44:	468a      	mov	sl, r1
 800df46:	4096      	lsls	r6, r2
 800df48:	4330      	orrs	r0, r6
 800df4a:	f84a 0b04 	str.w	r0, [sl], #4
 800df4e:	f853 0b04 	ldr.w	r0, [r3], #4
 800df52:	459c      	cmp	ip, r3
 800df54:	fa20 f00e 	lsr.w	r0, r0, lr
 800df58:	d814      	bhi.n	800df84 <__lshift+0x94>
 800df5a:	6048      	str	r0, [r1, #4]
 800df5c:	b108      	cbz	r0, 800df62 <__lshift+0x72>
 800df5e:	f109 0502 	add.w	r5, r9, #2
 800df62:	3d01      	subs	r5, #1
 800df64:	4638      	mov	r0, r7
 800df66:	f8c8 5010 	str.w	r5, [r8, #16]
 800df6a:	4621      	mov	r1, r4
 800df6c:	f7ff fdf4 	bl	800db58 <_Bfree>
 800df70:	4640      	mov	r0, r8
 800df72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df76:	3101      	adds	r1, #1
 800df78:	005b      	lsls	r3, r3, #1
 800df7a:	e7c7      	b.n	800df0c <__lshift+0x1c>
 800df7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800df80:	3301      	adds	r3, #1
 800df82:	e7cd      	b.n	800df20 <__lshift+0x30>
 800df84:	4651      	mov	r1, sl
 800df86:	e7dc      	b.n	800df42 <__lshift+0x52>
 800df88:	3904      	subs	r1, #4
 800df8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800df8e:	f841 2f04 	str.w	r2, [r1, #4]!
 800df92:	459c      	cmp	ip, r3
 800df94:	d8f9      	bhi.n	800df8a <__lshift+0x9a>
 800df96:	e7e4      	b.n	800df62 <__lshift+0x72>

0800df98 <__mcmp>:
 800df98:	6903      	ldr	r3, [r0, #16]
 800df9a:	690a      	ldr	r2, [r1, #16]
 800df9c:	1a9b      	subs	r3, r3, r2
 800df9e:	b530      	push	{r4, r5, lr}
 800dfa0:	d10c      	bne.n	800dfbc <__mcmp+0x24>
 800dfa2:	0092      	lsls	r2, r2, #2
 800dfa4:	3014      	adds	r0, #20
 800dfa6:	3114      	adds	r1, #20
 800dfa8:	1884      	adds	r4, r0, r2
 800dfaa:	4411      	add	r1, r2
 800dfac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800dfb0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800dfb4:	4295      	cmp	r5, r2
 800dfb6:	d003      	beq.n	800dfc0 <__mcmp+0x28>
 800dfb8:	d305      	bcc.n	800dfc6 <__mcmp+0x2e>
 800dfba:	2301      	movs	r3, #1
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	bd30      	pop	{r4, r5, pc}
 800dfc0:	42a0      	cmp	r0, r4
 800dfc2:	d3f3      	bcc.n	800dfac <__mcmp+0x14>
 800dfc4:	e7fa      	b.n	800dfbc <__mcmp+0x24>
 800dfc6:	f04f 33ff 	mov.w	r3, #4294967295
 800dfca:	e7f7      	b.n	800dfbc <__mcmp+0x24>

0800dfcc <__mdiff>:
 800dfcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfd0:	460d      	mov	r5, r1
 800dfd2:	4607      	mov	r7, r0
 800dfd4:	4611      	mov	r1, r2
 800dfd6:	4628      	mov	r0, r5
 800dfd8:	4614      	mov	r4, r2
 800dfda:	f7ff ffdd 	bl	800df98 <__mcmp>
 800dfde:	1e06      	subs	r6, r0, #0
 800dfe0:	d108      	bne.n	800dff4 <__mdiff+0x28>
 800dfe2:	4631      	mov	r1, r6
 800dfe4:	4638      	mov	r0, r7
 800dfe6:	f7ff fd83 	bl	800daf0 <_Balloc>
 800dfea:	2301      	movs	r3, #1
 800dfec:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800dff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dff4:	bfa4      	itt	ge
 800dff6:	4623      	movge	r3, r4
 800dff8:	462c      	movge	r4, r5
 800dffa:	4638      	mov	r0, r7
 800dffc:	6861      	ldr	r1, [r4, #4]
 800dffe:	bfa6      	itte	ge
 800e000:	461d      	movge	r5, r3
 800e002:	2600      	movge	r6, #0
 800e004:	2601      	movlt	r6, #1
 800e006:	f7ff fd73 	bl	800daf0 <_Balloc>
 800e00a:	692b      	ldr	r3, [r5, #16]
 800e00c:	60c6      	str	r6, [r0, #12]
 800e00e:	6926      	ldr	r6, [r4, #16]
 800e010:	f105 0914 	add.w	r9, r5, #20
 800e014:	f104 0214 	add.w	r2, r4, #20
 800e018:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800e01c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800e020:	f100 0514 	add.w	r5, r0, #20
 800e024:	f04f 0e00 	mov.w	lr, #0
 800e028:	f852 ab04 	ldr.w	sl, [r2], #4
 800e02c:	f859 4b04 	ldr.w	r4, [r9], #4
 800e030:	fa1e f18a 	uxtah	r1, lr, sl
 800e034:	b2a3      	uxth	r3, r4
 800e036:	1ac9      	subs	r1, r1, r3
 800e038:	0c23      	lsrs	r3, r4, #16
 800e03a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800e03e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e042:	b289      	uxth	r1, r1
 800e044:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800e048:	45c8      	cmp	r8, r9
 800e04a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e04e:	4694      	mov	ip, r2
 800e050:	f845 3b04 	str.w	r3, [r5], #4
 800e054:	d8e8      	bhi.n	800e028 <__mdiff+0x5c>
 800e056:	45bc      	cmp	ip, r7
 800e058:	d304      	bcc.n	800e064 <__mdiff+0x98>
 800e05a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800e05e:	b183      	cbz	r3, 800e082 <__mdiff+0xb6>
 800e060:	6106      	str	r6, [r0, #16]
 800e062:	e7c5      	b.n	800dff0 <__mdiff+0x24>
 800e064:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e068:	fa1e f381 	uxtah	r3, lr, r1
 800e06c:	141a      	asrs	r2, r3, #16
 800e06e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e072:	b29b      	uxth	r3, r3
 800e074:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e078:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800e07c:	f845 3b04 	str.w	r3, [r5], #4
 800e080:	e7e9      	b.n	800e056 <__mdiff+0x8a>
 800e082:	3e01      	subs	r6, #1
 800e084:	e7e9      	b.n	800e05a <__mdiff+0x8e>
	...

0800e088 <__ulp>:
 800e088:	4b12      	ldr	r3, [pc, #72]	; (800e0d4 <__ulp+0x4c>)
 800e08a:	ee10 2a90 	vmov	r2, s1
 800e08e:	401a      	ands	r2, r3
 800e090:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800e094:	2b00      	cmp	r3, #0
 800e096:	dd04      	ble.n	800e0a2 <__ulp+0x1a>
 800e098:	2000      	movs	r0, #0
 800e09a:	4619      	mov	r1, r3
 800e09c:	ec41 0b10 	vmov	d0, r0, r1
 800e0a0:	4770      	bx	lr
 800e0a2:	425b      	negs	r3, r3
 800e0a4:	151b      	asrs	r3, r3, #20
 800e0a6:	2b13      	cmp	r3, #19
 800e0a8:	f04f 0000 	mov.w	r0, #0
 800e0ac:	f04f 0100 	mov.w	r1, #0
 800e0b0:	dc04      	bgt.n	800e0bc <__ulp+0x34>
 800e0b2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800e0b6:	fa42 f103 	asr.w	r1, r2, r3
 800e0ba:	e7ef      	b.n	800e09c <__ulp+0x14>
 800e0bc:	3b14      	subs	r3, #20
 800e0be:	2b1e      	cmp	r3, #30
 800e0c0:	f04f 0201 	mov.w	r2, #1
 800e0c4:	bfda      	itte	le
 800e0c6:	f1c3 031f 	rsble	r3, r3, #31
 800e0ca:	fa02 f303 	lslle.w	r3, r2, r3
 800e0ce:	4613      	movgt	r3, r2
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	e7e3      	b.n	800e09c <__ulp+0x14>
 800e0d4:	7ff00000 	.word	0x7ff00000

0800e0d8 <__b2d>:
 800e0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0da:	6905      	ldr	r5, [r0, #16]
 800e0dc:	f100 0714 	add.w	r7, r0, #20
 800e0e0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e0e4:	1f2e      	subs	r6, r5, #4
 800e0e6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e0ea:	4620      	mov	r0, r4
 800e0ec:	f7ff fdc4 	bl	800dc78 <__hi0bits>
 800e0f0:	f1c0 0320 	rsb	r3, r0, #32
 800e0f4:	280a      	cmp	r0, #10
 800e0f6:	600b      	str	r3, [r1, #0]
 800e0f8:	f8df c074 	ldr.w	ip, [pc, #116]	; 800e170 <__b2d+0x98>
 800e0fc:	dc14      	bgt.n	800e128 <__b2d+0x50>
 800e0fe:	f1c0 0e0b 	rsb	lr, r0, #11
 800e102:	fa24 f10e 	lsr.w	r1, r4, lr
 800e106:	42b7      	cmp	r7, r6
 800e108:	ea41 030c 	orr.w	r3, r1, ip
 800e10c:	bf34      	ite	cc
 800e10e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e112:	2100      	movcs	r1, #0
 800e114:	3015      	adds	r0, #21
 800e116:	fa04 f000 	lsl.w	r0, r4, r0
 800e11a:	fa21 f10e 	lsr.w	r1, r1, lr
 800e11e:	ea40 0201 	orr.w	r2, r0, r1
 800e122:	ec43 2b10 	vmov	d0, r2, r3
 800e126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e128:	42b7      	cmp	r7, r6
 800e12a:	bf3a      	itte	cc
 800e12c:	f1a5 0608 	subcc.w	r6, r5, #8
 800e130:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e134:	2100      	movcs	r1, #0
 800e136:	380b      	subs	r0, #11
 800e138:	d015      	beq.n	800e166 <__b2d+0x8e>
 800e13a:	4084      	lsls	r4, r0
 800e13c:	f1c0 0520 	rsb	r5, r0, #32
 800e140:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800e144:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800e148:	42be      	cmp	r6, r7
 800e14a:	fa21 fc05 	lsr.w	ip, r1, r5
 800e14e:	ea44 030c 	orr.w	r3, r4, ip
 800e152:	bf8c      	ite	hi
 800e154:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e158:	2400      	movls	r4, #0
 800e15a:	fa01 f000 	lsl.w	r0, r1, r0
 800e15e:	40ec      	lsrs	r4, r5
 800e160:	ea40 0204 	orr.w	r2, r0, r4
 800e164:	e7dd      	b.n	800e122 <__b2d+0x4a>
 800e166:	ea44 030c 	orr.w	r3, r4, ip
 800e16a:	460a      	mov	r2, r1
 800e16c:	e7d9      	b.n	800e122 <__b2d+0x4a>
 800e16e:	bf00      	nop
 800e170:	3ff00000 	.word	0x3ff00000

0800e174 <__d2b>:
 800e174:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e178:	460e      	mov	r6, r1
 800e17a:	2101      	movs	r1, #1
 800e17c:	ec59 8b10 	vmov	r8, r9, d0
 800e180:	4615      	mov	r5, r2
 800e182:	f7ff fcb5 	bl	800daf0 <_Balloc>
 800e186:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e18a:	4607      	mov	r7, r0
 800e18c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e190:	bb34      	cbnz	r4, 800e1e0 <__d2b+0x6c>
 800e192:	9301      	str	r3, [sp, #4]
 800e194:	f1b8 0300 	subs.w	r3, r8, #0
 800e198:	d027      	beq.n	800e1ea <__d2b+0x76>
 800e19a:	a802      	add	r0, sp, #8
 800e19c:	f840 3d08 	str.w	r3, [r0, #-8]!
 800e1a0:	f7ff fd89 	bl	800dcb6 <__lo0bits>
 800e1a4:	9900      	ldr	r1, [sp, #0]
 800e1a6:	b1f0      	cbz	r0, 800e1e6 <__d2b+0x72>
 800e1a8:	9a01      	ldr	r2, [sp, #4]
 800e1aa:	f1c0 0320 	rsb	r3, r0, #32
 800e1ae:	fa02 f303 	lsl.w	r3, r2, r3
 800e1b2:	430b      	orrs	r3, r1
 800e1b4:	40c2      	lsrs	r2, r0
 800e1b6:	617b      	str	r3, [r7, #20]
 800e1b8:	9201      	str	r2, [sp, #4]
 800e1ba:	9b01      	ldr	r3, [sp, #4]
 800e1bc:	61bb      	str	r3, [r7, #24]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	bf14      	ite	ne
 800e1c2:	2102      	movne	r1, #2
 800e1c4:	2101      	moveq	r1, #1
 800e1c6:	6139      	str	r1, [r7, #16]
 800e1c8:	b1c4      	cbz	r4, 800e1fc <__d2b+0x88>
 800e1ca:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e1ce:	4404      	add	r4, r0
 800e1d0:	6034      	str	r4, [r6, #0]
 800e1d2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e1d6:	6028      	str	r0, [r5, #0]
 800e1d8:	4638      	mov	r0, r7
 800e1da:	b003      	add	sp, #12
 800e1dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e1e4:	e7d5      	b.n	800e192 <__d2b+0x1e>
 800e1e6:	6179      	str	r1, [r7, #20]
 800e1e8:	e7e7      	b.n	800e1ba <__d2b+0x46>
 800e1ea:	a801      	add	r0, sp, #4
 800e1ec:	f7ff fd63 	bl	800dcb6 <__lo0bits>
 800e1f0:	9b01      	ldr	r3, [sp, #4]
 800e1f2:	617b      	str	r3, [r7, #20]
 800e1f4:	2101      	movs	r1, #1
 800e1f6:	6139      	str	r1, [r7, #16]
 800e1f8:	3020      	adds	r0, #32
 800e1fa:	e7e5      	b.n	800e1c8 <__d2b+0x54>
 800e1fc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800e200:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e204:	6030      	str	r0, [r6, #0]
 800e206:	6918      	ldr	r0, [r3, #16]
 800e208:	f7ff fd36 	bl	800dc78 <__hi0bits>
 800e20c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e210:	e7e1      	b.n	800e1d6 <__d2b+0x62>

0800e212 <__ratio>:
 800e212:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e216:	4688      	mov	r8, r1
 800e218:	4669      	mov	r1, sp
 800e21a:	4681      	mov	r9, r0
 800e21c:	f7ff ff5c 	bl	800e0d8 <__b2d>
 800e220:	a901      	add	r1, sp, #4
 800e222:	4640      	mov	r0, r8
 800e224:	ec57 6b10 	vmov	r6, r7, d0
 800e228:	f7ff ff56 	bl	800e0d8 <__b2d>
 800e22c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e230:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e234:	eba3 0c02 	sub.w	ip, r3, r2
 800e238:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e23c:	1a9b      	subs	r3, r3, r2
 800e23e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e242:	ec5b ab10 	vmov	sl, fp, d0
 800e246:	2b00      	cmp	r3, #0
 800e248:	bfce      	itee	gt
 800e24a:	463a      	movgt	r2, r7
 800e24c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e250:	465a      	movle	r2, fp
 800e252:	4659      	mov	r1, fp
 800e254:	463d      	mov	r5, r7
 800e256:	bfd4      	ite	le
 800e258:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800e25c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800e260:	4630      	mov	r0, r6
 800e262:	ee10 2a10 	vmov	r2, s0
 800e266:	460b      	mov	r3, r1
 800e268:	4629      	mov	r1, r5
 800e26a:	f7f2 faf7 	bl	800085c <__aeabi_ddiv>
 800e26e:	ec41 0b10 	vmov	d0, r0, r1
 800e272:	b003      	add	sp, #12
 800e274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e278 <__copybits>:
 800e278:	3901      	subs	r1, #1
 800e27a:	b510      	push	{r4, lr}
 800e27c:	1149      	asrs	r1, r1, #5
 800e27e:	6914      	ldr	r4, [r2, #16]
 800e280:	3101      	adds	r1, #1
 800e282:	f102 0314 	add.w	r3, r2, #20
 800e286:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e28a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e28e:	42a3      	cmp	r3, r4
 800e290:	4602      	mov	r2, r0
 800e292:	d303      	bcc.n	800e29c <__copybits+0x24>
 800e294:	2300      	movs	r3, #0
 800e296:	428a      	cmp	r2, r1
 800e298:	d305      	bcc.n	800e2a6 <__copybits+0x2e>
 800e29a:	bd10      	pop	{r4, pc}
 800e29c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2a0:	f840 2b04 	str.w	r2, [r0], #4
 800e2a4:	e7f3      	b.n	800e28e <__copybits+0x16>
 800e2a6:	f842 3b04 	str.w	r3, [r2], #4
 800e2aa:	e7f4      	b.n	800e296 <__copybits+0x1e>

0800e2ac <__any_on>:
 800e2ac:	f100 0214 	add.w	r2, r0, #20
 800e2b0:	6900      	ldr	r0, [r0, #16]
 800e2b2:	114b      	asrs	r3, r1, #5
 800e2b4:	4298      	cmp	r0, r3
 800e2b6:	b510      	push	{r4, lr}
 800e2b8:	db11      	blt.n	800e2de <__any_on+0x32>
 800e2ba:	dd0a      	ble.n	800e2d2 <__any_on+0x26>
 800e2bc:	f011 011f 	ands.w	r1, r1, #31
 800e2c0:	d007      	beq.n	800e2d2 <__any_on+0x26>
 800e2c2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e2c6:	fa24 f001 	lsr.w	r0, r4, r1
 800e2ca:	fa00 f101 	lsl.w	r1, r0, r1
 800e2ce:	428c      	cmp	r4, r1
 800e2d0:	d10b      	bne.n	800e2ea <__any_on+0x3e>
 800e2d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e2d6:	4293      	cmp	r3, r2
 800e2d8:	d803      	bhi.n	800e2e2 <__any_on+0x36>
 800e2da:	2000      	movs	r0, #0
 800e2dc:	bd10      	pop	{r4, pc}
 800e2de:	4603      	mov	r3, r0
 800e2e0:	e7f7      	b.n	800e2d2 <__any_on+0x26>
 800e2e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e2e6:	2900      	cmp	r1, #0
 800e2e8:	d0f5      	beq.n	800e2d6 <__any_on+0x2a>
 800e2ea:	2001      	movs	r0, #1
 800e2ec:	e7f6      	b.n	800e2dc <__any_on+0x30>

0800e2ee <_calloc_r>:
 800e2ee:	b538      	push	{r3, r4, r5, lr}
 800e2f0:	fb02 f401 	mul.w	r4, r2, r1
 800e2f4:	4621      	mov	r1, r4
 800e2f6:	f7fc f9bb 	bl	800a670 <_malloc_r>
 800e2fa:	4605      	mov	r5, r0
 800e2fc:	b118      	cbz	r0, 800e306 <_calloc_r+0x18>
 800e2fe:	4622      	mov	r2, r4
 800e300:	2100      	movs	r1, #0
 800e302:	f7fc f95f 	bl	800a5c4 <memset>
 800e306:	4628      	mov	r0, r5
 800e308:	bd38      	pop	{r3, r4, r5, pc}

0800e30a <__ssputs_r>:
 800e30a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e30e:	688e      	ldr	r6, [r1, #8]
 800e310:	429e      	cmp	r6, r3
 800e312:	4682      	mov	sl, r0
 800e314:	460c      	mov	r4, r1
 800e316:	4690      	mov	r8, r2
 800e318:	4699      	mov	r9, r3
 800e31a:	d837      	bhi.n	800e38c <__ssputs_r+0x82>
 800e31c:	898a      	ldrh	r2, [r1, #12]
 800e31e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e322:	d031      	beq.n	800e388 <__ssputs_r+0x7e>
 800e324:	6825      	ldr	r5, [r4, #0]
 800e326:	6909      	ldr	r1, [r1, #16]
 800e328:	1a6f      	subs	r7, r5, r1
 800e32a:	6965      	ldr	r5, [r4, #20]
 800e32c:	2302      	movs	r3, #2
 800e32e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e332:	fb95 f5f3 	sdiv	r5, r5, r3
 800e336:	f109 0301 	add.w	r3, r9, #1
 800e33a:	443b      	add	r3, r7
 800e33c:	429d      	cmp	r5, r3
 800e33e:	bf38      	it	cc
 800e340:	461d      	movcc	r5, r3
 800e342:	0553      	lsls	r3, r2, #21
 800e344:	d530      	bpl.n	800e3a8 <__ssputs_r+0x9e>
 800e346:	4629      	mov	r1, r5
 800e348:	f7fc f992 	bl	800a670 <_malloc_r>
 800e34c:	4606      	mov	r6, r0
 800e34e:	b950      	cbnz	r0, 800e366 <__ssputs_r+0x5c>
 800e350:	230c      	movs	r3, #12
 800e352:	f8ca 3000 	str.w	r3, [sl]
 800e356:	89a3      	ldrh	r3, [r4, #12]
 800e358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e35c:	81a3      	strh	r3, [r4, #12]
 800e35e:	f04f 30ff 	mov.w	r0, #4294967295
 800e362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e366:	463a      	mov	r2, r7
 800e368:	6921      	ldr	r1, [r4, #16]
 800e36a:	f7fc f907 	bl	800a57c <memcpy>
 800e36e:	89a3      	ldrh	r3, [r4, #12]
 800e370:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e378:	81a3      	strh	r3, [r4, #12]
 800e37a:	6126      	str	r6, [r4, #16]
 800e37c:	6165      	str	r5, [r4, #20]
 800e37e:	443e      	add	r6, r7
 800e380:	1bed      	subs	r5, r5, r7
 800e382:	6026      	str	r6, [r4, #0]
 800e384:	60a5      	str	r5, [r4, #8]
 800e386:	464e      	mov	r6, r9
 800e388:	454e      	cmp	r6, r9
 800e38a:	d900      	bls.n	800e38e <__ssputs_r+0x84>
 800e38c:	464e      	mov	r6, r9
 800e38e:	4632      	mov	r2, r6
 800e390:	4641      	mov	r1, r8
 800e392:	6820      	ldr	r0, [r4, #0]
 800e394:	f7fc f8fd 	bl	800a592 <memmove>
 800e398:	68a3      	ldr	r3, [r4, #8]
 800e39a:	1b9b      	subs	r3, r3, r6
 800e39c:	60a3      	str	r3, [r4, #8]
 800e39e:	6823      	ldr	r3, [r4, #0]
 800e3a0:	441e      	add	r6, r3
 800e3a2:	6026      	str	r6, [r4, #0]
 800e3a4:	2000      	movs	r0, #0
 800e3a6:	e7dc      	b.n	800e362 <__ssputs_r+0x58>
 800e3a8:	462a      	mov	r2, r5
 800e3aa:	f000 fb2f 	bl	800ea0c <_realloc_r>
 800e3ae:	4606      	mov	r6, r0
 800e3b0:	2800      	cmp	r0, #0
 800e3b2:	d1e2      	bne.n	800e37a <__ssputs_r+0x70>
 800e3b4:	6921      	ldr	r1, [r4, #16]
 800e3b6:	4650      	mov	r0, sl
 800e3b8:	f7fc f90c 	bl	800a5d4 <_free_r>
 800e3bc:	e7c8      	b.n	800e350 <__ssputs_r+0x46>
	...

0800e3c0 <_svfiprintf_r>:
 800e3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3c4:	461d      	mov	r5, r3
 800e3c6:	898b      	ldrh	r3, [r1, #12]
 800e3c8:	061f      	lsls	r7, r3, #24
 800e3ca:	b09d      	sub	sp, #116	; 0x74
 800e3cc:	4680      	mov	r8, r0
 800e3ce:	460c      	mov	r4, r1
 800e3d0:	4616      	mov	r6, r2
 800e3d2:	d50f      	bpl.n	800e3f4 <_svfiprintf_r+0x34>
 800e3d4:	690b      	ldr	r3, [r1, #16]
 800e3d6:	b96b      	cbnz	r3, 800e3f4 <_svfiprintf_r+0x34>
 800e3d8:	2140      	movs	r1, #64	; 0x40
 800e3da:	f7fc f949 	bl	800a670 <_malloc_r>
 800e3de:	6020      	str	r0, [r4, #0]
 800e3e0:	6120      	str	r0, [r4, #16]
 800e3e2:	b928      	cbnz	r0, 800e3f0 <_svfiprintf_r+0x30>
 800e3e4:	230c      	movs	r3, #12
 800e3e6:	f8c8 3000 	str.w	r3, [r8]
 800e3ea:	f04f 30ff 	mov.w	r0, #4294967295
 800e3ee:	e0c8      	b.n	800e582 <_svfiprintf_r+0x1c2>
 800e3f0:	2340      	movs	r3, #64	; 0x40
 800e3f2:	6163      	str	r3, [r4, #20]
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	9309      	str	r3, [sp, #36]	; 0x24
 800e3f8:	2320      	movs	r3, #32
 800e3fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e3fe:	2330      	movs	r3, #48	; 0x30
 800e400:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e404:	9503      	str	r5, [sp, #12]
 800e406:	f04f 0b01 	mov.w	fp, #1
 800e40a:	4637      	mov	r7, r6
 800e40c:	463d      	mov	r5, r7
 800e40e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e412:	b10b      	cbz	r3, 800e418 <_svfiprintf_r+0x58>
 800e414:	2b25      	cmp	r3, #37	; 0x25
 800e416:	d13e      	bne.n	800e496 <_svfiprintf_r+0xd6>
 800e418:	ebb7 0a06 	subs.w	sl, r7, r6
 800e41c:	d00b      	beq.n	800e436 <_svfiprintf_r+0x76>
 800e41e:	4653      	mov	r3, sl
 800e420:	4632      	mov	r2, r6
 800e422:	4621      	mov	r1, r4
 800e424:	4640      	mov	r0, r8
 800e426:	f7ff ff70 	bl	800e30a <__ssputs_r>
 800e42a:	3001      	adds	r0, #1
 800e42c:	f000 80a4 	beq.w	800e578 <_svfiprintf_r+0x1b8>
 800e430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e432:	4453      	add	r3, sl
 800e434:	9309      	str	r3, [sp, #36]	; 0x24
 800e436:	783b      	ldrb	r3, [r7, #0]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	f000 809d 	beq.w	800e578 <_svfiprintf_r+0x1b8>
 800e43e:	2300      	movs	r3, #0
 800e440:	f04f 32ff 	mov.w	r2, #4294967295
 800e444:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e448:	9304      	str	r3, [sp, #16]
 800e44a:	9307      	str	r3, [sp, #28]
 800e44c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e450:	931a      	str	r3, [sp, #104]	; 0x68
 800e452:	462f      	mov	r7, r5
 800e454:	2205      	movs	r2, #5
 800e456:	f817 1b01 	ldrb.w	r1, [r7], #1
 800e45a:	4850      	ldr	r0, [pc, #320]	; (800e59c <_svfiprintf_r+0x1dc>)
 800e45c:	f7f1 fec8 	bl	80001f0 <memchr>
 800e460:	9b04      	ldr	r3, [sp, #16]
 800e462:	b9d0      	cbnz	r0, 800e49a <_svfiprintf_r+0xda>
 800e464:	06d9      	lsls	r1, r3, #27
 800e466:	bf44      	itt	mi
 800e468:	2220      	movmi	r2, #32
 800e46a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e46e:	071a      	lsls	r2, r3, #28
 800e470:	bf44      	itt	mi
 800e472:	222b      	movmi	r2, #43	; 0x2b
 800e474:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e478:	782a      	ldrb	r2, [r5, #0]
 800e47a:	2a2a      	cmp	r2, #42	; 0x2a
 800e47c:	d015      	beq.n	800e4aa <_svfiprintf_r+0xea>
 800e47e:	9a07      	ldr	r2, [sp, #28]
 800e480:	462f      	mov	r7, r5
 800e482:	2000      	movs	r0, #0
 800e484:	250a      	movs	r5, #10
 800e486:	4639      	mov	r1, r7
 800e488:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e48c:	3b30      	subs	r3, #48	; 0x30
 800e48e:	2b09      	cmp	r3, #9
 800e490:	d94d      	bls.n	800e52e <_svfiprintf_r+0x16e>
 800e492:	b1b8      	cbz	r0, 800e4c4 <_svfiprintf_r+0x104>
 800e494:	e00f      	b.n	800e4b6 <_svfiprintf_r+0xf6>
 800e496:	462f      	mov	r7, r5
 800e498:	e7b8      	b.n	800e40c <_svfiprintf_r+0x4c>
 800e49a:	4a40      	ldr	r2, [pc, #256]	; (800e59c <_svfiprintf_r+0x1dc>)
 800e49c:	1a80      	subs	r0, r0, r2
 800e49e:	fa0b f000 	lsl.w	r0, fp, r0
 800e4a2:	4318      	orrs	r0, r3
 800e4a4:	9004      	str	r0, [sp, #16]
 800e4a6:	463d      	mov	r5, r7
 800e4a8:	e7d3      	b.n	800e452 <_svfiprintf_r+0x92>
 800e4aa:	9a03      	ldr	r2, [sp, #12]
 800e4ac:	1d11      	adds	r1, r2, #4
 800e4ae:	6812      	ldr	r2, [r2, #0]
 800e4b0:	9103      	str	r1, [sp, #12]
 800e4b2:	2a00      	cmp	r2, #0
 800e4b4:	db01      	blt.n	800e4ba <_svfiprintf_r+0xfa>
 800e4b6:	9207      	str	r2, [sp, #28]
 800e4b8:	e004      	b.n	800e4c4 <_svfiprintf_r+0x104>
 800e4ba:	4252      	negs	r2, r2
 800e4bc:	f043 0302 	orr.w	r3, r3, #2
 800e4c0:	9207      	str	r2, [sp, #28]
 800e4c2:	9304      	str	r3, [sp, #16]
 800e4c4:	783b      	ldrb	r3, [r7, #0]
 800e4c6:	2b2e      	cmp	r3, #46	; 0x2e
 800e4c8:	d10c      	bne.n	800e4e4 <_svfiprintf_r+0x124>
 800e4ca:	787b      	ldrb	r3, [r7, #1]
 800e4cc:	2b2a      	cmp	r3, #42	; 0x2a
 800e4ce:	d133      	bne.n	800e538 <_svfiprintf_r+0x178>
 800e4d0:	9b03      	ldr	r3, [sp, #12]
 800e4d2:	1d1a      	adds	r2, r3, #4
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	9203      	str	r2, [sp, #12]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	bfb8      	it	lt
 800e4dc:	f04f 33ff 	movlt.w	r3, #4294967295
 800e4e0:	3702      	adds	r7, #2
 800e4e2:	9305      	str	r3, [sp, #20]
 800e4e4:	4d2e      	ldr	r5, [pc, #184]	; (800e5a0 <_svfiprintf_r+0x1e0>)
 800e4e6:	7839      	ldrb	r1, [r7, #0]
 800e4e8:	2203      	movs	r2, #3
 800e4ea:	4628      	mov	r0, r5
 800e4ec:	f7f1 fe80 	bl	80001f0 <memchr>
 800e4f0:	b138      	cbz	r0, 800e502 <_svfiprintf_r+0x142>
 800e4f2:	2340      	movs	r3, #64	; 0x40
 800e4f4:	1b40      	subs	r0, r0, r5
 800e4f6:	fa03 f000 	lsl.w	r0, r3, r0
 800e4fa:	9b04      	ldr	r3, [sp, #16]
 800e4fc:	4303      	orrs	r3, r0
 800e4fe:	3701      	adds	r7, #1
 800e500:	9304      	str	r3, [sp, #16]
 800e502:	7839      	ldrb	r1, [r7, #0]
 800e504:	4827      	ldr	r0, [pc, #156]	; (800e5a4 <_svfiprintf_r+0x1e4>)
 800e506:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e50a:	2206      	movs	r2, #6
 800e50c:	1c7e      	adds	r6, r7, #1
 800e50e:	f7f1 fe6f 	bl	80001f0 <memchr>
 800e512:	2800      	cmp	r0, #0
 800e514:	d038      	beq.n	800e588 <_svfiprintf_r+0x1c8>
 800e516:	4b24      	ldr	r3, [pc, #144]	; (800e5a8 <_svfiprintf_r+0x1e8>)
 800e518:	bb13      	cbnz	r3, 800e560 <_svfiprintf_r+0x1a0>
 800e51a:	9b03      	ldr	r3, [sp, #12]
 800e51c:	3307      	adds	r3, #7
 800e51e:	f023 0307 	bic.w	r3, r3, #7
 800e522:	3308      	adds	r3, #8
 800e524:	9303      	str	r3, [sp, #12]
 800e526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e528:	444b      	add	r3, r9
 800e52a:	9309      	str	r3, [sp, #36]	; 0x24
 800e52c:	e76d      	b.n	800e40a <_svfiprintf_r+0x4a>
 800e52e:	fb05 3202 	mla	r2, r5, r2, r3
 800e532:	2001      	movs	r0, #1
 800e534:	460f      	mov	r7, r1
 800e536:	e7a6      	b.n	800e486 <_svfiprintf_r+0xc6>
 800e538:	2300      	movs	r3, #0
 800e53a:	3701      	adds	r7, #1
 800e53c:	9305      	str	r3, [sp, #20]
 800e53e:	4619      	mov	r1, r3
 800e540:	250a      	movs	r5, #10
 800e542:	4638      	mov	r0, r7
 800e544:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e548:	3a30      	subs	r2, #48	; 0x30
 800e54a:	2a09      	cmp	r2, #9
 800e54c:	d903      	bls.n	800e556 <_svfiprintf_r+0x196>
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d0c8      	beq.n	800e4e4 <_svfiprintf_r+0x124>
 800e552:	9105      	str	r1, [sp, #20]
 800e554:	e7c6      	b.n	800e4e4 <_svfiprintf_r+0x124>
 800e556:	fb05 2101 	mla	r1, r5, r1, r2
 800e55a:	2301      	movs	r3, #1
 800e55c:	4607      	mov	r7, r0
 800e55e:	e7f0      	b.n	800e542 <_svfiprintf_r+0x182>
 800e560:	ab03      	add	r3, sp, #12
 800e562:	9300      	str	r3, [sp, #0]
 800e564:	4622      	mov	r2, r4
 800e566:	4b11      	ldr	r3, [pc, #68]	; (800e5ac <_svfiprintf_r+0x1ec>)
 800e568:	a904      	add	r1, sp, #16
 800e56a:	4640      	mov	r0, r8
 800e56c:	f7fc f96e 	bl	800a84c <_printf_float>
 800e570:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e574:	4681      	mov	r9, r0
 800e576:	d1d6      	bne.n	800e526 <_svfiprintf_r+0x166>
 800e578:	89a3      	ldrh	r3, [r4, #12]
 800e57a:	065b      	lsls	r3, r3, #25
 800e57c:	f53f af35 	bmi.w	800e3ea <_svfiprintf_r+0x2a>
 800e580:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e582:	b01d      	add	sp, #116	; 0x74
 800e584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e588:	ab03      	add	r3, sp, #12
 800e58a:	9300      	str	r3, [sp, #0]
 800e58c:	4622      	mov	r2, r4
 800e58e:	4b07      	ldr	r3, [pc, #28]	; (800e5ac <_svfiprintf_r+0x1ec>)
 800e590:	a904      	add	r1, sp, #16
 800e592:	4640      	mov	r0, r8
 800e594:	f7fc fc10 	bl	800adb8 <_printf_i>
 800e598:	e7ea      	b.n	800e570 <_svfiprintf_r+0x1b0>
 800e59a:	bf00      	nop
 800e59c:	0801efdc 	.word	0x0801efdc
 800e5a0:	0801efe2 	.word	0x0801efe2
 800e5a4:	0801efe6 	.word	0x0801efe6
 800e5a8:	0800a84d 	.word	0x0800a84d
 800e5ac:	0800e30b 	.word	0x0800e30b

0800e5b0 <__sfputc_r>:
 800e5b0:	6893      	ldr	r3, [r2, #8]
 800e5b2:	3b01      	subs	r3, #1
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	b410      	push	{r4}
 800e5b8:	6093      	str	r3, [r2, #8]
 800e5ba:	da08      	bge.n	800e5ce <__sfputc_r+0x1e>
 800e5bc:	6994      	ldr	r4, [r2, #24]
 800e5be:	42a3      	cmp	r3, r4
 800e5c0:	db01      	blt.n	800e5c6 <__sfputc_r+0x16>
 800e5c2:	290a      	cmp	r1, #10
 800e5c4:	d103      	bne.n	800e5ce <__sfputc_r+0x1e>
 800e5c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5ca:	f7fd be5f 	b.w	800c28c <__swbuf_r>
 800e5ce:	6813      	ldr	r3, [r2, #0]
 800e5d0:	1c58      	adds	r0, r3, #1
 800e5d2:	6010      	str	r0, [r2, #0]
 800e5d4:	7019      	strb	r1, [r3, #0]
 800e5d6:	4608      	mov	r0, r1
 800e5d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5dc:	4770      	bx	lr

0800e5de <__sfputs_r>:
 800e5de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5e0:	4606      	mov	r6, r0
 800e5e2:	460f      	mov	r7, r1
 800e5e4:	4614      	mov	r4, r2
 800e5e6:	18d5      	adds	r5, r2, r3
 800e5e8:	42ac      	cmp	r4, r5
 800e5ea:	d101      	bne.n	800e5f0 <__sfputs_r+0x12>
 800e5ec:	2000      	movs	r0, #0
 800e5ee:	e007      	b.n	800e600 <__sfputs_r+0x22>
 800e5f0:	463a      	mov	r2, r7
 800e5f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5f6:	4630      	mov	r0, r6
 800e5f8:	f7ff ffda 	bl	800e5b0 <__sfputc_r>
 800e5fc:	1c43      	adds	r3, r0, #1
 800e5fe:	d1f3      	bne.n	800e5e8 <__sfputs_r+0xa>
 800e600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e604 <_vfiprintf_r>:
 800e604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e608:	460c      	mov	r4, r1
 800e60a:	b09d      	sub	sp, #116	; 0x74
 800e60c:	4617      	mov	r7, r2
 800e60e:	461d      	mov	r5, r3
 800e610:	4606      	mov	r6, r0
 800e612:	b118      	cbz	r0, 800e61c <_vfiprintf_r+0x18>
 800e614:	6983      	ldr	r3, [r0, #24]
 800e616:	b90b      	cbnz	r3, 800e61c <_vfiprintf_r+0x18>
 800e618:	f7fe fe2e 	bl	800d278 <__sinit>
 800e61c:	4b7c      	ldr	r3, [pc, #496]	; (800e810 <_vfiprintf_r+0x20c>)
 800e61e:	429c      	cmp	r4, r3
 800e620:	d158      	bne.n	800e6d4 <_vfiprintf_r+0xd0>
 800e622:	6874      	ldr	r4, [r6, #4]
 800e624:	89a3      	ldrh	r3, [r4, #12]
 800e626:	0718      	lsls	r0, r3, #28
 800e628:	d55e      	bpl.n	800e6e8 <_vfiprintf_r+0xe4>
 800e62a:	6923      	ldr	r3, [r4, #16]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d05b      	beq.n	800e6e8 <_vfiprintf_r+0xe4>
 800e630:	2300      	movs	r3, #0
 800e632:	9309      	str	r3, [sp, #36]	; 0x24
 800e634:	2320      	movs	r3, #32
 800e636:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e63a:	2330      	movs	r3, #48	; 0x30
 800e63c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e640:	9503      	str	r5, [sp, #12]
 800e642:	f04f 0b01 	mov.w	fp, #1
 800e646:	46b8      	mov	r8, r7
 800e648:	4645      	mov	r5, r8
 800e64a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e64e:	b10b      	cbz	r3, 800e654 <_vfiprintf_r+0x50>
 800e650:	2b25      	cmp	r3, #37	; 0x25
 800e652:	d154      	bne.n	800e6fe <_vfiprintf_r+0xfa>
 800e654:	ebb8 0a07 	subs.w	sl, r8, r7
 800e658:	d00b      	beq.n	800e672 <_vfiprintf_r+0x6e>
 800e65a:	4653      	mov	r3, sl
 800e65c:	463a      	mov	r2, r7
 800e65e:	4621      	mov	r1, r4
 800e660:	4630      	mov	r0, r6
 800e662:	f7ff ffbc 	bl	800e5de <__sfputs_r>
 800e666:	3001      	adds	r0, #1
 800e668:	f000 80c2 	beq.w	800e7f0 <_vfiprintf_r+0x1ec>
 800e66c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e66e:	4453      	add	r3, sl
 800e670:	9309      	str	r3, [sp, #36]	; 0x24
 800e672:	f898 3000 	ldrb.w	r3, [r8]
 800e676:	2b00      	cmp	r3, #0
 800e678:	f000 80ba 	beq.w	800e7f0 <_vfiprintf_r+0x1ec>
 800e67c:	2300      	movs	r3, #0
 800e67e:	f04f 32ff 	mov.w	r2, #4294967295
 800e682:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e686:	9304      	str	r3, [sp, #16]
 800e688:	9307      	str	r3, [sp, #28]
 800e68a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e68e:	931a      	str	r3, [sp, #104]	; 0x68
 800e690:	46a8      	mov	r8, r5
 800e692:	2205      	movs	r2, #5
 800e694:	f818 1b01 	ldrb.w	r1, [r8], #1
 800e698:	485e      	ldr	r0, [pc, #376]	; (800e814 <_vfiprintf_r+0x210>)
 800e69a:	f7f1 fda9 	bl	80001f0 <memchr>
 800e69e:	9b04      	ldr	r3, [sp, #16]
 800e6a0:	bb78      	cbnz	r0, 800e702 <_vfiprintf_r+0xfe>
 800e6a2:	06d9      	lsls	r1, r3, #27
 800e6a4:	bf44      	itt	mi
 800e6a6:	2220      	movmi	r2, #32
 800e6a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e6ac:	071a      	lsls	r2, r3, #28
 800e6ae:	bf44      	itt	mi
 800e6b0:	222b      	movmi	r2, #43	; 0x2b
 800e6b2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e6b6:	782a      	ldrb	r2, [r5, #0]
 800e6b8:	2a2a      	cmp	r2, #42	; 0x2a
 800e6ba:	d02a      	beq.n	800e712 <_vfiprintf_r+0x10e>
 800e6bc:	9a07      	ldr	r2, [sp, #28]
 800e6be:	46a8      	mov	r8, r5
 800e6c0:	2000      	movs	r0, #0
 800e6c2:	250a      	movs	r5, #10
 800e6c4:	4641      	mov	r1, r8
 800e6c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e6ca:	3b30      	subs	r3, #48	; 0x30
 800e6cc:	2b09      	cmp	r3, #9
 800e6ce:	d969      	bls.n	800e7a4 <_vfiprintf_r+0x1a0>
 800e6d0:	b360      	cbz	r0, 800e72c <_vfiprintf_r+0x128>
 800e6d2:	e024      	b.n	800e71e <_vfiprintf_r+0x11a>
 800e6d4:	4b50      	ldr	r3, [pc, #320]	; (800e818 <_vfiprintf_r+0x214>)
 800e6d6:	429c      	cmp	r4, r3
 800e6d8:	d101      	bne.n	800e6de <_vfiprintf_r+0xda>
 800e6da:	68b4      	ldr	r4, [r6, #8]
 800e6dc:	e7a2      	b.n	800e624 <_vfiprintf_r+0x20>
 800e6de:	4b4f      	ldr	r3, [pc, #316]	; (800e81c <_vfiprintf_r+0x218>)
 800e6e0:	429c      	cmp	r4, r3
 800e6e2:	bf08      	it	eq
 800e6e4:	68f4      	ldreq	r4, [r6, #12]
 800e6e6:	e79d      	b.n	800e624 <_vfiprintf_r+0x20>
 800e6e8:	4621      	mov	r1, r4
 800e6ea:	4630      	mov	r0, r6
 800e6ec:	f7fd fe20 	bl	800c330 <__swsetup_r>
 800e6f0:	2800      	cmp	r0, #0
 800e6f2:	d09d      	beq.n	800e630 <_vfiprintf_r+0x2c>
 800e6f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e6f8:	b01d      	add	sp, #116	; 0x74
 800e6fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6fe:	46a8      	mov	r8, r5
 800e700:	e7a2      	b.n	800e648 <_vfiprintf_r+0x44>
 800e702:	4a44      	ldr	r2, [pc, #272]	; (800e814 <_vfiprintf_r+0x210>)
 800e704:	1a80      	subs	r0, r0, r2
 800e706:	fa0b f000 	lsl.w	r0, fp, r0
 800e70a:	4318      	orrs	r0, r3
 800e70c:	9004      	str	r0, [sp, #16]
 800e70e:	4645      	mov	r5, r8
 800e710:	e7be      	b.n	800e690 <_vfiprintf_r+0x8c>
 800e712:	9a03      	ldr	r2, [sp, #12]
 800e714:	1d11      	adds	r1, r2, #4
 800e716:	6812      	ldr	r2, [r2, #0]
 800e718:	9103      	str	r1, [sp, #12]
 800e71a:	2a00      	cmp	r2, #0
 800e71c:	db01      	blt.n	800e722 <_vfiprintf_r+0x11e>
 800e71e:	9207      	str	r2, [sp, #28]
 800e720:	e004      	b.n	800e72c <_vfiprintf_r+0x128>
 800e722:	4252      	negs	r2, r2
 800e724:	f043 0302 	orr.w	r3, r3, #2
 800e728:	9207      	str	r2, [sp, #28]
 800e72a:	9304      	str	r3, [sp, #16]
 800e72c:	f898 3000 	ldrb.w	r3, [r8]
 800e730:	2b2e      	cmp	r3, #46	; 0x2e
 800e732:	d10e      	bne.n	800e752 <_vfiprintf_r+0x14e>
 800e734:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e738:	2b2a      	cmp	r3, #42	; 0x2a
 800e73a:	d138      	bne.n	800e7ae <_vfiprintf_r+0x1aa>
 800e73c:	9b03      	ldr	r3, [sp, #12]
 800e73e:	1d1a      	adds	r2, r3, #4
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	9203      	str	r2, [sp, #12]
 800e744:	2b00      	cmp	r3, #0
 800e746:	bfb8      	it	lt
 800e748:	f04f 33ff 	movlt.w	r3, #4294967295
 800e74c:	f108 0802 	add.w	r8, r8, #2
 800e750:	9305      	str	r3, [sp, #20]
 800e752:	4d33      	ldr	r5, [pc, #204]	; (800e820 <_vfiprintf_r+0x21c>)
 800e754:	f898 1000 	ldrb.w	r1, [r8]
 800e758:	2203      	movs	r2, #3
 800e75a:	4628      	mov	r0, r5
 800e75c:	f7f1 fd48 	bl	80001f0 <memchr>
 800e760:	b140      	cbz	r0, 800e774 <_vfiprintf_r+0x170>
 800e762:	2340      	movs	r3, #64	; 0x40
 800e764:	1b40      	subs	r0, r0, r5
 800e766:	fa03 f000 	lsl.w	r0, r3, r0
 800e76a:	9b04      	ldr	r3, [sp, #16]
 800e76c:	4303      	orrs	r3, r0
 800e76e:	f108 0801 	add.w	r8, r8, #1
 800e772:	9304      	str	r3, [sp, #16]
 800e774:	f898 1000 	ldrb.w	r1, [r8]
 800e778:	482a      	ldr	r0, [pc, #168]	; (800e824 <_vfiprintf_r+0x220>)
 800e77a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e77e:	2206      	movs	r2, #6
 800e780:	f108 0701 	add.w	r7, r8, #1
 800e784:	f7f1 fd34 	bl	80001f0 <memchr>
 800e788:	2800      	cmp	r0, #0
 800e78a:	d037      	beq.n	800e7fc <_vfiprintf_r+0x1f8>
 800e78c:	4b26      	ldr	r3, [pc, #152]	; (800e828 <_vfiprintf_r+0x224>)
 800e78e:	bb1b      	cbnz	r3, 800e7d8 <_vfiprintf_r+0x1d4>
 800e790:	9b03      	ldr	r3, [sp, #12]
 800e792:	3307      	adds	r3, #7
 800e794:	f023 0307 	bic.w	r3, r3, #7
 800e798:	3308      	adds	r3, #8
 800e79a:	9303      	str	r3, [sp, #12]
 800e79c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e79e:	444b      	add	r3, r9
 800e7a0:	9309      	str	r3, [sp, #36]	; 0x24
 800e7a2:	e750      	b.n	800e646 <_vfiprintf_r+0x42>
 800e7a4:	fb05 3202 	mla	r2, r5, r2, r3
 800e7a8:	2001      	movs	r0, #1
 800e7aa:	4688      	mov	r8, r1
 800e7ac:	e78a      	b.n	800e6c4 <_vfiprintf_r+0xc0>
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	f108 0801 	add.w	r8, r8, #1
 800e7b4:	9305      	str	r3, [sp, #20]
 800e7b6:	4619      	mov	r1, r3
 800e7b8:	250a      	movs	r5, #10
 800e7ba:	4640      	mov	r0, r8
 800e7bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e7c0:	3a30      	subs	r2, #48	; 0x30
 800e7c2:	2a09      	cmp	r2, #9
 800e7c4:	d903      	bls.n	800e7ce <_vfiprintf_r+0x1ca>
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d0c3      	beq.n	800e752 <_vfiprintf_r+0x14e>
 800e7ca:	9105      	str	r1, [sp, #20]
 800e7cc:	e7c1      	b.n	800e752 <_vfiprintf_r+0x14e>
 800e7ce:	fb05 2101 	mla	r1, r5, r1, r2
 800e7d2:	2301      	movs	r3, #1
 800e7d4:	4680      	mov	r8, r0
 800e7d6:	e7f0      	b.n	800e7ba <_vfiprintf_r+0x1b6>
 800e7d8:	ab03      	add	r3, sp, #12
 800e7da:	9300      	str	r3, [sp, #0]
 800e7dc:	4622      	mov	r2, r4
 800e7de:	4b13      	ldr	r3, [pc, #76]	; (800e82c <_vfiprintf_r+0x228>)
 800e7e0:	a904      	add	r1, sp, #16
 800e7e2:	4630      	mov	r0, r6
 800e7e4:	f7fc f832 	bl	800a84c <_printf_float>
 800e7e8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e7ec:	4681      	mov	r9, r0
 800e7ee:	d1d5      	bne.n	800e79c <_vfiprintf_r+0x198>
 800e7f0:	89a3      	ldrh	r3, [r4, #12]
 800e7f2:	065b      	lsls	r3, r3, #25
 800e7f4:	f53f af7e 	bmi.w	800e6f4 <_vfiprintf_r+0xf0>
 800e7f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e7fa:	e77d      	b.n	800e6f8 <_vfiprintf_r+0xf4>
 800e7fc:	ab03      	add	r3, sp, #12
 800e7fe:	9300      	str	r3, [sp, #0]
 800e800:	4622      	mov	r2, r4
 800e802:	4b0a      	ldr	r3, [pc, #40]	; (800e82c <_vfiprintf_r+0x228>)
 800e804:	a904      	add	r1, sp, #16
 800e806:	4630      	mov	r0, r6
 800e808:	f7fc fad6 	bl	800adb8 <_printf_i>
 800e80c:	e7ec      	b.n	800e7e8 <_vfiprintf_r+0x1e4>
 800e80e:	bf00      	nop
 800e810:	0801ee90 	.word	0x0801ee90
 800e814:	0801efdc 	.word	0x0801efdc
 800e818:	0801eeb0 	.word	0x0801eeb0
 800e81c:	0801ee70 	.word	0x0801ee70
 800e820:	0801efe2 	.word	0x0801efe2
 800e824:	0801efe6 	.word	0x0801efe6
 800e828:	0800a84d 	.word	0x0800a84d
 800e82c:	0800e5df 	.word	0x0800e5df

0800e830 <_putc_r>:
 800e830:	b570      	push	{r4, r5, r6, lr}
 800e832:	460d      	mov	r5, r1
 800e834:	4614      	mov	r4, r2
 800e836:	4606      	mov	r6, r0
 800e838:	b118      	cbz	r0, 800e842 <_putc_r+0x12>
 800e83a:	6983      	ldr	r3, [r0, #24]
 800e83c:	b90b      	cbnz	r3, 800e842 <_putc_r+0x12>
 800e83e:	f7fe fd1b 	bl	800d278 <__sinit>
 800e842:	4b13      	ldr	r3, [pc, #76]	; (800e890 <_putc_r+0x60>)
 800e844:	429c      	cmp	r4, r3
 800e846:	d112      	bne.n	800e86e <_putc_r+0x3e>
 800e848:	6874      	ldr	r4, [r6, #4]
 800e84a:	68a3      	ldr	r3, [r4, #8]
 800e84c:	3b01      	subs	r3, #1
 800e84e:	2b00      	cmp	r3, #0
 800e850:	60a3      	str	r3, [r4, #8]
 800e852:	da16      	bge.n	800e882 <_putc_r+0x52>
 800e854:	69a2      	ldr	r2, [r4, #24]
 800e856:	4293      	cmp	r3, r2
 800e858:	db02      	blt.n	800e860 <_putc_r+0x30>
 800e85a:	b2eb      	uxtb	r3, r5
 800e85c:	2b0a      	cmp	r3, #10
 800e85e:	d110      	bne.n	800e882 <_putc_r+0x52>
 800e860:	4622      	mov	r2, r4
 800e862:	4629      	mov	r1, r5
 800e864:	4630      	mov	r0, r6
 800e866:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e86a:	f7fd bd0f 	b.w	800c28c <__swbuf_r>
 800e86e:	4b09      	ldr	r3, [pc, #36]	; (800e894 <_putc_r+0x64>)
 800e870:	429c      	cmp	r4, r3
 800e872:	d101      	bne.n	800e878 <_putc_r+0x48>
 800e874:	68b4      	ldr	r4, [r6, #8]
 800e876:	e7e8      	b.n	800e84a <_putc_r+0x1a>
 800e878:	4b07      	ldr	r3, [pc, #28]	; (800e898 <_putc_r+0x68>)
 800e87a:	429c      	cmp	r4, r3
 800e87c:	bf08      	it	eq
 800e87e:	68f4      	ldreq	r4, [r6, #12]
 800e880:	e7e3      	b.n	800e84a <_putc_r+0x1a>
 800e882:	6823      	ldr	r3, [r4, #0]
 800e884:	1c5a      	adds	r2, r3, #1
 800e886:	6022      	str	r2, [r4, #0]
 800e888:	701d      	strb	r5, [r3, #0]
 800e88a:	b2e8      	uxtb	r0, r5
 800e88c:	bd70      	pop	{r4, r5, r6, pc}
 800e88e:	bf00      	nop
 800e890:	0801ee90 	.word	0x0801ee90
 800e894:	0801eeb0 	.word	0x0801eeb0
 800e898:	0801ee70 	.word	0x0801ee70

0800e89c <__sread>:
 800e89c:	b510      	push	{r4, lr}
 800e89e:	460c      	mov	r4, r1
 800e8a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8a4:	f000 f8d8 	bl	800ea58 <_read_r>
 800e8a8:	2800      	cmp	r0, #0
 800e8aa:	bfab      	itete	ge
 800e8ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e8ae:	89a3      	ldrhlt	r3, [r4, #12]
 800e8b0:	181b      	addge	r3, r3, r0
 800e8b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e8b6:	bfac      	ite	ge
 800e8b8:	6563      	strge	r3, [r4, #84]	; 0x54
 800e8ba:	81a3      	strhlt	r3, [r4, #12]
 800e8bc:	bd10      	pop	{r4, pc}

0800e8be <__swrite>:
 800e8be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8c2:	461f      	mov	r7, r3
 800e8c4:	898b      	ldrh	r3, [r1, #12]
 800e8c6:	05db      	lsls	r3, r3, #23
 800e8c8:	4605      	mov	r5, r0
 800e8ca:	460c      	mov	r4, r1
 800e8cc:	4616      	mov	r6, r2
 800e8ce:	d505      	bpl.n	800e8dc <__swrite+0x1e>
 800e8d0:	2302      	movs	r3, #2
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8d8:	f000 f886 	bl	800e9e8 <_lseek_r>
 800e8dc:	89a3      	ldrh	r3, [r4, #12]
 800e8de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e8e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e8e6:	81a3      	strh	r3, [r4, #12]
 800e8e8:	4632      	mov	r2, r6
 800e8ea:	463b      	mov	r3, r7
 800e8ec:	4628      	mov	r0, r5
 800e8ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e8f2:	f000 b835 	b.w	800e960 <_write_r>

0800e8f6 <__sseek>:
 800e8f6:	b510      	push	{r4, lr}
 800e8f8:	460c      	mov	r4, r1
 800e8fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8fe:	f000 f873 	bl	800e9e8 <_lseek_r>
 800e902:	1c43      	adds	r3, r0, #1
 800e904:	89a3      	ldrh	r3, [r4, #12]
 800e906:	bf15      	itete	ne
 800e908:	6560      	strne	r0, [r4, #84]	; 0x54
 800e90a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e90e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e912:	81a3      	strheq	r3, [r4, #12]
 800e914:	bf18      	it	ne
 800e916:	81a3      	strhne	r3, [r4, #12]
 800e918:	bd10      	pop	{r4, pc}

0800e91a <__sclose>:
 800e91a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e91e:	f000 b831 	b.w	800e984 <_close_r>

0800e922 <strncmp>:
 800e922:	b510      	push	{r4, lr}
 800e924:	b16a      	cbz	r2, 800e942 <strncmp+0x20>
 800e926:	3901      	subs	r1, #1
 800e928:	1884      	adds	r4, r0, r2
 800e92a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e92e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e932:	4293      	cmp	r3, r2
 800e934:	d103      	bne.n	800e93e <strncmp+0x1c>
 800e936:	42a0      	cmp	r0, r4
 800e938:	d001      	beq.n	800e93e <strncmp+0x1c>
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d1f5      	bne.n	800e92a <strncmp+0x8>
 800e93e:	1a98      	subs	r0, r3, r2
 800e940:	bd10      	pop	{r4, pc}
 800e942:	4610      	mov	r0, r2
 800e944:	e7fc      	b.n	800e940 <strncmp+0x1e>

0800e946 <__ascii_wctomb>:
 800e946:	b149      	cbz	r1, 800e95c <__ascii_wctomb+0x16>
 800e948:	2aff      	cmp	r2, #255	; 0xff
 800e94a:	bf85      	ittet	hi
 800e94c:	238a      	movhi	r3, #138	; 0x8a
 800e94e:	6003      	strhi	r3, [r0, #0]
 800e950:	700a      	strbls	r2, [r1, #0]
 800e952:	f04f 30ff 	movhi.w	r0, #4294967295
 800e956:	bf98      	it	ls
 800e958:	2001      	movls	r0, #1
 800e95a:	4770      	bx	lr
 800e95c:	4608      	mov	r0, r1
 800e95e:	4770      	bx	lr

0800e960 <_write_r>:
 800e960:	b538      	push	{r3, r4, r5, lr}
 800e962:	4c07      	ldr	r4, [pc, #28]	; (800e980 <_write_r+0x20>)
 800e964:	4605      	mov	r5, r0
 800e966:	4608      	mov	r0, r1
 800e968:	4611      	mov	r1, r2
 800e96a:	2200      	movs	r2, #0
 800e96c:	6022      	str	r2, [r4, #0]
 800e96e:	461a      	mov	r2, r3
 800e970:	f7f2 fcb6 	bl	80012e0 <_write>
 800e974:	1c43      	adds	r3, r0, #1
 800e976:	d102      	bne.n	800e97e <_write_r+0x1e>
 800e978:	6823      	ldr	r3, [r4, #0]
 800e97a:	b103      	cbz	r3, 800e97e <_write_r+0x1e>
 800e97c:	602b      	str	r3, [r5, #0]
 800e97e:	bd38      	pop	{r3, r4, r5, pc}
 800e980:	20000f00 	.word	0x20000f00

0800e984 <_close_r>:
 800e984:	b538      	push	{r3, r4, r5, lr}
 800e986:	4c06      	ldr	r4, [pc, #24]	; (800e9a0 <_close_r+0x1c>)
 800e988:	2300      	movs	r3, #0
 800e98a:	4605      	mov	r5, r0
 800e98c:	4608      	mov	r0, r1
 800e98e:	6023      	str	r3, [r4, #0]
 800e990:	f7f2 fffb 	bl	800198a <_close>
 800e994:	1c43      	adds	r3, r0, #1
 800e996:	d102      	bne.n	800e99e <_close_r+0x1a>
 800e998:	6823      	ldr	r3, [r4, #0]
 800e99a:	b103      	cbz	r3, 800e99e <_close_r+0x1a>
 800e99c:	602b      	str	r3, [r5, #0]
 800e99e:	bd38      	pop	{r3, r4, r5, pc}
 800e9a0:	20000f00 	.word	0x20000f00

0800e9a4 <_fstat_r>:
 800e9a4:	b538      	push	{r3, r4, r5, lr}
 800e9a6:	4c07      	ldr	r4, [pc, #28]	; (800e9c4 <_fstat_r+0x20>)
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	4605      	mov	r5, r0
 800e9ac:	4608      	mov	r0, r1
 800e9ae:	4611      	mov	r1, r2
 800e9b0:	6023      	str	r3, [r4, #0]
 800e9b2:	f7f2 fff6 	bl	80019a2 <_fstat>
 800e9b6:	1c43      	adds	r3, r0, #1
 800e9b8:	d102      	bne.n	800e9c0 <_fstat_r+0x1c>
 800e9ba:	6823      	ldr	r3, [r4, #0]
 800e9bc:	b103      	cbz	r3, 800e9c0 <_fstat_r+0x1c>
 800e9be:	602b      	str	r3, [r5, #0]
 800e9c0:	bd38      	pop	{r3, r4, r5, pc}
 800e9c2:	bf00      	nop
 800e9c4:	20000f00 	.word	0x20000f00

0800e9c8 <_isatty_r>:
 800e9c8:	b538      	push	{r3, r4, r5, lr}
 800e9ca:	4c06      	ldr	r4, [pc, #24]	; (800e9e4 <_isatty_r+0x1c>)
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	4605      	mov	r5, r0
 800e9d0:	4608      	mov	r0, r1
 800e9d2:	6023      	str	r3, [r4, #0]
 800e9d4:	f7f2 fff5 	bl	80019c2 <_isatty>
 800e9d8:	1c43      	adds	r3, r0, #1
 800e9da:	d102      	bne.n	800e9e2 <_isatty_r+0x1a>
 800e9dc:	6823      	ldr	r3, [r4, #0]
 800e9de:	b103      	cbz	r3, 800e9e2 <_isatty_r+0x1a>
 800e9e0:	602b      	str	r3, [r5, #0]
 800e9e2:	bd38      	pop	{r3, r4, r5, pc}
 800e9e4:	20000f00 	.word	0x20000f00

0800e9e8 <_lseek_r>:
 800e9e8:	b538      	push	{r3, r4, r5, lr}
 800e9ea:	4c07      	ldr	r4, [pc, #28]	; (800ea08 <_lseek_r+0x20>)
 800e9ec:	4605      	mov	r5, r0
 800e9ee:	4608      	mov	r0, r1
 800e9f0:	4611      	mov	r1, r2
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	6022      	str	r2, [r4, #0]
 800e9f6:	461a      	mov	r2, r3
 800e9f8:	f7f2 ffee 	bl	80019d8 <_lseek>
 800e9fc:	1c43      	adds	r3, r0, #1
 800e9fe:	d102      	bne.n	800ea06 <_lseek_r+0x1e>
 800ea00:	6823      	ldr	r3, [r4, #0]
 800ea02:	b103      	cbz	r3, 800ea06 <_lseek_r+0x1e>
 800ea04:	602b      	str	r3, [r5, #0]
 800ea06:	bd38      	pop	{r3, r4, r5, pc}
 800ea08:	20000f00 	.word	0x20000f00

0800ea0c <_realloc_r>:
 800ea0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea0e:	4607      	mov	r7, r0
 800ea10:	4614      	mov	r4, r2
 800ea12:	460e      	mov	r6, r1
 800ea14:	b921      	cbnz	r1, 800ea20 <_realloc_r+0x14>
 800ea16:	4611      	mov	r1, r2
 800ea18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ea1c:	f7fb be28 	b.w	800a670 <_malloc_r>
 800ea20:	b922      	cbnz	r2, 800ea2c <_realloc_r+0x20>
 800ea22:	f7fb fdd7 	bl	800a5d4 <_free_r>
 800ea26:	4625      	mov	r5, r4
 800ea28:	4628      	mov	r0, r5
 800ea2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea2c:	f000 f826 	bl	800ea7c <_malloc_usable_size_r>
 800ea30:	42a0      	cmp	r0, r4
 800ea32:	d20f      	bcs.n	800ea54 <_realloc_r+0x48>
 800ea34:	4621      	mov	r1, r4
 800ea36:	4638      	mov	r0, r7
 800ea38:	f7fb fe1a 	bl	800a670 <_malloc_r>
 800ea3c:	4605      	mov	r5, r0
 800ea3e:	2800      	cmp	r0, #0
 800ea40:	d0f2      	beq.n	800ea28 <_realloc_r+0x1c>
 800ea42:	4631      	mov	r1, r6
 800ea44:	4622      	mov	r2, r4
 800ea46:	f7fb fd99 	bl	800a57c <memcpy>
 800ea4a:	4631      	mov	r1, r6
 800ea4c:	4638      	mov	r0, r7
 800ea4e:	f7fb fdc1 	bl	800a5d4 <_free_r>
 800ea52:	e7e9      	b.n	800ea28 <_realloc_r+0x1c>
 800ea54:	4635      	mov	r5, r6
 800ea56:	e7e7      	b.n	800ea28 <_realloc_r+0x1c>

0800ea58 <_read_r>:
 800ea58:	b538      	push	{r3, r4, r5, lr}
 800ea5a:	4c07      	ldr	r4, [pc, #28]	; (800ea78 <_read_r+0x20>)
 800ea5c:	4605      	mov	r5, r0
 800ea5e:	4608      	mov	r0, r1
 800ea60:	4611      	mov	r1, r2
 800ea62:	2200      	movs	r2, #0
 800ea64:	6022      	str	r2, [r4, #0]
 800ea66:	461a      	mov	r2, r3
 800ea68:	f7f2 ff72 	bl	8001950 <_read>
 800ea6c:	1c43      	adds	r3, r0, #1
 800ea6e:	d102      	bne.n	800ea76 <_read_r+0x1e>
 800ea70:	6823      	ldr	r3, [r4, #0]
 800ea72:	b103      	cbz	r3, 800ea76 <_read_r+0x1e>
 800ea74:	602b      	str	r3, [r5, #0]
 800ea76:	bd38      	pop	{r3, r4, r5, pc}
 800ea78:	20000f00 	.word	0x20000f00

0800ea7c <_malloc_usable_size_r>:
 800ea7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea80:	1f18      	subs	r0, r3, #4
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	bfbc      	itt	lt
 800ea86:	580b      	ldrlt	r3, [r1, r0]
 800ea88:	18c0      	addlt	r0, r0, r3
 800ea8a:	4770      	bx	lr

0800ea8c <_init>:
 800ea8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea8e:	bf00      	nop
 800ea90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea92:	bc08      	pop	{r3}
 800ea94:	469e      	mov	lr, r3
 800ea96:	4770      	bx	lr

0800ea98 <_fini>:
 800ea98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea9a:	bf00      	nop
 800ea9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea9e:	bc08      	pop	{r3}
 800eaa0:	469e      	mov	lr, r3
 800eaa2:	4770      	bx	lr
